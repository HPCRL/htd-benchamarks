
#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ A, float* __restrict__ B, float* __restrict__ C, float* __restrict__ out) {
  float transposed_gemm[2];
  __shared__ float A_shared[896];
  __shared__ float B_shared[224];
  transposed_gemm[0] = 0.000000e+00f;
  transposed_gemm[1] = 0.000000e+00f;
  A_shared[((int)threadIdx.x)] = A[((((((int)blockIdx.x) / 28) * 7168) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28))];
  A_shared[(((int)threadIdx.x) + 128)] = A[((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28))];
  A_shared[(((int)threadIdx.x) + 256)] = A[((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 256) / 28) * 224)) + ((((int)threadIdx.x) + 4) % 28))];
  A_shared[(((int)threadIdx.x) + 384)] = A[((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 384) / 28) * 224)) + ((((int)threadIdx.x) + 20) % 28))];
  A_shared[(((int)threadIdx.x) + 512)] = A[((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 512) / 28) * 224)) + ((((int)threadIdx.x) + 8) % 28))];
  A_shared[(((int)threadIdx.x) + 640)] = A[((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 640) / 28) * 224)) + ((((int)threadIdx.x) + 24) % 28))];
  A_shared[(((int)threadIdx.x) + 768)] = A[((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 768) / 28) * 224)) + ((((int)threadIdx.x) + 12) % 28))];
  B_shared[((int)threadIdx.x)] = B[((((((int)blockIdx.x) % 28) * 1792) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28))];
  if (((int)threadIdx.x) < 96) {
    B_shared[(((int)threadIdx.x) + 128)] = B[((((((int)blockIdx.x) % 28) * 1792) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28))];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 3) * 56)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 28)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 1)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 29)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 2)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 30)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 3)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 31)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 4)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 32)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 5)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 33)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 6)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 34)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 7)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 35)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 8)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 36)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 9)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 37)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 10)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 38)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 11)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 39)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 12)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 40)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 13)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 41)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 14)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 42)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 15)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 43)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 16)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 44)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 17)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 45)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 18)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 46)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 19)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 47)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 20)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 48)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 21)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 49)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 22)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 50)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 23)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 51)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 24)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 52)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 25)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 53)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 26)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 54)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 27)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 55)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  __syncthreads();
  A_shared[((int)threadIdx.x)] = A[(((((((int)blockIdx.x) / 28) * 7168) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28)) + 28)];
  A_shared[(((int)threadIdx.x) + 128)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28)) + 28)];
  A_shared[(((int)threadIdx.x) + 256)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 256) / 28) * 224)) + ((((int)threadIdx.x) + 4) % 28)) + 28)];
  A_shared[(((int)threadIdx.x) + 384)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 384) / 28) * 224)) + ((((int)threadIdx.x) + 20) % 28)) + 28)];
  A_shared[(((int)threadIdx.x) + 512)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 512) / 28) * 224)) + ((((int)threadIdx.x) + 8) % 28)) + 28)];
  A_shared[(((int)threadIdx.x) + 640)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 640) / 28) * 224)) + ((((int)threadIdx.x) + 24) % 28)) + 28)];
  A_shared[(((int)threadIdx.x) + 768)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 768) / 28) * 224)) + ((((int)threadIdx.x) + 12) % 28)) + 28)];
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 28) * 1792) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28)) + 28)];
  if (((int)threadIdx.x) < 96) {
    B_shared[(((int)threadIdx.x) + 128)] = B[(((((((int)blockIdx.x) % 28) * 1792) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28)) + 28)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 3) * 56)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 28)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 1)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 29)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 2)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 30)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 3)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 31)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 4)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 32)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 5)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 33)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 6)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 34)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 7)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 35)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 8)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 36)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 9)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 37)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 10)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 38)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 11)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 39)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 12)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 40)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 13)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 41)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 14)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 42)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 15)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 43)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 16)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 44)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 17)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 45)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 18)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 46)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 19)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 47)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 20)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 48)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 21)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 49)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 22)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 50)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 23)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 51)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 24)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 52)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 25)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 53)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 26)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 54)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 27)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 55)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  __syncthreads();
  A_shared[((int)threadIdx.x)] = A[(((((((int)blockIdx.x) / 28) * 7168) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28)) + 56)];
  A_shared[(((int)threadIdx.x) + 128)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28)) + 56)];
  A_shared[(((int)threadIdx.x) + 256)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 256) / 28) * 224)) + ((((int)threadIdx.x) + 4) % 28)) + 56)];
  A_shared[(((int)threadIdx.x) + 384)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 384) / 28) * 224)) + ((((int)threadIdx.x) + 20) % 28)) + 56)];
  A_shared[(((int)threadIdx.x) + 512)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 512) / 28) * 224)) + ((((int)threadIdx.x) + 8) % 28)) + 56)];
  A_shared[(((int)threadIdx.x) + 640)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 640) / 28) * 224)) + ((((int)threadIdx.x) + 24) % 28)) + 56)];
  A_shared[(((int)threadIdx.x) + 768)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 768) / 28) * 224)) + ((((int)threadIdx.x) + 12) % 28)) + 56)];
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 28) * 1792) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28)) + 56)];
  if (((int)threadIdx.x) < 96) {
    B_shared[(((int)threadIdx.x) + 128)] = B[(((((((int)blockIdx.x) % 28) * 1792) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28)) + 56)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 3) * 56)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 28)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 1)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 29)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 2)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 30)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 3)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 31)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 4)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 32)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 5)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 33)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 6)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 34)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 7)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 35)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 8)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 36)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 9)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 37)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 10)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 38)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 11)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 39)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 12)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 40)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 13)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 41)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 14)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 42)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 15)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 43)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 16)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 44)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 17)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 45)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 18)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 46)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 19)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 47)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 20)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 48)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 21)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 49)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 22)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 50)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 23)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 51)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 24)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 52)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 25)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 53)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 26)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 54)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 27)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 55)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  __syncthreads();
  A_shared[((int)threadIdx.x)] = A[(((((((int)blockIdx.x) / 28) * 7168) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28)) + 84)];
  A_shared[(((int)threadIdx.x) + 128)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28)) + 84)];
  A_shared[(((int)threadIdx.x) + 256)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 256) / 28) * 224)) + ((((int)threadIdx.x) + 4) % 28)) + 84)];
  A_shared[(((int)threadIdx.x) + 384)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 384) / 28) * 224)) + ((((int)threadIdx.x) + 20) % 28)) + 84)];
  A_shared[(((int)threadIdx.x) + 512)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 512) / 28) * 224)) + ((((int)threadIdx.x) + 8) % 28)) + 84)];
  A_shared[(((int)threadIdx.x) + 640)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 640) / 28) * 224)) + ((((int)threadIdx.x) + 24) % 28)) + 84)];
  A_shared[(((int)threadIdx.x) + 768)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 768) / 28) * 224)) + ((((int)threadIdx.x) + 12) % 28)) + 84)];
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 28) * 1792) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28)) + 84)];
  if (((int)threadIdx.x) < 96) {
    B_shared[(((int)threadIdx.x) + 128)] = B[(((((((int)blockIdx.x) % 28) * 1792) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28)) + 84)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 3) * 56)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 28)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 1)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 29)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 2)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 30)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 3)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 31)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 4)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 32)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 5)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 33)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 6)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 34)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 7)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 35)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 8)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 36)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 9)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 37)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 10)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 38)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 11)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 39)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 12)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 40)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 13)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 41)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 14)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 42)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 15)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 43)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 16)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 44)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 17)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 45)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 18)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 46)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 19)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 47)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 20)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 48)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 21)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 49)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 22)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 50)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 23)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 51)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 24)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 52)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 25)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 53)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 26)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 54)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 27)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 55)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  __syncthreads();
  A_shared[((int)threadIdx.x)] = A[(((((((int)blockIdx.x) / 28) * 7168) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28)) + 112)];
  A_shared[(((int)threadIdx.x) + 128)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28)) + 112)];
  A_shared[(((int)threadIdx.x) + 256)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 256) / 28) * 224)) + ((((int)threadIdx.x) + 4) % 28)) + 112)];
  A_shared[(((int)threadIdx.x) + 384)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 384) / 28) * 224)) + ((((int)threadIdx.x) + 20) % 28)) + 112)];
  A_shared[(((int)threadIdx.x) + 512)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 512) / 28) * 224)) + ((((int)threadIdx.x) + 8) % 28)) + 112)];
  A_shared[(((int)threadIdx.x) + 640)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 640) / 28) * 224)) + ((((int)threadIdx.x) + 24) % 28)) + 112)];
  A_shared[(((int)threadIdx.x) + 768)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 768) / 28) * 224)) + ((((int)threadIdx.x) + 12) % 28)) + 112)];
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 28) * 1792) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28)) + 112)];
  if (((int)threadIdx.x) < 96) {
    B_shared[(((int)threadIdx.x) + 128)] = B[(((((((int)blockIdx.x) % 28) * 1792) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28)) + 112)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 3) * 56)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 28)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 1)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 29)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 2)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 30)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 3)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 31)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 4)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 32)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 5)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 33)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 6)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 34)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 7)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 35)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 8)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 36)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 9)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 37)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 10)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 38)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 11)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 39)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 12)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 40)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 13)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 41)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 14)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 42)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 15)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 43)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 16)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 44)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 17)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 45)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 18)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 46)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 19)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 47)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 20)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 48)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 21)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 49)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 22)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 50)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 23)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 51)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 24)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 52)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 25)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 53)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 26)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 54)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 27)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 55)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  __syncthreads();
  A_shared[((int)threadIdx.x)] = A[(((((((int)blockIdx.x) / 28) * 7168) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28)) + 140)];
  A_shared[(((int)threadIdx.x) + 128)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28)) + 140)];
  A_shared[(((int)threadIdx.x) + 256)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 256) / 28) * 224)) + ((((int)threadIdx.x) + 4) % 28)) + 140)];
  A_shared[(((int)threadIdx.x) + 384)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 384) / 28) * 224)) + ((((int)threadIdx.x) + 20) % 28)) + 140)];
  A_shared[(((int)threadIdx.x) + 512)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 512) / 28) * 224)) + ((((int)threadIdx.x) + 8) % 28)) + 140)];
  A_shared[(((int)threadIdx.x) + 640)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 640) / 28) * 224)) + ((((int)threadIdx.x) + 24) % 28)) + 140)];
  A_shared[(((int)threadIdx.x) + 768)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 768) / 28) * 224)) + ((((int)threadIdx.x) + 12) % 28)) + 140)];
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 28) * 1792) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28)) + 140)];
  if (((int)threadIdx.x) < 96) {
    B_shared[(((int)threadIdx.x) + 128)] = B[(((((((int)blockIdx.x) % 28) * 1792) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28)) + 140)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 3) * 56)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 28)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 1)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 29)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 2)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 30)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 3)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 31)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 4)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 32)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 5)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 33)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 6)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 34)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 7)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 35)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 8)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 36)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 9)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 37)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 10)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 38)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 11)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 39)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 12)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 40)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 13)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 41)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 14)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 42)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 15)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 43)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 16)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 44)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 17)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 45)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 18)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 46)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 19)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 47)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 20)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 48)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 21)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 49)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 22)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 50)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 23)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 51)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 24)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 52)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 25)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 53)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 26)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 54)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 27)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 55)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  __syncthreads();
  A_shared[((int)threadIdx.x)] = A[(((((((int)blockIdx.x) / 28) * 7168) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28)) + 168)];
  A_shared[(((int)threadIdx.x) + 128)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28)) + 168)];
  A_shared[(((int)threadIdx.x) + 256)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 256) / 28) * 224)) + ((((int)threadIdx.x) + 4) % 28)) + 168)];
  A_shared[(((int)threadIdx.x) + 384)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 384) / 28) * 224)) + ((((int)threadIdx.x) + 20) % 28)) + 168)];
  A_shared[(((int)threadIdx.x) + 512)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 512) / 28) * 224)) + ((((int)threadIdx.x) + 8) % 28)) + 168)];
  A_shared[(((int)threadIdx.x) + 640)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 640) / 28) * 224)) + ((((int)threadIdx.x) + 24) % 28)) + 168)];
  A_shared[(((int)threadIdx.x) + 768)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 768) / 28) * 224)) + ((((int)threadIdx.x) + 12) % 28)) + 168)];
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 28) * 1792) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28)) + 168)];
  if (((int)threadIdx.x) < 96) {
    B_shared[(((int)threadIdx.x) + 128)] = B[(((((((int)blockIdx.x) % 28) * 1792) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28)) + 168)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 3) * 56)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 28)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 1)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 29)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 2)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 30)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 3)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 31)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 4)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 32)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 5)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 33)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 6)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 34)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 7)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 35)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 8)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 36)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 9)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 37)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 10)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 38)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 11)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 39)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 12)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 40)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 13)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 41)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 14)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 42)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 15)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 43)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 16)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 44)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 17)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 45)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 18)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 46)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 19)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 47)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 20)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 48)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 21)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 49)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 22)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 50)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 23)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 51)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 24)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 52)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 25)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 53)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 26)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 54)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 27)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 55)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  __syncthreads();
  A_shared[((int)threadIdx.x)] = A[(((((((int)blockIdx.x) / 28) * 7168) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28)) + 196)];
  A_shared[(((int)threadIdx.x) + 128)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28)) + 196)];
  A_shared[(((int)threadIdx.x) + 256)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 256) / 28) * 224)) + ((((int)threadIdx.x) + 4) % 28)) + 196)];
  A_shared[(((int)threadIdx.x) + 384)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 384) / 28) * 224)) + ((((int)threadIdx.x) + 20) % 28)) + 196)];
  A_shared[(((int)threadIdx.x) + 512)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 512) / 28) * 224)) + ((((int)threadIdx.x) + 8) % 28)) + 196)];
  A_shared[(((int)threadIdx.x) + 640)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 640) / 28) * 224)) + ((((int)threadIdx.x) + 24) % 28)) + 196)];
  A_shared[(((int)threadIdx.x) + 768)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 768) / 28) * 224)) + ((((int)threadIdx.x) + 12) % 28)) + 196)];
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 28) * 1792) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28)) + 196)];
  if (((int)threadIdx.x) < 96) {
    B_shared[(((int)threadIdx.x) + 128)] = B[(((((((int)blockIdx.x) % 28) * 1792) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28)) + 196)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 3) * 56)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 28)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 1)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 29)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 2)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 30)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 3)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 31)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 4)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 32)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 5)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 33)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 6)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 34)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 7)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 35)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 8)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 36)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 9)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 37)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 10)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 38)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 11)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 39)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 12)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 40)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 13)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 41)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 14)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 42)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 15)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 43)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 16)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 44)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 17)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 45)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 18)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 46)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 19)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 47)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 20)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 48)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 21)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 49)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 22)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 50)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 23)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 51)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 24)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 52)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 25)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 53)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 26)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 54)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 27)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 55)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  for (int i_inner = 0; i_inner < 2; ++i_inner) {
    out[((((((((int)blockIdx.x) / 28) * 7168) + ((((int)threadIdx.x) >> 3) * 448)) + (i_inner * 224)) + ((((int)blockIdx.x) % 28) * 8)) + (((int)threadIdx.x) & 7))] = (transposed_gemm[i_inner] + C[((((((((int)blockIdx.x) / 28) * 7168) + ((((int)threadIdx.x) >> 3) * 448)) + (i_inner * 224)) + ((((int)blockIdx.x) % 28) * 8)) + (((int)threadIdx.x) & 7))]);
  }
}

