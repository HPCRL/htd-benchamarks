
#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(80) default_function_kernel(float* __restrict__ A, float* __restrict__ B, float* __restrict__ C, float* __restrict__ out) {
  float transposed_gemm[2];
  __shared__ float A_shared[2400];
  __shared__ float B_shared[960];
  transposed_gemm[0] = 0.000000e+00f;
  transposed_gemm[1] = 0.000000e+00f;
  *(float2*)(A_shared + (((int)threadIdx.x) * 2)) = *(float2*)(A + (((((int)blockIdx.x) / 15) * 2400) + (((int)threadIdx.x) * 2)));
  *(float2*)(A_shared + ((((int)threadIdx.x) * 2) + 160)) = *(float2*)(A + ((((((int)blockIdx.x) / 15) * 2400) + (((int)threadIdx.x) * 2)) + 160));
  *(float2*)(A_shared + ((((int)threadIdx.x) * 2) + 320)) = *(float2*)(A + ((((((int)blockIdx.x) / 15) * 2400) + (((int)threadIdx.x) * 2)) + 320));
  *(float2*)(A_shared + ((((int)threadIdx.x) * 2) + 480)) = *(float2*)(A + ((((((int)blockIdx.x) / 15) * 2400) + (((int)threadIdx.x) * 2)) + 480));
  *(float2*)(A_shared + ((((int)threadIdx.x) * 2) + 640)) = *(float2*)(A + ((((((int)blockIdx.x) / 15) * 2400) + (((int)threadIdx.x) * 2)) + 640));
  *(float2*)(A_shared + ((((int)threadIdx.x) * 2) + 800)) = *(float2*)(A + ((((((int)blockIdx.x) / 15) * 2400) + (((int)threadIdx.x) * 2)) + 800));
  *(float2*)(A_shared + ((((int)threadIdx.x) * 2) + 960)) = *(float2*)(A + ((((((int)blockIdx.x) / 15) * 2400) + (((int)threadIdx.x) * 2)) + 960));
  *(float2*)(A_shared + ((((int)threadIdx.x) * 2) + 1120)) = *(float2*)(A + ((((((int)blockIdx.x) / 15) * 2400) + (((int)threadIdx.x) * 2)) + 1120));
  *(float2*)(A_shared + ((((int)threadIdx.x) * 2) + 1280)) = *(float2*)(A + ((((((int)blockIdx.x) / 15) * 2400) + (((int)threadIdx.x) * 2)) + 1280));
  *(float2*)(A_shared + ((((int)threadIdx.x) * 2) + 1440)) = *(float2*)(A + ((((((int)blockIdx.x) / 15) * 2400) + (((int)threadIdx.x) * 2)) + 1440));
  *(float2*)(A_shared + ((((int)threadIdx.x) * 2) + 1600)) = *(float2*)(A + ((((((int)blockIdx.x) / 15) * 2400) + (((int)threadIdx.x) * 2)) + 1600));
  *(float2*)(A_shared + ((((int)threadIdx.x) * 2) + 1760)) = *(float2*)(A + ((((((int)blockIdx.x) / 15) * 2400) + (((int)threadIdx.x) * 2)) + 1760));
  *(float2*)(A_shared + ((((int)threadIdx.x) * 2) + 1920)) = *(float2*)(A + ((((((int)blockIdx.x) / 15) * 2400) + (((int)threadIdx.x) * 2)) + 1920));
  *(float2*)(A_shared + ((((int)threadIdx.x) * 2) + 2080)) = *(float2*)(A + ((((((int)blockIdx.x) / 15) * 2400) + (((int)threadIdx.x) * 2)) + 2080));
  *(float2*)(A_shared + ((((int)threadIdx.x) * 2) + 2240)) = *(float2*)(A + ((((((int)blockIdx.x) / 15) * 2400) + (((int)threadIdx.x) * 2)) + 2240));
  B_shared[((int)threadIdx.x)] = B[(((((int)blockIdx.x) % 15) * 960) + ((int)threadIdx.x))];
  B_shared[(((int)threadIdx.x) + 80)] = B[((((((int)blockIdx.x) % 15) * 960) + ((int)threadIdx.x)) + 80)];
  B_shared[(((int)threadIdx.x) + 160)] = B[((((((int)blockIdx.x) % 15) * 960) + ((int)threadIdx.x)) + 160)];
  B_shared[(((int)threadIdx.x) + 240)] = B[((((((int)blockIdx.x) % 15) * 960) + ((int)threadIdx.x)) + 240)];
  B_shared[(((int)threadIdx.x) + 320)] = B[((((((int)blockIdx.x) % 15) * 960) + ((int)threadIdx.x)) + 320)];
  B_shared[(((int)threadIdx.x) + 400)] = B[((((((int)blockIdx.x) % 15) * 960) + ((int)threadIdx.x)) + 400)];
  B_shared[(((int)threadIdx.x) + 480)] = B[((((((int)blockIdx.x) % 15) * 960) + ((int)threadIdx.x)) + 480)];
  B_shared[(((int)threadIdx.x) + 560)] = B[((((((int)blockIdx.x) % 15) * 960) + ((int)threadIdx.x)) + 560)];
  B_shared[(((int)threadIdx.x) + 640)] = B[((((((int)blockIdx.x) % 15) * 960) + ((int)threadIdx.x)) + 640)];
  B_shared[(((int)threadIdx.x) + 720)] = B[((((((int)blockIdx.x) % 15) * 960) + ((int)threadIdx.x)) + 720)];
  B_shared[(((int)threadIdx.x) + 800)] = B[((((((int)blockIdx.x) % 15) * 960) + ((int)threadIdx.x)) + 800)];
  B_shared[(((int)threadIdx.x) + 880)] = B[((((((int)blockIdx.x) % 15) * 960) + ((int)threadIdx.x)) + 880)];
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 3) * 120)] * B_shared[((((int)threadIdx.x) & 7) * 120)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1200)] * B_shared[((((int)threadIdx.x) & 7) * 120)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 1)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1201)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 2)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 2)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1202)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 3)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 3)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1203)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 4)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 4)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1204)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 5)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 5)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1205)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 6)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 6)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1206)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 7)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 7)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1207)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 8)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 8)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1208)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 9)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 9)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1209)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 10)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 10)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1210)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 11)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 11)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1211)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 12)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 12)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1212)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 13)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 13)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1213)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 14)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 14)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1214)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 15)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 15)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1215)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 15)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 16)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 16)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1216)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 17)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 17)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1217)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 17)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 18)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 18)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1218)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 18)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 19)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 19)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1219)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 19)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 20)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 20)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1220)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 20)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 21)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 21)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1221)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 21)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 22)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 22)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1222)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 22)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 23)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 23)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1223)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 23)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 24)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 24)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1224)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 24)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 25)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 25)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1225)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 25)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 26)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 26)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1226)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 26)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 27)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 27)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1227)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 27)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 28)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 28)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1228)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 28)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 29)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 29)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1229)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 29)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 30)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 30)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1230)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 30)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 31)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 31)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1231)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 31)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 32)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 32)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1232)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 32)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 33)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 33)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1233)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 33)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 34)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 34)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1234)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 34)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 35)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 35)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1235)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 35)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 36)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 36)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1236)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 36)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 37)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 37)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1237)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 37)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 38)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 38)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1238)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 38)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 39)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 39)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1239)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 39)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 40)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 40)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1240)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 40)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 41)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 41)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1241)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 41)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 42)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 42)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1242)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 42)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 43)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 43)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1243)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 43)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 44)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 44)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1244)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 44)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 45)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 45)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1245)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 45)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 46)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 46)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1246)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 46)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 47)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 47)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1247)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 47)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 48)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 48)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1248)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 48)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 49)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 49)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1249)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 49)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 50)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 50)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1250)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 50)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 51)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 51)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1251)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 51)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 52)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 52)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1252)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 52)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 53)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 53)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1253)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 53)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 54)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 54)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1254)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 54)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 55)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 55)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1255)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 55)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 56)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 56)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1256)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 56)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 57)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 57)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1257)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 57)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 58)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 58)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1258)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 58)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 59)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 59)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1259)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 59)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 60)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 60)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1260)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 60)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 61)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 61)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1261)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 61)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 62)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 62)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1262)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 62)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 63)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 63)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1263)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 63)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 64)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 64)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1264)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 64)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 65)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 65)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1265)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 65)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 66)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 66)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1266)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 66)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 67)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 67)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1267)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 67)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 68)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 68)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1268)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 68)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 69)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 69)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1269)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 69)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 70)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 70)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1270)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 70)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 71)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 71)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1271)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 71)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 72)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 72)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1272)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 72)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 73)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 73)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1273)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 73)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 74)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 74)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1274)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 74)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 75)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 75)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1275)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 75)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 76)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 76)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1276)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 76)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 77)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 77)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1277)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 77)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 78)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 78)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1278)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 78)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 79)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 79)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1279)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 79)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 80)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 80)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1280)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 80)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 81)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 81)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1281)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 81)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 82)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 82)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1282)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 82)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 83)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 83)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1283)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 83)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 84)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 84)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1284)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 84)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 85)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 85)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1285)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 85)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 86)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 86)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1286)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 86)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 87)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 87)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1287)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 87)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 88)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 88)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1288)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 88)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 89)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 89)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1289)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 89)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 90)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 90)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1290)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 90)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 91)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 91)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1291)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 91)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 92)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 92)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1292)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 92)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 93)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 93)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1293)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 93)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 94)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 94)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1294)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 94)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 95)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 95)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1295)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 95)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 96)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 96)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1296)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 96)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 97)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 97)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1297)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 97)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 98)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 98)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1298)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 98)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 99)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 99)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1299)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 99)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 100)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 100)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1300)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 100)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 101)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 101)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1301)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 101)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 102)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 102)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1302)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 102)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 103)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 103)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1303)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 103)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 104)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 104)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1304)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 104)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 105)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 105)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1305)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 105)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 106)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 106)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1306)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 106)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 107)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 107)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1307)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 107)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 108)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 108)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1308)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 108)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 109)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 109)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1309)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 109)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 110)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 110)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1310)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 110)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 111)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 111)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1311)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 111)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 112)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 112)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1312)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 112)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 113)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 113)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1313)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 113)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 114)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 114)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1314)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 114)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 115)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 115)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1315)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 115)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 116)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 116)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1316)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 116)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 117)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 117)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1317)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 117)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 118)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 118)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1318)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 118)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 119)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 119)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 120) + 1319)] * B_shared[(((((int)threadIdx.x) & 7) * 120) + 119)]));
  out[(((((((int)blockIdx.x) / 15) * 2400) + ((((int)threadIdx.x) >> 3) * 120)) + ((((int)blockIdx.x) % 15) * 8)) + (((int)threadIdx.x) & 7))] = (transposed_gemm[0] + C[(((((((int)blockIdx.x) / 15) * 2400) + ((((int)threadIdx.x) >> 3) * 120)) + ((((int)blockIdx.x) % 15) * 8)) + (((int)threadIdx.x) & 7))]);
  out[((((((((int)blockIdx.x) / 15) * 2400) + ((((int)threadIdx.x) >> 3) * 120)) + ((((int)blockIdx.x) % 15) * 8)) + (((int)threadIdx.x) & 7)) + 1200)] = (transposed_gemm[1] + C[((((((((int)blockIdx.x) / 15) * 2400) + ((((int)threadIdx.x) >> 3) * 120)) + ((((int)blockIdx.x) % 15) * 8)) + (((int)threadIdx.x) & 7)) + 1200)]);
}

