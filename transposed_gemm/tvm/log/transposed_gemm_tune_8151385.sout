----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Generate Sketches		#s: 1
Sample Initial Population	#s: 134	fail_ct: 1914	Time elapsed: 3.01
GA Iter: 0	Max score: 0.9982	Min score: 0.1028	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 1.0000	Min score: 0.9813	#Pop: 128	#M+: 1389	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.05
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.17 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 114	fail_ct: 1934	Time elapsed: 2.63
GA Iter: 0	Max score: 0.9917	Min score: 0.0026	#Pop: 114	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9994	Min score: 0.9800	#Pop: 128	#M+: 1383	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 31.99
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.54 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 133	fail_ct: 1915	Time elapsed: 2.77
GA Iter: 0	Max score: 0.5609	Min score: 0.0573	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 1.0744	Min score: 0.9277	#Pop: 128	#M+: 1398	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 31.47
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.64 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 130	fail_ct: 1918	Time elapsed: 2.66
GA Iter: 0	Max score: 0.6290	Min score: 0.0113	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9719	Min score: 0.8630	#Pop: 128	#M+: 1397	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 30.71
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.57 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 133	fail_ct: 1915	Time elapsed: 2.56
GA Iter: 0	Max score: 0.7066	Min score: 0.0411	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 1.0023	Min score: 0.8829	#Pop: 128	#M+: 1404	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 30.98
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.69 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 125	fail_ct: 1923	Time elapsed: 2.65
GA Iter: 0	Max score: 0.6421	Min score: 0.0076	#Pop: 125	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9982	Min score: 0.9039	#Pop: 128	#M+: 1384	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 31.19
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.61 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 143	fail_ct: 1905	Time elapsed: 2.63
GA Iter: 0	Max score: 0.3534	Min score: 0.0447	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9833	Min score: 0.9040	#Pop: 128	#M+: 1393	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 31.68
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.03 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 139	fail_ct: 1909	Time elapsed: 2.61
GA Iter: 0	Max score: 0.6753	Min score: 0.0386	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9644	Min score: 0.9118	#Pop: 128	#M+: 1393	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 31.74
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.09 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 123	fail_ct: 1925	Time elapsed: 2.60
GA Iter: 0	Max score: 0.4736	Min score: -0.0112	#Pop: 123	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9723	Min score: 0.9179	#Pop: 128	#M+: 1379	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 31.74
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.65 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 113	fail_ct: 1935	Time elapsed: 2.58
GA Iter: 0	Max score: 0.4219	Min score: -0.0500	#Pop: 113	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9891	Min score: 0.9263	#Pop: 128	#M+: 1387	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 31.79
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.15 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 144	fail_ct: 1904	Time elapsed: 2.67
GA Iter: 0	Max score: 0.8002	Min score: 0.0159	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9945	Min score: 0.9278	#Pop: 128	#M+: 1396	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 31.93
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 3.62 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 145	fail_ct: 1903	Time elapsed: 2.69
GA Iter: 0	Max score: 0.4844	Min score: 0.0427	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9654	Min score: 0.9300	#Pop: 128	#M+: 1393	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.04
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.46 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 131	fail_ct: 1917	Time elapsed: 2.66
GA Iter: 0	Max score: 0.3977	Min score: 0.0045	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9820	Min score: 0.9235	#Pop: 128	#M+: 1394	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 31.97
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.44 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 128	fail_ct: 1920	Time elapsed: 2.67
GA Iter: 0	Max score: 0.4841	Min score: -0.0265	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9747	Min score: 0.9152	#Pop: 128	#M+: 1394	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.02
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.53 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 127	fail_ct: 1921	Time elapsed: 2.57
GA Iter: 0	Max score: 0.4299	Min score: -0.0534	#Pop: 127	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9610	Min score: 0.9123	#Pop: 128	#M+: 1380	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.24
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.38 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 120	fail_ct: 1928	Time elapsed: 2.73
GA Iter: 0	Max score: 0.6458	Min score: -0.0036	#Pop: 120	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9597	Min score: 0.9048	#Pop: 128	#M+: 1406	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 31.91
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Done ]
----------------------------------------------------------------------
arc=sm_80
Computational DAG:
A = PLACEHOLDER [32, 1024]
B = PLACEHOLDER [1024, 1024]
transposed_gemm(i, j) += (A[i, k]*B[j, k])
C = PLACEHOLDER [32, 1024]
out(i, j) = (transposed_gemm[i, j] + C[i, j])

Lowered TIR:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((32, 1024), "float32"), B: T.Buffer((1024, 1024), "float32"), C: T.Buffer((32, 1024), "float32"), out: T.Buffer((32, 1024), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "global_symbol": "main", "tir.noalias": T.bool(True)})
        blockIdx_x = T.launch_thread("blockIdx.x", 512)
        transposed_gemm = T.allocate([2], "float32", "local")
        A_shared = T.allocate([32], "float32", "shared")
        B_shared = T.allocate([128], "float32", "shared")
        threadIdx_x = T.launch_thread("threadIdx.x", 32)
        transposed_gemm_1 = T.Buffer((2,), data=transposed_gemm, scope="local", align=8)
        transposed_gemm_1[0] = T.float32(0)
        transposed_gemm_1[1] = T.float32(0)
        for k_outer_outer in range(128):
            cse_var_1: T.int32 = k_outer_outer * 8
            A_shared_1 = T.Buffer((32,), data=A_shared, scope="shared")
            with T.launch_thread("threadIdx.x", 32) as threadIdx_x_1:
                A_1 = T.Buffer((32768,), data=A.data)
                A_shared_1[threadIdx_x_1] = A_1[blockIdx_x // 64 * 4096 + threadIdx_x_1 // 8 * 1024 + cse_var_1 + threadIdx_x_1 % 8]
            threadIdx_x_1 = T.env_thread("threadIdx.x")
            B_shared_1 = T.Buffer((128,), data=B_shared, scope="shared")
            B_1 = T.Buffer((1048576,), data=B.data)
            with T.launch_thread(threadIdx_x_1, 32):
                B_shared_1[threadIdx_x_1 * 2:threadIdx_x_1 * 2 + 2] = B_1[blockIdx_x % 64 * 16384 + threadIdx_x_1 // 4 * 1024 + cse_var_1 + threadIdx_x_1 % 4 * 2:blockIdx_x % 64 * 16384 + threadIdx_x_1 // 4 * 1024 + cse_var_1 + threadIdx_x_1 % 4 * 2 + 2]
            with T.launch_thread(threadIdx_x_1, 32):
                B_shared_1[threadIdx_x_1 * 2 + 64:threadIdx_x_1 * 2 + 64 + 2] = B_1[blockIdx_x % 64 * 16384 + threadIdx_x_1 // 4 * 1024 + cse_var_1 + threadIdx_x_1 % 4 * 2 + 8192:blockIdx_x % 64 * 16384 + threadIdx_x_1 // 4 * 1024 + cse_var_1 + threadIdx_x_1 % 4 * 2 + 8192 + 2]
            transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 16 * 16] * B_shared_1[threadIdx_x % 16 * 8]
            transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 16 * 16 + 1] * B_shared_1[threadIdx_x % 16 * 8 + 1]
            transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 16 * 16 + 8] * B_shared_1[threadIdx_x % 16 * 8]
            transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 16 * 16 + 9] * B_shared_1[threadIdx_x % 16 * 8 + 1]
            transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 16 * 16 + 2] * B_shared_1[threadIdx_x % 16 * 8 + 2]
            transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 16 * 16 + 3] * B_shared_1[threadIdx_x % 16 * 8 + 3]
            transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 16 * 16 + 10] * B_shared_1[threadIdx_x % 16 * 8 + 2]
            transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 16 * 16 + 11] * B_shared_1[threadIdx_x % 16 * 8 + 3]
            transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 16 * 16 + 4] * B_shared_1[threadIdx_x % 16 * 8 + 4]
            transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 16 * 16 + 5] * B_shared_1[threadIdx_x % 16 * 8 + 5]
            transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 16 * 16 + 12] * B_shared_1[threadIdx_x % 16 * 8 + 4]
            transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 16 * 16 + 13] * B_shared_1[threadIdx_x % 16 * 8 + 5]
            transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 16 * 16 + 6] * B_shared_1[threadIdx_x % 16 * 8 + 6]
            transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 16 * 16 + 7] * B_shared_1[threadIdx_x % 16 * 8 + 7]
            transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 16 * 16 + 14] * B_shared_1[threadIdx_x % 16 * 8 + 6]
            transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 16 * 16 + 15] * B_shared_1[threadIdx_x % 16 * 8 + 7]
        for i_inner in range(2):
            out_1 = T.Buffer((32768,), data=out.data)
            C_1 = T.Buffer((32768,), data=C.data)
            out_1[blockIdx_x // 64 * 4096 + threadIdx_x // 16 * 2048 + i_inner * 1024 + blockIdx_x % 64 * 16 + threadIdx_x % 16] = transposed_gemm_1[i_inner] + C_1[blockIdx_x // 64 * 4096 + threadIdx_x // 16 * 2048 + i_inner * 1024 + blockIdx_x % 64 * 16 + threadIdx_x % 16]
Equivalent python schedule:
transposed_gemm_i, transposed_gemm_j, transposed_gemm_k = tuple(transposed_gemm.op.axis) + tuple(transposed_gemm.op.reduce_axis)
out_i, out_j = tuple(out.op.axis) + tuple(out.op.reduce_axis)
transposed_gemm_i_o_i, transposed_gemm_i_i = s[transposed_gemm].split(transposed_gemm_i, factor=1)
transposed_gemm_i_o_o_i, transposed_gemm_i_o_i = s[transposed_gemm].split(transposed_gemm_i_o_i, factor=2)
transposed_gemm_i_o_o_o_i, transposed_gemm_i_o_o_i = s[transposed_gemm].split(transposed_gemm_i_o_o_i, factor=2)
transposed_gemm_i_o_o_o_o, transposed_gemm_i_o_o_o_i = s[transposed_gemm].split(transposed_gemm_i_o_o_o_i, factor=1)
transposed_gemm_j_o_i, transposed_gemm_j_i = s[transposed_gemm].split(transposed_gemm_j, factor=1)
transposed_gemm_j_o_o_i, transposed_gemm_j_o_i = s[transposed_gemm].split(transposed_gemm_j_o_i, factor=1)
transposed_gemm_j_o_o_o_i, transposed_gemm_j_o_o_i = s[transposed_gemm].split(transposed_gemm_j_o_o_i, factor=16)
transposed_gemm_j_o_o_o_o, transposed_gemm_j_o_o_o_i = s[transposed_gemm].split(transposed_gemm_j_o_o_o_i, factor=1)
transposed_gemm_k_o_i, transposed_gemm_k_i = s[transposed_gemm].split(transposed_gemm_k, factor=2)
transposed_gemm_k_o_o, transposed_gemm_k_o_i = s[transposed_gemm].split(transposed_gemm_k_o_i, factor=4)
s[transposed_gemm].reorder(transposed_gemm_i_o_o_o_o, transposed_gemm_j_o_o_o_o, transposed_gemm_i_o_o_o_i, transposed_gemm_j_o_o_o_i, transposed_gemm_i_o_o_i, transposed_gemm_j_o_o_i, transposed_gemm_k_o_o, transposed_gemm_k_o_i, transposed_gemm_i_o_i, transposed_gemm_j_o_i, transposed_gemm_k_i, transposed_gemm_i_i, transposed_gemm_j_i)
out_i_o_i, out_i_i = s[out].split(out_i, factor=2)
out_i_o_o_i, out_i_o_i = s[out].split(out_i_o_i, factor=2)
out_i_o_o_o, out_i_o_o_i = s[out].split(out_i_o_o_i, factor=1)
out_j_o_i, out_j_i = s[out].split(out_j, factor=1)
out_j_o_o_i, out_j_o_i = s[out].split(out_j_o_i, factor=16)
out_j_o_o_o, out_j_o_o_i = s[out].split(out_j_o_o_i, factor=1)
s[out].reorder(out_i_o_o_o, out_j_o_o_o, out_i_o_o_i, out_j_o_o_i, out_i_o_i, out_j_o_i, out_i_i, out_j_i)
s[transposed_gemm].compute_at(s[out], out_j_o_i)
B_shared = s.cache_read(B, "shared", [transposed_gemm])
B_shared_ax0, B_shared_ax1 = tuple(B_shared.op.axis)
s[B_shared].compute_at(s[transposed_gemm], transposed_gemm_k_o_o)
A_shared = s.cache_read(A, "shared", [transposed_gemm])
A_shared_ax0, A_shared_ax1 = tuple(A_shared.op.axis)
s[A_shared].compute_at(s[transposed_gemm], transposed_gemm_k_o_o)
out_i_o_o_o_j_o_o_o_fused = s[out].fuse(out_i_o_o_o, out_j_o_o_o)
s[out].bind(out_i_o_o_o_j_o_o_o_fused, te.thread_axis("blockIdx.x"))
out_i_o_o_i_j_o_o_i_fused = s[out].fuse(out_i_o_o_i, out_j_o_o_i)
s[out].bind(out_i_o_o_i_j_o_o_i_fused, te.thread_axis("vthread"))
out_i_o_i_j_o_i_fused = s[out].fuse(out_i_o_i, out_j_o_i)
s[out].bind(out_i_o_i_j_o_i_fused, te.thread_axis("threadIdx.x"))
B_shared_ax0_ax1_fused = s[B_shared].fuse(B_shared_ax0, B_shared_ax1)
B_shared_ax0_ax1_fused_o, B_shared_ax0_ax1_fused_i = s[B_shared].split(B_shared_ax0_ax1_fused, factor=2)
s[B_shared].vectorize(B_shared_ax0_ax1_fused_i)
B_shared_ax0_ax1_fused_o_o, B_shared_ax0_ax1_fused_o_i = s[B_shared].split(B_shared_ax0_ax1_fused_o, factor=32)
s[B_shared].bind(B_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
A_shared_ax0_ax1_fused = s[A_shared].fuse(A_shared_ax0, A_shared_ax1)
A_shared_ax0_ax1_fused_o, A_shared_ax0_ax1_fused_i = s[A_shared].split(A_shared_ax0_ax1_fused, factor=1)
s[A_shared].vectorize(A_shared_ax0_ax1_fused_i)
A_shared_ax0_ax1_fused_o_o, A_shared_ax0_ax1_fused_o_i = s[A_shared].split(A_shared_ax0_ax1_fused_o, factor=32)
s[A_shared].bind(A_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
s[transposed_gemm].pragma(transposed_gemm_i_o_o_o_o, "auto_unroll_max_step", 512)
s[transposed_gemm].pragma(transposed_gemm_i_o_o_o_o, "unroll_explicit", True)

Equivalent CUDA code:

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(32) default_function_kernel(float* __restrict__ A, float* __restrict__ B, float* __restrict__ C, float* __restrict__ out) {
  float transposed_gemm[2];
  __shared__ float A_shared[32];
  __shared__ float B_shared[128];
  transposed_gemm[0] = 0.000000e+00f;
  transposed_gemm[1] = 0.000000e+00f;
  for (int k_outer_outer = 0; k_outer_outer < 128; ++k_outer_outer) {
    __syncthreads();
    A_shared[((int)threadIdx.x)] = A[(((((((int)blockIdx.x) >> 6) * 4096) + ((((int)threadIdx.x) >> 3) * 1024)) + (k_outer_outer * 8)) + (((int)threadIdx.x) & 7))];
    *(float2*)(B_shared + (((int)threadIdx.x) * 2)) = *(float2*)(B + (((((((int)blockIdx.x) & 63) * 16384) + ((((int)threadIdx.x) >> 2) * 1024)) + (k_outer_outer * 8)) + ((((int)threadIdx.x) & 3) * 2)));
    *(float2*)(B_shared + ((((int)threadIdx.x) * 2) + 64)) = *(float2*)(B + ((((((((int)blockIdx.x) & 63) * 16384) + ((((int)threadIdx.x) >> 2) * 1024)) + (k_outer_outer * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 8192));
    __syncthreads();
    transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 4) * 16)] * B_shared[((((int)threadIdx.x) & 15) * 8)]));
    transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 4) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 15) * 8) + 1)]));
    transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 4) * 16) + 8)] * B_shared[((((int)threadIdx.x) & 15) * 8)]));
    transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 4) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 15) * 8) + 1)]));
    transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 4) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 15) * 8) + 2)]));
    transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 4) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 15) * 8) + 3)]));
    transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 4) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 15) * 8) + 2)]));
    transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 4) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 15) * 8) + 3)]));
    transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 4) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 15) * 8) + 4)]));
    transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 4) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 15) * 8) + 5)]));
    transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 4) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 15) * 8) + 4)]));
    transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 4) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 15) * 8) + 5)]));
    transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 4) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 15) * 8) + 6)]));
    transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 4) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 15) * 8) + 7)]));
    transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 4) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 15) * 8) + 6)]));
    transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 4) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 15) * 8) + 7)]));
  }
  for (int i_inner = 0; i_inner < 2; ++i_inner) {
    out[((((((((int)blockIdx.x) >> 6) * 4096) + ((((int)threadIdx.x) >> 4) * 2048)) + (i_inner * 1024)) + ((((int)blockIdx.x) & 63) * 16)) + (((int)threadIdx.x) & 15))] = (transposed_gemm[i_inner] + C[((((((((int)blockIdx.x) >> 6) * 4096) + ((((int)threadIdx.x) >> 4) * 2048)) + (i_inner * 1024)) + ((((int)blockIdx.x) & 63) * 16)) + (((int)threadIdx.x) & 15))]);
  }
}


