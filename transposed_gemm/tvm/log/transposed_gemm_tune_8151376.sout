----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Generate Sketches		#s: 1
Sample Initial Population	#s: 167	fail_ct: 1881	Time elapsed: 4.18
GA Iter: 0	Max score: 0.9958	Min score: 0.2414	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 1.0000	Min score: 0.9820	#Pop: 128	#M+: 1392	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 33.09
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 0.40 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 159	fail_ct: 1889	Time elapsed: 2.35
GA Iter: 0	Max score: 0.9965	Min score: 0.2059	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9997	Min score: 0.9817	#Pop: 128	#M+: 1394	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 33.31
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 0.64 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 164	fail_ct: 1884	Time elapsed: 2.40
GA Iter: 0	Max score: 1.0266	Min score: 0.2333	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 1.0266	Min score: 1.0266	#Pop: 128	#M+: 1378	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 33.10
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.09 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 168	fail_ct: 1880	Time elapsed: 2.33
GA Iter: 0	Max score: 0.9259	Min score: 0.1823	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9885	Min score: 0.9129	#Pop: 128	#M+: 1397	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 34.02
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.58 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 166	fail_ct: 1882	Time elapsed: 2.29
GA Iter: 0	Max score: 0.8453	Min score: 0.1058	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 1.0031	Min score: 0.8801	#Pop: 128	#M+: 1388	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 33.94
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.90 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 162	fail_ct: 1886	Time elapsed: 2.26
GA Iter: 0	Max score: 0.8365	Min score: 0.0847	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 1.0259	Min score: 0.8808	#Pop: 128	#M+: 1397	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.99
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.83 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 166	fail_ct: 1882	Time elapsed: 2.23
GA Iter: 0	Max score: 0.8338	Min score: 0.0462	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9890	Min score: 0.8834	#Pop: 128	#M+: 1399	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.67
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.86 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 173	fail_ct: 1875	Time elapsed: 2.24
GA Iter: 0	Max score: 0.6698	Min score: 0.0851	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9752	Min score: 0.8731	#Pop: 128	#M+: 1389	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.55
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.95 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 177	fail_ct: 1871	Time elapsed: 2.37
GA Iter: 0	Max score: 0.6750	Min score: 0.0836	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9543	Min score: 0.8694	#Pop: 128	#M+: 1393	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.42
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.13 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 179	fail_ct: 1869	Time elapsed: 2.41
GA Iter: 0	Max score: 0.6966	Min score: 0.0726	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9695	Min score: 0.8641	#Pop: 128	#M+: 1395	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.39
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.97 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 181	fail_ct: 1867	Time elapsed: 2.34
GA Iter: 0	Max score: 0.6014	Min score: 0.0709	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9717	Min score: 0.8527	#Pop: 128	#M+: 1393	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.21
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.20 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 184	fail_ct: 1864	Time elapsed: 2.41
GA Iter: 0	Max score: 0.5575	Min score: 0.0884	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9670	Min score: 0.7675	#Pop: 128	#M+: 1387	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.06
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.43 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 169	fail_ct: 1879	Time elapsed: 2.25
GA Iter: 0	Max score: 0.7392	Min score: 0.0748	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9576	Min score: 0.7830	#Pop: 128	#M+: 1388	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.04
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.42 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 178	fail_ct: 1870	Time elapsed: 2.43
GA Iter: 0	Max score: 0.7948	Min score: 0.0845	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9636	Min score: 0.7858	#Pop: 128	#M+: 1393	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 31.98
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.76 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 164	fail_ct: 1884	Time elapsed: 2.33
GA Iter: 0	Max score: 0.6340	Min score: 0.0517	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9638	Min score: 0.8075	#Pop: 128	#M+: 1384	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 31.93
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.63 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 163	fail_ct: 1885	Time elapsed: 2.33
GA Iter: 0	Max score: 0.6542	Min score: 0.0250	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9611	Min score: 0.8200	#Pop: 128	#M+: 1394	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.02
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Done ]
----------------------------------------------------------------------
arc=sm_80
Computational DAG:
A = PLACEHOLDER [224, 224]
B = PLACEHOLDER [224, 224]
transposed_gemm(i, j) += (A[i, k]*B[j, k])
C = PLACEHOLDER [224, 224]
out(i, j) = (transposed_gemm[i, j] + C[i, j])

Lowered TIR:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((224, 224), "float32"), B: T.Buffer((224, 224), "float32"), C: T.Buffer((224, 224), "float32"), out: T.Buffer((224, 224), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "global_symbol": "main", "tir.noalias": T.bool(True)})
        blockIdx_x = T.launch_thread("blockIdx.x", 196)
        transposed_gemm = T.allocate([2], "float32", "local")
        A_shared = T.allocate([896], "float32", "shared")
        B_shared = T.allocate([224], "float32", "shared")
        threadIdx_x = T.launch_thread("threadIdx.x", 128)
        transposed_gemm_1 = T.Buffer((2,), data=transposed_gemm, scope="local", align=8)
        transposed_gemm_1[0] = T.float32(0)
        transposed_gemm_1[1] = T.float32(0)
        threadIdx_x_1 = T.env_thread("threadIdx.x")
        A_shared_1 = T.Buffer((896,), data=A_shared, scope="shared")
        A_1 = T.Buffer((50176,), data=A.data)
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1] = A_1[blockIdx_x // 28 * 7168 + threadIdx_x_1 // 28 * 224 + threadIdx_x_1 % 28]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 128] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 128) // 28 * 224 + (threadIdx_x_1 + 16) % 28]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 256] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 256) // 28 * 224 + (threadIdx_x_1 + 4) % 28]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 384] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 384) // 28 * 224 + (threadIdx_x_1 + 20) % 28]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 512] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 512) // 28 * 224 + (threadIdx_x_1 + 8) % 28]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 640] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 640) // 28 * 224 + (threadIdx_x_1 + 24) % 28]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 768] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 768) // 28 * 224 + (threadIdx_x_1 + 12) % 28]
        threadIdx_x_2 = T.env_thread("threadIdx.x")
        B_shared_1 = T.Buffer((224,), data=B_shared, scope="shared")
        B_1 = T.Buffer((50176,), data=B.data)
        with T.launch_thread(threadIdx_x_2, 128):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 28 * 1792 + threadIdx_x_2 // 28 * 224 + threadIdx_x_2 % 28]
        with T.launch_thread(threadIdx_x_2, 128):
            if T.likely(threadIdx_x_2 < 96):
                B_shared_1[threadIdx_x_2 + 128] = B_1[blockIdx_x % 28 * 1792 + (threadIdx_x_2 + 128) // 28 * 224 + (threadIdx_x_2 + 16) % 28]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56] * B_shared_1[threadIdx_x % 8 * 28]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 28] * B_shared_1[threadIdx_x % 8 * 28]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 1] * B_shared_1[threadIdx_x % 8 * 28 + 1]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 29] * B_shared_1[threadIdx_x % 8 * 28 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 2] * B_shared_1[threadIdx_x % 8 * 28 + 2]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 30] * B_shared_1[threadIdx_x % 8 * 28 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 3] * B_shared_1[threadIdx_x % 8 * 28 + 3]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 31] * B_shared_1[threadIdx_x % 8 * 28 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 4] * B_shared_1[threadIdx_x % 8 * 28 + 4]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 32] * B_shared_1[threadIdx_x % 8 * 28 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 5] * B_shared_1[threadIdx_x % 8 * 28 + 5]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 33] * B_shared_1[threadIdx_x % 8 * 28 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 6] * B_shared_1[threadIdx_x % 8 * 28 + 6]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 34] * B_shared_1[threadIdx_x % 8 * 28 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 7] * B_shared_1[threadIdx_x % 8 * 28 + 7]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 35] * B_shared_1[threadIdx_x % 8 * 28 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 8] * B_shared_1[threadIdx_x % 8 * 28 + 8]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 36] * B_shared_1[threadIdx_x % 8 * 28 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 9] * B_shared_1[threadIdx_x % 8 * 28 + 9]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 37] * B_shared_1[threadIdx_x % 8 * 28 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 10] * B_shared_1[threadIdx_x % 8 * 28 + 10]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 38] * B_shared_1[threadIdx_x % 8 * 28 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 11] * B_shared_1[threadIdx_x % 8 * 28 + 11]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 39] * B_shared_1[threadIdx_x % 8 * 28 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 12] * B_shared_1[threadIdx_x % 8 * 28 + 12]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 40] * B_shared_1[threadIdx_x % 8 * 28 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 13] * B_shared_1[threadIdx_x % 8 * 28 + 13]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 41] * B_shared_1[threadIdx_x % 8 * 28 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 14] * B_shared_1[threadIdx_x % 8 * 28 + 14]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 42] * B_shared_1[threadIdx_x % 8 * 28 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 15] * B_shared_1[threadIdx_x % 8 * 28 + 15]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 43] * B_shared_1[threadIdx_x % 8 * 28 + 15]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 16] * B_shared_1[threadIdx_x % 8 * 28 + 16]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 44] * B_shared_1[threadIdx_x % 8 * 28 + 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 17] * B_shared_1[threadIdx_x % 8 * 28 + 17]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 45] * B_shared_1[threadIdx_x % 8 * 28 + 17]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 18] * B_shared_1[threadIdx_x % 8 * 28 + 18]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 46] * B_shared_1[threadIdx_x % 8 * 28 + 18]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 19] * B_shared_1[threadIdx_x % 8 * 28 + 19]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 47] * B_shared_1[threadIdx_x % 8 * 28 + 19]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 20] * B_shared_1[threadIdx_x % 8 * 28 + 20]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 48] * B_shared_1[threadIdx_x % 8 * 28 + 20]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 21] * B_shared_1[threadIdx_x % 8 * 28 + 21]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 49] * B_shared_1[threadIdx_x % 8 * 28 + 21]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 22] * B_shared_1[threadIdx_x % 8 * 28 + 22]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 50] * B_shared_1[threadIdx_x % 8 * 28 + 22]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 23] * B_shared_1[threadIdx_x % 8 * 28 + 23]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 51] * B_shared_1[threadIdx_x % 8 * 28 + 23]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 24] * B_shared_1[threadIdx_x % 8 * 28 + 24]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 52] * B_shared_1[threadIdx_x % 8 * 28 + 24]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 25] * B_shared_1[threadIdx_x % 8 * 28 + 25]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 53] * B_shared_1[threadIdx_x % 8 * 28 + 25]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 26] * B_shared_1[threadIdx_x % 8 * 28 + 26]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 54] * B_shared_1[threadIdx_x % 8 * 28 + 26]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 27] * B_shared_1[threadIdx_x % 8 * 28 + 27]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 55] * B_shared_1[threadIdx_x % 8 * 28 + 27]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1] = A_1[blockIdx_x // 28 * 7168 + threadIdx_x_1 // 28 * 224 + threadIdx_x_1 % 28 + 28]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 128] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 128) // 28 * 224 + (threadIdx_x_1 + 16) % 28 + 28]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 256] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 256) // 28 * 224 + (threadIdx_x_1 + 4) % 28 + 28]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 384] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 384) // 28 * 224 + (threadIdx_x_1 + 20) % 28 + 28]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 512] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 512) // 28 * 224 + (threadIdx_x_1 + 8) % 28 + 28]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 640] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 640) // 28 * 224 + (threadIdx_x_1 + 24) % 28 + 28]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 768] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 768) // 28 * 224 + (threadIdx_x_1 + 12) % 28 + 28]
        with T.launch_thread(threadIdx_x_2, 128):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 28 * 1792 + threadIdx_x_2 // 28 * 224 + threadIdx_x_2 % 28 + 28]
        with T.launch_thread(threadIdx_x_2, 128):
            if T.likely(threadIdx_x_2 < 96):
                B_shared_1[threadIdx_x_2 + 128] = B_1[blockIdx_x % 28 * 1792 + (threadIdx_x_2 + 128) // 28 * 224 + (threadIdx_x_2 + 16) % 28 + 28]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56] * B_shared_1[threadIdx_x % 8 * 28]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 28] * B_shared_1[threadIdx_x % 8 * 28]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 1] * B_shared_1[threadIdx_x % 8 * 28 + 1]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 29] * B_shared_1[threadIdx_x % 8 * 28 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 2] * B_shared_1[threadIdx_x % 8 * 28 + 2]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 30] * B_shared_1[threadIdx_x % 8 * 28 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 3] * B_shared_1[threadIdx_x % 8 * 28 + 3]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 31] * B_shared_1[threadIdx_x % 8 * 28 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 4] * B_shared_1[threadIdx_x % 8 * 28 + 4]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 32] * B_shared_1[threadIdx_x % 8 * 28 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 5] * B_shared_1[threadIdx_x % 8 * 28 + 5]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 33] * B_shared_1[threadIdx_x % 8 * 28 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 6] * B_shared_1[threadIdx_x % 8 * 28 + 6]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 34] * B_shared_1[threadIdx_x % 8 * 28 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 7] * B_shared_1[threadIdx_x % 8 * 28 + 7]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 35] * B_shared_1[threadIdx_x % 8 * 28 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 8] * B_shared_1[threadIdx_x % 8 * 28 + 8]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 36] * B_shared_1[threadIdx_x % 8 * 28 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 9] * B_shared_1[threadIdx_x % 8 * 28 + 9]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 37] * B_shared_1[threadIdx_x % 8 * 28 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 10] * B_shared_1[threadIdx_x % 8 * 28 + 10]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 38] * B_shared_1[threadIdx_x % 8 * 28 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 11] * B_shared_1[threadIdx_x % 8 * 28 + 11]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 39] * B_shared_1[threadIdx_x % 8 * 28 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 12] * B_shared_1[threadIdx_x % 8 * 28 + 12]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 40] * B_shared_1[threadIdx_x % 8 * 28 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 13] * B_shared_1[threadIdx_x % 8 * 28 + 13]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 41] * B_shared_1[threadIdx_x % 8 * 28 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 14] * B_shared_1[threadIdx_x % 8 * 28 + 14]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 42] * B_shared_1[threadIdx_x % 8 * 28 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 15] * B_shared_1[threadIdx_x % 8 * 28 + 15]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 43] * B_shared_1[threadIdx_x % 8 * 28 + 15]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 16] * B_shared_1[threadIdx_x % 8 * 28 + 16]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 44] * B_shared_1[threadIdx_x % 8 * 28 + 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 17] * B_shared_1[threadIdx_x % 8 * 28 + 17]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 45] * B_shared_1[threadIdx_x % 8 * 28 + 17]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 18] * B_shared_1[threadIdx_x % 8 * 28 + 18]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 46] * B_shared_1[threadIdx_x % 8 * 28 + 18]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 19] * B_shared_1[threadIdx_x % 8 * 28 + 19]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 47] * B_shared_1[threadIdx_x % 8 * 28 + 19]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 20] * B_shared_1[threadIdx_x % 8 * 28 + 20]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 48] * B_shared_1[threadIdx_x % 8 * 28 + 20]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 21] * B_shared_1[threadIdx_x % 8 * 28 + 21]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 49] * B_shared_1[threadIdx_x % 8 * 28 + 21]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 22] * B_shared_1[threadIdx_x % 8 * 28 + 22]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 50] * B_shared_1[threadIdx_x % 8 * 28 + 22]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 23] * B_shared_1[threadIdx_x % 8 * 28 + 23]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 51] * B_shared_1[threadIdx_x % 8 * 28 + 23]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 24] * B_shared_1[threadIdx_x % 8 * 28 + 24]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 52] * B_shared_1[threadIdx_x % 8 * 28 + 24]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 25] * B_shared_1[threadIdx_x % 8 * 28 + 25]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 53] * B_shared_1[threadIdx_x % 8 * 28 + 25]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 26] * B_shared_1[threadIdx_x % 8 * 28 + 26]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 54] * B_shared_1[threadIdx_x % 8 * 28 + 26]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 27] * B_shared_1[threadIdx_x % 8 * 28 + 27]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 55] * B_shared_1[threadIdx_x % 8 * 28 + 27]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1] = A_1[blockIdx_x // 28 * 7168 + threadIdx_x_1 // 28 * 224 + threadIdx_x_1 % 28 + 56]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 128] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 128) // 28 * 224 + (threadIdx_x_1 + 16) % 28 + 56]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 256] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 256) // 28 * 224 + (threadIdx_x_1 + 4) % 28 + 56]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 384] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 384) // 28 * 224 + (threadIdx_x_1 + 20) % 28 + 56]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 512] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 512) // 28 * 224 + (threadIdx_x_1 + 8) % 28 + 56]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 640] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 640) // 28 * 224 + (threadIdx_x_1 + 24) % 28 + 56]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 768] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 768) // 28 * 224 + (threadIdx_x_1 + 12) % 28 + 56]
        with T.launch_thread(threadIdx_x_2, 128):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 28 * 1792 + threadIdx_x_2 // 28 * 224 + threadIdx_x_2 % 28 + 56]
        with T.launch_thread(threadIdx_x_2, 128):
            if T.likely(threadIdx_x_2 < 96):
                B_shared_1[threadIdx_x_2 + 128] = B_1[blockIdx_x % 28 * 1792 + (threadIdx_x_2 + 128) // 28 * 224 + (threadIdx_x_2 + 16) % 28 + 56]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56] * B_shared_1[threadIdx_x % 8 * 28]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 28] * B_shared_1[threadIdx_x % 8 * 28]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 1] * B_shared_1[threadIdx_x % 8 * 28 + 1]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 29] * B_shared_1[threadIdx_x % 8 * 28 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 2] * B_shared_1[threadIdx_x % 8 * 28 + 2]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 30] * B_shared_1[threadIdx_x % 8 * 28 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 3] * B_shared_1[threadIdx_x % 8 * 28 + 3]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 31] * B_shared_1[threadIdx_x % 8 * 28 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 4] * B_shared_1[threadIdx_x % 8 * 28 + 4]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 32] * B_shared_1[threadIdx_x % 8 * 28 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 5] * B_shared_1[threadIdx_x % 8 * 28 + 5]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 33] * B_shared_1[threadIdx_x % 8 * 28 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 6] * B_shared_1[threadIdx_x % 8 * 28 + 6]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 34] * B_shared_1[threadIdx_x % 8 * 28 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 7] * B_shared_1[threadIdx_x % 8 * 28 + 7]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 35] * B_shared_1[threadIdx_x % 8 * 28 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 8] * B_shared_1[threadIdx_x % 8 * 28 + 8]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 36] * B_shared_1[threadIdx_x % 8 * 28 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 9] * B_shared_1[threadIdx_x % 8 * 28 + 9]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 37] * B_shared_1[threadIdx_x % 8 * 28 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 10] * B_shared_1[threadIdx_x % 8 * 28 + 10]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 38] * B_shared_1[threadIdx_x % 8 * 28 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 11] * B_shared_1[threadIdx_x % 8 * 28 + 11]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 39] * B_shared_1[threadIdx_x % 8 * 28 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 12] * B_shared_1[threadIdx_x % 8 * 28 + 12]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 40] * B_shared_1[threadIdx_x % 8 * 28 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 13] * B_shared_1[threadIdx_x % 8 * 28 + 13]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 41] * B_shared_1[threadIdx_x % 8 * 28 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 14] * B_shared_1[threadIdx_x % 8 * 28 + 14]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 42] * B_shared_1[threadIdx_x % 8 * 28 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 15] * B_shared_1[threadIdx_x % 8 * 28 + 15]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 43] * B_shared_1[threadIdx_x % 8 * 28 + 15]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 16] * B_shared_1[threadIdx_x % 8 * 28 + 16]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 44] * B_shared_1[threadIdx_x % 8 * 28 + 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 17] * B_shared_1[threadIdx_x % 8 * 28 + 17]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 45] * B_shared_1[threadIdx_x % 8 * 28 + 17]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 18] * B_shared_1[threadIdx_x % 8 * 28 + 18]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 46] * B_shared_1[threadIdx_x % 8 * 28 + 18]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 19] * B_shared_1[threadIdx_x % 8 * 28 + 19]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 47] * B_shared_1[threadIdx_x % 8 * 28 + 19]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 20] * B_shared_1[threadIdx_x % 8 * 28 + 20]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 48] * B_shared_1[threadIdx_x % 8 * 28 + 20]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 21] * B_shared_1[threadIdx_x % 8 * 28 + 21]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 49] * B_shared_1[threadIdx_x % 8 * 28 + 21]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 22] * B_shared_1[threadIdx_x % 8 * 28 + 22]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 50] * B_shared_1[threadIdx_x % 8 * 28 + 22]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 23] * B_shared_1[threadIdx_x % 8 * 28 + 23]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 51] * B_shared_1[threadIdx_x % 8 * 28 + 23]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 24] * B_shared_1[threadIdx_x % 8 * 28 + 24]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 52] * B_shared_1[threadIdx_x % 8 * 28 + 24]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 25] * B_shared_1[threadIdx_x % 8 * 28 + 25]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 53] * B_shared_1[threadIdx_x % 8 * 28 + 25]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 26] * B_shared_1[threadIdx_x % 8 * 28 + 26]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 54] * B_shared_1[threadIdx_x % 8 * 28 + 26]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 27] * B_shared_1[threadIdx_x % 8 * 28 + 27]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 55] * B_shared_1[threadIdx_x % 8 * 28 + 27]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1] = A_1[blockIdx_x // 28 * 7168 + threadIdx_x_1 // 28 * 224 + threadIdx_x_1 % 28 + 84]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 128] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 128) // 28 * 224 + (threadIdx_x_1 + 16) % 28 + 84]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 256] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 256) // 28 * 224 + (threadIdx_x_1 + 4) % 28 + 84]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 384] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 384) // 28 * 224 + (threadIdx_x_1 + 20) % 28 + 84]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 512] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 512) // 28 * 224 + (threadIdx_x_1 + 8) % 28 + 84]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 640] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 640) // 28 * 224 + (threadIdx_x_1 + 24) % 28 + 84]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 768] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 768) // 28 * 224 + (threadIdx_x_1 + 12) % 28 + 84]
        with T.launch_thread(threadIdx_x_2, 128):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 28 * 1792 + threadIdx_x_2 // 28 * 224 + threadIdx_x_2 % 28 + 84]
        with T.launch_thread(threadIdx_x_2, 128):
            if T.likely(threadIdx_x_2 < 96):
                B_shared_1[threadIdx_x_2 + 128] = B_1[blockIdx_x % 28 * 1792 + (threadIdx_x_2 + 128) // 28 * 224 + (threadIdx_x_2 + 16) % 28 + 84]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56] * B_shared_1[threadIdx_x % 8 * 28]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 28] * B_shared_1[threadIdx_x % 8 * 28]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 1] * B_shared_1[threadIdx_x % 8 * 28 + 1]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 29] * B_shared_1[threadIdx_x % 8 * 28 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 2] * B_shared_1[threadIdx_x % 8 * 28 + 2]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 30] * B_shared_1[threadIdx_x % 8 * 28 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 3] * B_shared_1[threadIdx_x % 8 * 28 + 3]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 31] * B_shared_1[threadIdx_x % 8 * 28 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 4] * B_shared_1[threadIdx_x % 8 * 28 + 4]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 32] * B_shared_1[threadIdx_x % 8 * 28 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 5] * B_shared_1[threadIdx_x % 8 * 28 + 5]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 33] * B_shared_1[threadIdx_x % 8 * 28 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 6] * B_shared_1[threadIdx_x % 8 * 28 + 6]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 34] * B_shared_1[threadIdx_x % 8 * 28 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 7] * B_shared_1[threadIdx_x % 8 * 28 + 7]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 35] * B_shared_1[threadIdx_x % 8 * 28 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 8] * B_shared_1[threadIdx_x % 8 * 28 + 8]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 36] * B_shared_1[threadIdx_x % 8 * 28 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 9] * B_shared_1[threadIdx_x % 8 * 28 + 9]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 37] * B_shared_1[threadIdx_x % 8 * 28 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 10] * B_shared_1[threadIdx_x % 8 * 28 + 10]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 38] * B_shared_1[threadIdx_x % 8 * 28 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 11] * B_shared_1[threadIdx_x % 8 * 28 + 11]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 39] * B_shared_1[threadIdx_x % 8 * 28 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 12] * B_shared_1[threadIdx_x % 8 * 28 + 12]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 40] * B_shared_1[threadIdx_x % 8 * 28 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 13] * B_shared_1[threadIdx_x % 8 * 28 + 13]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 41] * B_shared_1[threadIdx_x % 8 * 28 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 14] * B_shared_1[threadIdx_x % 8 * 28 + 14]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 42] * B_shared_1[threadIdx_x % 8 * 28 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 15] * B_shared_1[threadIdx_x % 8 * 28 + 15]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 43] * B_shared_1[threadIdx_x % 8 * 28 + 15]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 16] * B_shared_1[threadIdx_x % 8 * 28 + 16]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 44] * B_shared_1[threadIdx_x % 8 * 28 + 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 17] * B_shared_1[threadIdx_x % 8 * 28 + 17]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 45] * B_shared_1[threadIdx_x % 8 * 28 + 17]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 18] * B_shared_1[threadIdx_x % 8 * 28 + 18]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 46] * B_shared_1[threadIdx_x % 8 * 28 + 18]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 19] * B_shared_1[threadIdx_x % 8 * 28 + 19]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 47] * B_shared_1[threadIdx_x % 8 * 28 + 19]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 20] * B_shared_1[threadIdx_x % 8 * 28 + 20]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 48] * B_shared_1[threadIdx_x % 8 * 28 + 20]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 21] * B_shared_1[threadIdx_x % 8 * 28 + 21]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 49] * B_shared_1[threadIdx_x % 8 * 28 + 21]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 22] * B_shared_1[threadIdx_x % 8 * 28 + 22]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 50] * B_shared_1[threadIdx_x % 8 * 28 + 22]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 23] * B_shared_1[threadIdx_x % 8 * 28 + 23]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 51] * B_shared_1[threadIdx_x % 8 * 28 + 23]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 24] * B_shared_1[threadIdx_x % 8 * 28 + 24]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 52] * B_shared_1[threadIdx_x % 8 * 28 + 24]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 25] * B_shared_1[threadIdx_x % 8 * 28 + 25]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 53] * B_shared_1[threadIdx_x % 8 * 28 + 25]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 26] * B_shared_1[threadIdx_x % 8 * 28 + 26]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 54] * B_shared_1[threadIdx_x % 8 * 28 + 26]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 27] * B_shared_1[threadIdx_x % 8 * 28 + 27]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 55] * B_shared_1[threadIdx_x % 8 * 28 + 27]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1] = A_1[blockIdx_x // 28 * 7168 + threadIdx_x_1 // 28 * 224 + threadIdx_x_1 % 28 + 112]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 128] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 128) // 28 * 224 + (threadIdx_x_1 + 16) % 28 + 112]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 256] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 256) // 28 * 224 + (threadIdx_x_1 + 4) % 28 + 112]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 384] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 384) // 28 * 224 + (threadIdx_x_1 + 20) % 28 + 112]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 512] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 512) // 28 * 224 + (threadIdx_x_1 + 8) % 28 + 112]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 640] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 640) // 28 * 224 + (threadIdx_x_1 + 24) % 28 + 112]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 768] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 768) // 28 * 224 + (threadIdx_x_1 + 12) % 28 + 112]
        with T.launch_thread(threadIdx_x_2, 128):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 28 * 1792 + threadIdx_x_2 // 28 * 224 + threadIdx_x_2 % 28 + 112]
        with T.launch_thread(threadIdx_x_2, 128):
            if T.likely(threadIdx_x_2 < 96):
                B_shared_1[threadIdx_x_2 + 128] = B_1[blockIdx_x % 28 * 1792 + (threadIdx_x_2 + 128) // 28 * 224 + (threadIdx_x_2 + 16) % 28 + 112]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56] * B_shared_1[threadIdx_x % 8 * 28]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 28] * B_shared_1[threadIdx_x % 8 * 28]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 1] * B_shared_1[threadIdx_x % 8 * 28 + 1]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 29] * B_shared_1[threadIdx_x % 8 * 28 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 2] * B_shared_1[threadIdx_x % 8 * 28 + 2]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 30] * B_shared_1[threadIdx_x % 8 * 28 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 3] * B_shared_1[threadIdx_x % 8 * 28 + 3]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 31] * B_shared_1[threadIdx_x % 8 * 28 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 4] * B_shared_1[threadIdx_x % 8 * 28 + 4]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 32] * B_shared_1[threadIdx_x % 8 * 28 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 5] * B_shared_1[threadIdx_x % 8 * 28 + 5]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 33] * B_shared_1[threadIdx_x % 8 * 28 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 6] * B_shared_1[threadIdx_x % 8 * 28 + 6]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 34] * B_shared_1[threadIdx_x % 8 * 28 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 7] * B_shared_1[threadIdx_x % 8 * 28 + 7]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 35] * B_shared_1[threadIdx_x % 8 * 28 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 8] * B_shared_1[threadIdx_x % 8 * 28 + 8]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 36] * B_shared_1[threadIdx_x % 8 * 28 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 9] * B_shared_1[threadIdx_x % 8 * 28 + 9]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 37] * B_shared_1[threadIdx_x % 8 * 28 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 10] * B_shared_1[threadIdx_x % 8 * 28 + 10]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 38] * B_shared_1[threadIdx_x % 8 * 28 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 11] * B_shared_1[threadIdx_x % 8 * 28 + 11]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 39] * B_shared_1[threadIdx_x % 8 * 28 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 12] * B_shared_1[threadIdx_x % 8 * 28 + 12]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 40] * B_shared_1[threadIdx_x % 8 * 28 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 13] * B_shared_1[threadIdx_x % 8 * 28 + 13]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 41] * B_shared_1[threadIdx_x % 8 * 28 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 14] * B_shared_1[threadIdx_x % 8 * 28 + 14]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 42] * B_shared_1[threadIdx_x % 8 * 28 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 15] * B_shared_1[threadIdx_x % 8 * 28 + 15]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 43] * B_shared_1[threadIdx_x % 8 * 28 + 15]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 16] * B_shared_1[threadIdx_x % 8 * 28 + 16]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 44] * B_shared_1[threadIdx_x % 8 * 28 + 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 17] * B_shared_1[threadIdx_x % 8 * 28 + 17]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 45] * B_shared_1[threadIdx_x % 8 * 28 + 17]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 18] * B_shared_1[threadIdx_x % 8 * 28 + 18]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 46] * B_shared_1[threadIdx_x % 8 * 28 + 18]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 19] * B_shared_1[threadIdx_x % 8 * 28 + 19]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 47] * B_shared_1[threadIdx_x % 8 * 28 + 19]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 20] * B_shared_1[threadIdx_x % 8 * 28 + 20]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 48] * B_shared_1[threadIdx_x % 8 * 28 + 20]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 21] * B_shared_1[threadIdx_x % 8 * 28 + 21]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 49] * B_shared_1[threadIdx_x % 8 * 28 + 21]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 22] * B_shared_1[threadIdx_x % 8 * 28 + 22]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 50] * B_shared_1[threadIdx_x % 8 * 28 + 22]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 23] * B_shared_1[threadIdx_x % 8 * 28 + 23]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 51] * B_shared_1[threadIdx_x % 8 * 28 + 23]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 24] * B_shared_1[threadIdx_x % 8 * 28 + 24]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 52] * B_shared_1[threadIdx_x % 8 * 28 + 24]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 25] * B_shared_1[threadIdx_x % 8 * 28 + 25]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 53] * B_shared_1[threadIdx_x % 8 * 28 + 25]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 26] * B_shared_1[threadIdx_x % 8 * 28 + 26]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 54] * B_shared_1[threadIdx_x % 8 * 28 + 26]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 27] * B_shared_1[threadIdx_x % 8 * 28 + 27]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 55] * B_shared_1[threadIdx_x % 8 * 28 + 27]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1] = A_1[blockIdx_x // 28 * 7168 + threadIdx_x_1 // 28 * 224 + threadIdx_x_1 % 28 + 140]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 128] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 128) // 28 * 224 + (threadIdx_x_1 + 16) % 28 + 140]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 256] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 256) // 28 * 224 + (threadIdx_x_1 + 4) % 28 + 140]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 384] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 384) // 28 * 224 + (threadIdx_x_1 + 20) % 28 + 140]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 512] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 512) // 28 * 224 + (threadIdx_x_1 + 8) % 28 + 140]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 640] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 640) // 28 * 224 + (threadIdx_x_1 + 24) % 28 + 140]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 768] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 768) // 28 * 224 + (threadIdx_x_1 + 12) % 28 + 140]
        with T.launch_thread(threadIdx_x_2, 128):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 28 * 1792 + threadIdx_x_2 // 28 * 224 + threadIdx_x_2 % 28 + 140]
        with T.launch_thread(threadIdx_x_2, 128):
            if T.likely(threadIdx_x_2 < 96):
                B_shared_1[threadIdx_x_2 + 128] = B_1[blockIdx_x % 28 * 1792 + (threadIdx_x_2 + 128) // 28 * 224 + (threadIdx_x_2 + 16) % 28 + 140]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56] * B_shared_1[threadIdx_x % 8 * 28]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 28] * B_shared_1[threadIdx_x % 8 * 28]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 1] * B_shared_1[threadIdx_x % 8 * 28 + 1]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 29] * B_shared_1[threadIdx_x % 8 * 28 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 2] * B_shared_1[threadIdx_x % 8 * 28 + 2]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 30] * B_shared_1[threadIdx_x % 8 * 28 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 3] * B_shared_1[threadIdx_x % 8 * 28 + 3]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 31] * B_shared_1[threadIdx_x % 8 * 28 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 4] * B_shared_1[threadIdx_x % 8 * 28 + 4]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 32] * B_shared_1[threadIdx_x % 8 * 28 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 5] * B_shared_1[threadIdx_x % 8 * 28 + 5]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 33] * B_shared_1[threadIdx_x % 8 * 28 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 6] * B_shared_1[threadIdx_x % 8 * 28 + 6]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 34] * B_shared_1[threadIdx_x % 8 * 28 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 7] * B_shared_1[threadIdx_x % 8 * 28 + 7]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 35] * B_shared_1[threadIdx_x % 8 * 28 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 8] * B_shared_1[threadIdx_x % 8 * 28 + 8]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 36] * B_shared_1[threadIdx_x % 8 * 28 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 9] * B_shared_1[threadIdx_x % 8 * 28 + 9]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 37] * B_shared_1[threadIdx_x % 8 * 28 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 10] * B_shared_1[threadIdx_x % 8 * 28 + 10]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 38] * B_shared_1[threadIdx_x % 8 * 28 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 11] * B_shared_1[threadIdx_x % 8 * 28 + 11]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 39] * B_shared_1[threadIdx_x % 8 * 28 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 12] * B_shared_1[threadIdx_x % 8 * 28 + 12]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 40] * B_shared_1[threadIdx_x % 8 * 28 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 13] * B_shared_1[threadIdx_x % 8 * 28 + 13]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 41] * B_shared_1[threadIdx_x % 8 * 28 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 14] * B_shared_1[threadIdx_x % 8 * 28 + 14]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 42] * B_shared_1[threadIdx_x % 8 * 28 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 15] * B_shared_1[threadIdx_x % 8 * 28 + 15]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 43] * B_shared_1[threadIdx_x % 8 * 28 + 15]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 16] * B_shared_1[threadIdx_x % 8 * 28 + 16]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 44] * B_shared_1[threadIdx_x % 8 * 28 + 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 17] * B_shared_1[threadIdx_x % 8 * 28 + 17]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 45] * B_shared_1[threadIdx_x % 8 * 28 + 17]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 18] * B_shared_1[threadIdx_x % 8 * 28 + 18]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 46] * B_shared_1[threadIdx_x % 8 * 28 + 18]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 19] * B_shared_1[threadIdx_x % 8 * 28 + 19]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 47] * B_shared_1[threadIdx_x % 8 * 28 + 19]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 20] * B_shared_1[threadIdx_x % 8 * 28 + 20]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 48] * B_shared_1[threadIdx_x % 8 * 28 + 20]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 21] * B_shared_1[threadIdx_x % 8 * 28 + 21]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 49] * B_shared_1[threadIdx_x % 8 * 28 + 21]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 22] * B_shared_1[threadIdx_x % 8 * 28 + 22]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 50] * B_shared_1[threadIdx_x % 8 * 28 + 22]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 23] * B_shared_1[threadIdx_x % 8 * 28 + 23]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 51] * B_shared_1[threadIdx_x % 8 * 28 + 23]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 24] * B_shared_1[threadIdx_x % 8 * 28 + 24]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 52] * B_shared_1[threadIdx_x % 8 * 28 + 24]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 25] * B_shared_1[threadIdx_x % 8 * 28 + 25]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 53] * B_shared_1[threadIdx_x % 8 * 28 + 25]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 26] * B_shared_1[threadIdx_x % 8 * 28 + 26]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 54] * B_shared_1[threadIdx_x % 8 * 28 + 26]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 27] * B_shared_1[threadIdx_x % 8 * 28 + 27]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 55] * B_shared_1[threadIdx_x % 8 * 28 + 27]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1] = A_1[blockIdx_x // 28 * 7168 + threadIdx_x_1 // 28 * 224 + threadIdx_x_1 % 28 + 168]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 128] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 128) // 28 * 224 + (threadIdx_x_1 + 16) % 28 + 168]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 256] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 256) // 28 * 224 + (threadIdx_x_1 + 4) % 28 + 168]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 384] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 384) // 28 * 224 + (threadIdx_x_1 + 20) % 28 + 168]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 512] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 512) // 28 * 224 + (threadIdx_x_1 + 8) % 28 + 168]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 640] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 640) // 28 * 224 + (threadIdx_x_1 + 24) % 28 + 168]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 768] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 768) // 28 * 224 + (threadIdx_x_1 + 12) % 28 + 168]
        with T.launch_thread(threadIdx_x_2, 128):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 28 * 1792 + threadIdx_x_2 // 28 * 224 + threadIdx_x_2 % 28 + 168]
        with T.launch_thread(threadIdx_x_2, 128):
            if T.likely(threadIdx_x_2 < 96):
                B_shared_1[threadIdx_x_2 + 128] = B_1[blockIdx_x % 28 * 1792 + (threadIdx_x_2 + 128) // 28 * 224 + (threadIdx_x_2 + 16) % 28 + 168]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56] * B_shared_1[threadIdx_x % 8 * 28]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 28] * B_shared_1[threadIdx_x % 8 * 28]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 1] * B_shared_1[threadIdx_x % 8 * 28 + 1]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 29] * B_shared_1[threadIdx_x % 8 * 28 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 2] * B_shared_1[threadIdx_x % 8 * 28 + 2]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 30] * B_shared_1[threadIdx_x % 8 * 28 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 3] * B_shared_1[threadIdx_x % 8 * 28 + 3]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 31] * B_shared_1[threadIdx_x % 8 * 28 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 4] * B_shared_1[threadIdx_x % 8 * 28 + 4]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 32] * B_shared_1[threadIdx_x % 8 * 28 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 5] * B_shared_1[threadIdx_x % 8 * 28 + 5]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 33] * B_shared_1[threadIdx_x % 8 * 28 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 6] * B_shared_1[threadIdx_x % 8 * 28 + 6]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 34] * B_shared_1[threadIdx_x % 8 * 28 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 7] * B_shared_1[threadIdx_x % 8 * 28 + 7]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 35] * B_shared_1[threadIdx_x % 8 * 28 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 8] * B_shared_1[threadIdx_x % 8 * 28 + 8]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 36] * B_shared_1[threadIdx_x % 8 * 28 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 9] * B_shared_1[threadIdx_x % 8 * 28 + 9]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 37] * B_shared_1[threadIdx_x % 8 * 28 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 10] * B_shared_1[threadIdx_x % 8 * 28 + 10]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 38] * B_shared_1[threadIdx_x % 8 * 28 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 11] * B_shared_1[threadIdx_x % 8 * 28 + 11]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 39] * B_shared_1[threadIdx_x % 8 * 28 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 12] * B_shared_1[threadIdx_x % 8 * 28 + 12]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 40] * B_shared_1[threadIdx_x % 8 * 28 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 13] * B_shared_1[threadIdx_x % 8 * 28 + 13]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 41] * B_shared_1[threadIdx_x % 8 * 28 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 14] * B_shared_1[threadIdx_x % 8 * 28 + 14]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 42] * B_shared_1[threadIdx_x % 8 * 28 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 15] * B_shared_1[threadIdx_x % 8 * 28 + 15]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 43] * B_shared_1[threadIdx_x % 8 * 28 + 15]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 16] * B_shared_1[threadIdx_x % 8 * 28 + 16]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 44] * B_shared_1[threadIdx_x % 8 * 28 + 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 17] * B_shared_1[threadIdx_x % 8 * 28 + 17]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 45] * B_shared_1[threadIdx_x % 8 * 28 + 17]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 18] * B_shared_1[threadIdx_x % 8 * 28 + 18]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 46] * B_shared_1[threadIdx_x % 8 * 28 + 18]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 19] * B_shared_1[threadIdx_x % 8 * 28 + 19]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 47] * B_shared_1[threadIdx_x % 8 * 28 + 19]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 20] * B_shared_1[threadIdx_x % 8 * 28 + 20]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 48] * B_shared_1[threadIdx_x % 8 * 28 + 20]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 21] * B_shared_1[threadIdx_x % 8 * 28 + 21]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 49] * B_shared_1[threadIdx_x % 8 * 28 + 21]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 22] * B_shared_1[threadIdx_x % 8 * 28 + 22]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 50] * B_shared_1[threadIdx_x % 8 * 28 + 22]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 23] * B_shared_1[threadIdx_x % 8 * 28 + 23]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 51] * B_shared_1[threadIdx_x % 8 * 28 + 23]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 24] * B_shared_1[threadIdx_x % 8 * 28 + 24]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 52] * B_shared_1[threadIdx_x % 8 * 28 + 24]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 25] * B_shared_1[threadIdx_x % 8 * 28 + 25]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 53] * B_shared_1[threadIdx_x % 8 * 28 + 25]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 26] * B_shared_1[threadIdx_x % 8 * 28 + 26]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 54] * B_shared_1[threadIdx_x % 8 * 28 + 26]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 27] * B_shared_1[threadIdx_x % 8 * 28 + 27]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 55] * B_shared_1[threadIdx_x % 8 * 28 + 27]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1] = A_1[blockIdx_x // 28 * 7168 + threadIdx_x_1 // 28 * 224 + threadIdx_x_1 % 28 + 196]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 128] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 128) // 28 * 224 + (threadIdx_x_1 + 16) % 28 + 196]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 256] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 256) // 28 * 224 + (threadIdx_x_1 + 4) % 28 + 196]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 384] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 384) // 28 * 224 + (threadIdx_x_1 + 20) % 28 + 196]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 512] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 512) // 28 * 224 + (threadIdx_x_1 + 8) % 28 + 196]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 640] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 640) // 28 * 224 + (threadIdx_x_1 + 24) % 28 + 196]
        with T.launch_thread(threadIdx_x_1, 128):
            A_shared_1[threadIdx_x_1 + 768] = A_1[blockIdx_x // 28 * 7168 + (threadIdx_x_1 + 768) // 28 * 224 + (threadIdx_x_1 + 12) % 28 + 196]
        with T.launch_thread(threadIdx_x_2, 128):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 28 * 1792 + threadIdx_x_2 // 28 * 224 + threadIdx_x_2 % 28 + 196]
        with T.launch_thread(threadIdx_x_2, 128):
            if T.likely(threadIdx_x_2 < 96):
                B_shared_1[threadIdx_x_2 + 128] = B_1[blockIdx_x % 28 * 1792 + (threadIdx_x_2 + 128) // 28 * 224 + (threadIdx_x_2 + 16) % 28 + 196]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56] * B_shared_1[threadIdx_x % 8 * 28]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 28] * B_shared_1[threadIdx_x % 8 * 28]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 1] * B_shared_1[threadIdx_x % 8 * 28 + 1]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 29] * B_shared_1[threadIdx_x % 8 * 28 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 2] * B_shared_1[threadIdx_x % 8 * 28 + 2]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 30] * B_shared_1[threadIdx_x % 8 * 28 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 3] * B_shared_1[threadIdx_x % 8 * 28 + 3]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 31] * B_shared_1[threadIdx_x % 8 * 28 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 4] * B_shared_1[threadIdx_x % 8 * 28 + 4]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 32] * B_shared_1[threadIdx_x % 8 * 28 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 5] * B_shared_1[threadIdx_x % 8 * 28 + 5]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 33] * B_shared_1[threadIdx_x % 8 * 28 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 6] * B_shared_1[threadIdx_x % 8 * 28 + 6]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 34] * B_shared_1[threadIdx_x % 8 * 28 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 7] * B_shared_1[threadIdx_x % 8 * 28 + 7]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 35] * B_shared_1[threadIdx_x % 8 * 28 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 8] * B_shared_1[threadIdx_x % 8 * 28 + 8]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 36] * B_shared_1[threadIdx_x % 8 * 28 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 9] * B_shared_1[threadIdx_x % 8 * 28 + 9]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 37] * B_shared_1[threadIdx_x % 8 * 28 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 10] * B_shared_1[threadIdx_x % 8 * 28 + 10]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 38] * B_shared_1[threadIdx_x % 8 * 28 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 11] * B_shared_1[threadIdx_x % 8 * 28 + 11]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 39] * B_shared_1[threadIdx_x % 8 * 28 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 12] * B_shared_1[threadIdx_x % 8 * 28 + 12]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 40] * B_shared_1[threadIdx_x % 8 * 28 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 13] * B_shared_1[threadIdx_x % 8 * 28 + 13]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 41] * B_shared_1[threadIdx_x % 8 * 28 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 14] * B_shared_1[threadIdx_x % 8 * 28 + 14]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 42] * B_shared_1[threadIdx_x % 8 * 28 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 15] * B_shared_1[threadIdx_x % 8 * 28 + 15]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 43] * B_shared_1[threadIdx_x % 8 * 28 + 15]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 16] * B_shared_1[threadIdx_x % 8 * 28 + 16]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 44] * B_shared_1[threadIdx_x % 8 * 28 + 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 17] * B_shared_1[threadIdx_x % 8 * 28 + 17]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 45] * B_shared_1[threadIdx_x % 8 * 28 + 17]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 18] * B_shared_1[threadIdx_x % 8 * 28 + 18]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 46] * B_shared_1[threadIdx_x % 8 * 28 + 18]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 19] * B_shared_1[threadIdx_x % 8 * 28 + 19]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 47] * B_shared_1[threadIdx_x % 8 * 28 + 19]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 20] * B_shared_1[threadIdx_x % 8 * 28 + 20]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 48] * B_shared_1[threadIdx_x % 8 * 28 + 20]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 21] * B_shared_1[threadIdx_x % 8 * 28 + 21]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 49] * B_shared_1[threadIdx_x % 8 * 28 + 21]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 22] * B_shared_1[threadIdx_x % 8 * 28 + 22]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 50] * B_shared_1[threadIdx_x % 8 * 28 + 22]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 23] * B_shared_1[threadIdx_x % 8 * 28 + 23]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 51] * B_shared_1[threadIdx_x % 8 * 28 + 23]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 24] * B_shared_1[threadIdx_x % 8 * 28 + 24]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 52] * B_shared_1[threadIdx_x % 8 * 28 + 24]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 25] * B_shared_1[threadIdx_x % 8 * 28 + 25]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 53] * B_shared_1[threadIdx_x % 8 * 28 + 25]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 26] * B_shared_1[threadIdx_x % 8 * 28 + 26]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 54] * B_shared_1[threadIdx_x % 8 * 28 + 26]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 8 * 56 + 27] * B_shared_1[threadIdx_x % 8 * 28 + 27]
        transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 8 * 56 + 55] * B_shared_1[threadIdx_x % 8 * 28 + 27]
        for i_inner in range(2):
            out_1 = T.Buffer((50176,), data=out.data)
            C_1 = T.Buffer((50176,), data=C.data)
            out_1[blockIdx_x // 28 * 7168 + threadIdx_x // 8 * 448 + i_inner * 224 + blockIdx_x % 28 * 8 + threadIdx_x % 8] = transposed_gemm_1[i_inner] + C_1[blockIdx_x // 28 * 7168 + threadIdx_x // 8 * 448 + i_inner * 224 + blockIdx_x % 28 * 8 + threadIdx_x % 8]
Equivalent python schedule:
transposed_gemm_i, transposed_gemm_j, transposed_gemm_k = tuple(transposed_gemm.op.axis) + tuple(transposed_gemm.op.reduce_axis)
out_i, out_j = tuple(out.op.axis) + tuple(out.op.reduce_axis)
transposed_gemm_i_o_i, transposed_gemm_i_i = s[transposed_gemm].split(transposed_gemm_i, factor=1)
transposed_gemm_i_o_o_i, transposed_gemm_i_o_i = s[transposed_gemm].split(transposed_gemm_i_o_i, factor=2)
transposed_gemm_i_o_o_o_i, transposed_gemm_i_o_o_i = s[transposed_gemm].split(transposed_gemm_i_o_o_i, factor=16)
transposed_gemm_i_o_o_o_o, transposed_gemm_i_o_o_o_i = s[transposed_gemm].split(transposed_gemm_i_o_o_o_i, factor=1)
transposed_gemm_j_o_i, transposed_gemm_j_i = s[transposed_gemm].split(transposed_gemm_j, factor=1)
transposed_gemm_j_o_o_i, transposed_gemm_j_o_i = s[transposed_gemm].split(transposed_gemm_j_o_i, factor=1)
transposed_gemm_j_o_o_o_i, transposed_gemm_j_o_o_i = s[transposed_gemm].split(transposed_gemm_j_o_o_i, factor=8)
transposed_gemm_j_o_o_o_o, transposed_gemm_j_o_o_o_i = s[transposed_gemm].split(transposed_gemm_j_o_o_o_i, factor=1)
transposed_gemm_k_o_i, transposed_gemm_k_i = s[transposed_gemm].split(transposed_gemm_k, factor=1)
transposed_gemm_k_o_o, transposed_gemm_k_o_i = s[transposed_gemm].split(transposed_gemm_k_o_i, factor=28)
s[transposed_gemm].reorder(transposed_gemm_i_o_o_o_o, transposed_gemm_j_o_o_o_o, transposed_gemm_i_o_o_o_i, transposed_gemm_j_o_o_o_i, transposed_gemm_i_o_o_i, transposed_gemm_j_o_o_i, transposed_gemm_k_o_o, transposed_gemm_k_o_i, transposed_gemm_i_o_i, transposed_gemm_j_o_i, transposed_gemm_k_i, transposed_gemm_i_i, transposed_gemm_j_i)
out_i_o_i, out_i_i = s[out].split(out_i, factor=2)
out_i_o_o_i, out_i_o_i = s[out].split(out_i_o_i, factor=16)
out_i_o_o_o, out_i_o_o_i = s[out].split(out_i_o_o_i, factor=1)
out_j_o_i, out_j_i = s[out].split(out_j, factor=1)
out_j_o_o_i, out_j_o_i = s[out].split(out_j_o_i, factor=8)
out_j_o_o_o, out_j_o_o_i = s[out].split(out_j_o_o_i, factor=1)
s[out].reorder(out_i_o_o_o, out_j_o_o_o, out_i_o_o_i, out_j_o_o_i, out_i_o_i, out_j_o_i, out_i_i, out_j_i)
s[transposed_gemm].compute_at(s[out], out_j_o_i)
B_shared = s.cache_read(B, "shared", [transposed_gemm])
B_shared_ax0, B_shared_ax1 = tuple(B_shared.op.axis)
s[B_shared].compute_at(s[transposed_gemm], transposed_gemm_k_o_o)
A_shared = s.cache_read(A, "shared", [transposed_gemm])
A_shared_ax0, A_shared_ax1 = tuple(A_shared.op.axis)
s[A_shared].compute_at(s[transposed_gemm], transposed_gemm_k_o_o)
out_i_o_o_o_j_o_o_o_fused = s[out].fuse(out_i_o_o_o, out_j_o_o_o)
s[out].bind(out_i_o_o_o_j_o_o_o_fused, te.thread_axis("blockIdx.x"))
out_i_o_o_i_j_o_o_i_fused = s[out].fuse(out_i_o_o_i, out_j_o_o_i)
s[out].bind(out_i_o_o_i_j_o_o_i_fused, te.thread_axis("vthread"))
out_i_o_i_j_o_i_fused = s[out].fuse(out_i_o_i, out_j_o_i)
s[out].bind(out_i_o_i_j_o_i_fused, te.thread_axis("threadIdx.x"))
B_shared_ax0_ax1_fused = s[B_shared].fuse(B_shared_ax0, B_shared_ax1)
B_shared_ax0_ax1_fused_o, B_shared_ax0_ax1_fused_i = s[B_shared].split(B_shared_ax0_ax1_fused, factor=1)
s[B_shared].vectorize(B_shared_ax0_ax1_fused_i)
B_shared_ax0_ax1_fused_o_o, B_shared_ax0_ax1_fused_o_i = s[B_shared].split(B_shared_ax0_ax1_fused_o, factor=128)
s[B_shared].bind(B_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
A_shared_ax0_ax1_fused = s[A_shared].fuse(A_shared_ax0, A_shared_ax1)
A_shared_ax0_ax1_fused_o, A_shared_ax0_ax1_fused_i = s[A_shared].split(A_shared_ax0_ax1_fused, factor=1)
s[A_shared].vectorize(A_shared_ax0_ax1_fused_i)
A_shared_ax0_ax1_fused_o_o, A_shared_ax0_ax1_fused_o_i = s[A_shared].split(A_shared_ax0_ax1_fused_o, factor=128)
s[A_shared].bind(A_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
s[transposed_gemm].pragma(transposed_gemm_i_o_o_o_o, "auto_unroll_max_step", 1024)
s[transposed_gemm].pragma(transposed_gemm_i_o_o_o_o, "unroll_explicit", True)

Equivalent CUDA code:

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ A, float* __restrict__ B, float* __restrict__ C, float* __restrict__ out) {
  float transposed_gemm[2];
  __shared__ float A_shared[896];
  __shared__ float B_shared[224];
  transposed_gemm[0] = 0.000000e+00f;
  transposed_gemm[1] = 0.000000e+00f;
  A_shared[((int)threadIdx.x)] = A[((((((int)blockIdx.x) / 28) * 7168) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28))];
  A_shared[(((int)threadIdx.x) + 128)] = A[((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28))];
  A_shared[(((int)threadIdx.x) + 256)] = A[((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 256) / 28) * 224)) + ((((int)threadIdx.x) + 4) % 28))];
  A_shared[(((int)threadIdx.x) + 384)] = A[((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 384) / 28) * 224)) + ((((int)threadIdx.x) + 20) % 28))];
  A_shared[(((int)threadIdx.x) + 512)] = A[((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 512) / 28) * 224)) + ((((int)threadIdx.x) + 8) % 28))];
  A_shared[(((int)threadIdx.x) + 640)] = A[((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 640) / 28) * 224)) + ((((int)threadIdx.x) + 24) % 28))];
  A_shared[(((int)threadIdx.x) + 768)] = A[((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 768) / 28) * 224)) + ((((int)threadIdx.x) + 12) % 28))];
  B_shared[((int)threadIdx.x)] = B[((((((int)blockIdx.x) % 28) * 1792) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28))];
  if (((int)threadIdx.x) < 96) {
    B_shared[(((int)threadIdx.x) + 128)] = B[((((((int)blockIdx.x) % 28) * 1792) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28))];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 3) * 56)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 28)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 1)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 29)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 2)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 30)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 3)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 31)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 4)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 32)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 5)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 33)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 6)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 34)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 7)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 35)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 8)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 36)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 9)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 37)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 10)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 38)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 11)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 39)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 12)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 40)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 13)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 41)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 14)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 42)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 15)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 43)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 16)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 44)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 17)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 45)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 18)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 46)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 19)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 47)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 20)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 48)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 21)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 49)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 22)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 50)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 23)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 51)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 24)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 52)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 25)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 53)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 26)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 54)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 27)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 55)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  __syncthreads();
  A_shared[((int)threadIdx.x)] = A[(((((((int)blockIdx.x) / 28) * 7168) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28)) + 28)];
  A_shared[(((int)threadIdx.x) + 128)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28)) + 28)];
  A_shared[(((int)threadIdx.x) + 256)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 256) / 28) * 224)) + ((((int)threadIdx.x) + 4) % 28)) + 28)];
  A_shared[(((int)threadIdx.x) + 384)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 384) / 28) * 224)) + ((((int)threadIdx.x) + 20) % 28)) + 28)];
  A_shared[(((int)threadIdx.x) + 512)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 512) / 28) * 224)) + ((((int)threadIdx.x) + 8) % 28)) + 28)];
  A_shared[(((int)threadIdx.x) + 640)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 640) / 28) * 224)) + ((((int)threadIdx.x) + 24) % 28)) + 28)];
  A_shared[(((int)threadIdx.x) + 768)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 768) / 28) * 224)) + ((((int)threadIdx.x) + 12) % 28)) + 28)];
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 28) * 1792) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28)) + 28)];
  if (((int)threadIdx.x) < 96) {
    B_shared[(((int)threadIdx.x) + 128)] = B[(((((((int)blockIdx.x) % 28) * 1792) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28)) + 28)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 3) * 56)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 28)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 1)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 29)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 2)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 30)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 3)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 31)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 4)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 32)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 5)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 33)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 6)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 34)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 7)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 35)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 8)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 36)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 9)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 37)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 10)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 38)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 11)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 39)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 12)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 40)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 13)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 41)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 14)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 42)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 15)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 43)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 16)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 44)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 17)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 45)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 18)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 46)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 19)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 47)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 20)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 48)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 21)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 49)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 22)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 50)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 23)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 51)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 24)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 52)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 25)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 53)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 26)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 54)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 27)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 55)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  __syncthreads();
  A_shared[((int)threadIdx.x)] = A[(((((((int)blockIdx.x) / 28) * 7168) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28)) + 56)];
  A_shared[(((int)threadIdx.x) + 128)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28)) + 56)];
  A_shared[(((int)threadIdx.x) + 256)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 256) / 28) * 224)) + ((((int)threadIdx.x) + 4) % 28)) + 56)];
  A_shared[(((int)threadIdx.x) + 384)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 384) / 28) * 224)) + ((((int)threadIdx.x) + 20) % 28)) + 56)];
  A_shared[(((int)threadIdx.x) + 512)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 512) / 28) * 224)) + ((((int)threadIdx.x) + 8) % 28)) + 56)];
  A_shared[(((int)threadIdx.x) + 640)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 640) / 28) * 224)) + ((((int)threadIdx.x) + 24) % 28)) + 56)];
  A_shared[(((int)threadIdx.x) + 768)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 768) / 28) * 224)) + ((((int)threadIdx.x) + 12) % 28)) + 56)];
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 28) * 1792) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28)) + 56)];
  if (((int)threadIdx.x) < 96) {
    B_shared[(((int)threadIdx.x) + 128)] = B[(((((((int)blockIdx.x) % 28) * 1792) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28)) + 56)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 3) * 56)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 28)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 1)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 29)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 2)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 30)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 3)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 31)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 4)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 32)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 5)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 33)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 6)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 34)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 7)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 35)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 8)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 36)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 9)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 37)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 10)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 38)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 11)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 39)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 12)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 40)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 13)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 41)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 14)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 42)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 15)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 43)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 16)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 44)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 17)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 45)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 18)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 46)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 19)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 47)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 20)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 48)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 21)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 49)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 22)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 50)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 23)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 51)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 24)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 52)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 25)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 53)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 26)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 54)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 27)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 55)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  __syncthreads();
  A_shared[((int)threadIdx.x)] = A[(((((((int)blockIdx.x) / 28) * 7168) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28)) + 84)];
  A_shared[(((int)threadIdx.x) + 128)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28)) + 84)];
  A_shared[(((int)threadIdx.x) + 256)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 256) / 28) * 224)) + ((((int)threadIdx.x) + 4) % 28)) + 84)];
  A_shared[(((int)threadIdx.x) + 384)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 384) / 28) * 224)) + ((((int)threadIdx.x) + 20) % 28)) + 84)];
  A_shared[(((int)threadIdx.x) + 512)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 512) / 28) * 224)) + ((((int)threadIdx.x) + 8) % 28)) + 84)];
  A_shared[(((int)threadIdx.x) + 640)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 640) / 28) * 224)) + ((((int)threadIdx.x) + 24) % 28)) + 84)];
  A_shared[(((int)threadIdx.x) + 768)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 768) / 28) * 224)) + ((((int)threadIdx.x) + 12) % 28)) + 84)];
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 28) * 1792) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28)) + 84)];
  if (((int)threadIdx.x) < 96) {
    B_shared[(((int)threadIdx.x) + 128)] = B[(((((((int)blockIdx.x) % 28) * 1792) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28)) + 84)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 3) * 56)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 28)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 1)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 29)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 2)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 30)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 3)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 31)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 4)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 32)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 5)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 33)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 6)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 34)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 7)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 35)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 8)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 36)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 9)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 37)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 10)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 38)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 11)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 39)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 12)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 40)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 13)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 41)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 14)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 42)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 15)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 43)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 16)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 44)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 17)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 45)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 18)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 46)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 19)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 47)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 20)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 48)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 21)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 49)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 22)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 50)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 23)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 51)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 24)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 52)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 25)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 53)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 26)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 54)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 27)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 55)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  __syncthreads();
  A_shared[((int)threadIdx.x)] = A[(((((((int)blockIdx.x) / 28) * 7168) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28)) + 112)];
  A_shared[(((int)threadIdx.x) + 128)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28)) + 112)];
  A_shared[(((int)threadIdx.x) + 256)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 256) / 28) * 224)) + ((((int)threadIdx.x) + 4) % 28)) + 112)];
  A_shared[(((int)threadIdx.x) + 384)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 384) / 28) * 224)) + ((((int)threadIdx.x) + 20) % 28)) + 112)];
  A_shared[(((int)threadIdx.x) + 512)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 512) / 28) * 224)) + ((((int)threadIdx.x) + 8) % 28)) + 112)];
  A_shared[(((int)threadIdx.x) + 640)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 640) / 28) * 224)) + ((((int)threadIdx.x) + 24) % 28)) + 112)];
  A_shared[(((int)threadIdx.x) + 768)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 768) / 28) * 224)) + ((((int)threadIdx.x) + 12) % 28)) + 112)];
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 28) * 1792) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28)) + 112)];
  if (((int)threadIdx.x) < 96) {
    B_shared[(((int)threadIdx.x) + 128)] = B[(((((((int)blockIdx.x) % 28) * 1792) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28)) + 112)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 3) * 56)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 28)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 1)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 29)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 2)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 30)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 3)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 31)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 4)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 32)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 5)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 33)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 6)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 34)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 7)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 35)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 8)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 36)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 9)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 37)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 10)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 38)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 11)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 39)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 12)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 40)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 13)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 41)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 14)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 42)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 15)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 43)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 16)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 44)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 17)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 45)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 18)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 46)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 19)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 47)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 20)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 48)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 21)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 49)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 22)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 50)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 23)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 51)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 24)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 52)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 25)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 53)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 26)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 54)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 27)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 55)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  __syncthreads();
  A_shared[((int)threadIdx.x)] = A[(((((((int)blockIdx.x) / 28) * 7168) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28)) + 140)];
  A_shared[(((int)threadIdx.x) + 128)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28)) + 140)];
  A_shared[(((int)threadIdx.x) + 256)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 256) / 28) * 224)) + ((((int)threadIdx.x) + 4) % 28)) + 140)];
  A_shared[(((int)threadIdx.x) + 384)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 384) / 28) * 224)) + ((((int)threadIdx.x) + 20) % 28)) + 140)];
  A_shared[(((int)threadIdx.x) + 512)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 512) / 28) * 224)) + ((((int)threadIdx.x) + 8) % 28)) + 140)];
  A_shared[(((int)threadIdx.x) + 640)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 640) / 28) * 224)) + ((((int)threadIdx.x) + 24) % 28)) + 140)];
  A_shared[(((int)threadIdx.x) + 768)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 768) / 28) * 224)) + ((((int)threadIdx.x) + 12) % 28)) + 140)];
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 28) * 1792) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28)) + 140)];
  if (((int)threadIdx.x) < 96) {
    B_shared[(((int)threadIdx.x) + 128)] = B[(((((((int)blockIdx.x) % 28) * 1792) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28)) + 140)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 3) * 56)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 28)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 1)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 29)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 2)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 30)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 3)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 31)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 4)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 32)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 5)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 33)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 6)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 34)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 7)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 35)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 8)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 36)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 9)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 37)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 10)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 38)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 11)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 39)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 12)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 40)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 13)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 41)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 14)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 42)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 15)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 43)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 16)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 44)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 17)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 45)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 18)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 46)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 19)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 47)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 20)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 48)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 21)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 49)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 22)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 50)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 23)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 51)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 24)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 52)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 25)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 53)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 26)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 54)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 27)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 55)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  __syncthreads();
  A_shared[((int)threadIdx.x)] = A[(((((((int)blockIdx.x) / 28) * 7168) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28)) + 168)];
  A_shared[(((int)threadIdx.x) + 128)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28)) + 168)];
  A_shared[(((int)threadIdx.x) + 256)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 256) / 28) * 224)) + ((((int)threadIdx.x) + 4) % 28)) + 168)];
  A_shared[(((int)threadIdx.x) + 384)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 384) / 28) * 224)) + ((((int)threadIdx.x) + 20) % 28)) + 168)];
  A_shared[(((int)threadIdx.x) + 512)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 512) / 28) * 224)) + ((((int)threadIdx.x) + 8) % 28)) + 168)];
  A_shared[(((int)threadIdx.x) + 640)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 640) / 28) * 224)) + ((((int)threadIdx.x) + 24) % 28)) + 168)];
  A_shared[(((int)threadIdx.x) + 768)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 768) / 28) * 224)) + ((((int)threadIdx.x) + 12) % 28)) + 168)];
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 28) * 1792) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28)) + 168)];
  if (((int)threadIdx.x) < 96) {
    B_shared[(((int)threadIdx.x) + 128)] = B[(((((((int)blockIdx.x) % 28) * 1792) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28)) + 168)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 3) * 56)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 28)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 1)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 29)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 2)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 30)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 3)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 31)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 4)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 32)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 5)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 33)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 6)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 34)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 7)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 35)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 8)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 36)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 9)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 37)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 10)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 38)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 11)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 39)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 12)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 40)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 13)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 41)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 14)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 42)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 15)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 43)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 16)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 44)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 17)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 45)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 18)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 46)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 19)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 47)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 20)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 48)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 21)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 49)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 22)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 50)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 23)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 51)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 24)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 52)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 25)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 53)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 26)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 54)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 27)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 55)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  __syncthreads();
  A_shared[((int)threadIdx.x)] = A[(((((((int)blockIdx.x) / 28) * 7168) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28)) + 196)];
  A_shared[(((int)threadIdx.x) + 128)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28)) + 196)];
  A_shared[(((int)threadIdx.x) + 256)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 256) / 28) * 224)) + ((((int)threadIdx.x) + 4) % 28)) + 196)];
  A_shared[(((int)threadIdx.x) + 384)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 384) / 28) * 224)) + ((((int)threadIdx.x) + 20) % 28)) + 196)];
  A_shared[(((int)threadIdx.x) + 512)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 512) / 28) * 224)) + ((((int)threadIdx.x) + 8) % 28)) + 196)];
  A_shared[(((int)threadIdx.x) + 640)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 640) / 28) * 224)) + ((((int)threadIdx.x) + 24) % 28)) + 196)];
  A_shared[(((int)threadIdx.x) + 768)] = A[(((((((int)blockIdx.x) / 28) * 7168) + (((((int)threadIdx.x) + 768) / 28) * 224)) + ((((int)threadIdx.x) + 12) % 28)) + 196)];
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 28) * 1792) + ((((int)threadIdx.x) / 28) * 224)) + (((int)threadIdx.x) % 28)) + 196)];
  if (((int)threadIdx.x) < 96) {
    B_shared[(((int)threadIdx.x) + 128)] = B[(((((((int)blockIdx.x) % 28) * 1792) + (((((int)threadIdx.x) + 128) / 28) * 224)) + ((((int)threadIdx.x) + 16) % 28)) + 196)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 3) * 56)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 28)] * B_shared[((((int)threadIdx.x) & 7) * 28)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 1)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 29)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 2)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 30)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 3)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 31)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 4)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 32)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 5)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 33)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 6)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 34)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 7)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 35)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 8)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 36)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 9)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 37)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 10)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 38)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 11)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 39)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 12)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 40)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 13)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 41)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 14)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 42)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 15)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 43)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 15)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 16)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 44)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 17)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 45)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 17)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 18)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 46)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 18)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 19)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 47)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 19)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 20)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 48)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 20)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 21)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 49)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 21)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 22)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 50)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 22)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 23)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 51)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 23)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 24)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 52)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 24)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 25)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 53)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 25)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 26)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 54)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 26)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 27)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  transposed_gemm[1] = (transposed_gemm[1] + (A_shared[(((((int)threadIdx.x) >> 3) * 56) + 55)] * B_shared[(((((int)threadIdx.x) & 7) * 28) + 27)]));
  for (int i_inner = 0; i_inner < 2; ++i_inner) {
    out[((((((((int)blockIdx.x) / 28) * 7168) + ((((int)threadIdx.x) >> 3) * 448)) + (i_inner * 224)) + ((((int)blockIdx.x) % 28) * 8)) + (((int)threadIdx.x) & 7))] = (transposed_gemm[i_inner] + C[((((((((int)blockIdx.x) / 28) * 7168) + ((((int)threadIdx.x) >> 3) * 448)) + (i_inner * 224)) + ((((int)blockIdx.x) % 28) * 8)) + (((int)threadIdx.x) & 7))]);
  }
}


