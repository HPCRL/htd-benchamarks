----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Generate Sketches		#s: 1
Sample Initial Population	#s: 141	fail_ct: 1907	Time elapsed: 5.01
GA Iter: 0	Max score: 0.9992	Min score: 0.1109	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9999	Min score: 0.9826	#Pop: 128	#M+: 1387	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 33.65
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 0.87 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 120	fail_ct: 1928	Time elapsed: 2.35
GA Iter: 0	Max score: 0.9979	Min score: 0.0162	#Pop: 120	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9994	Min score: 0.9813	#Pop: 128	#M+: 1377	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 34.24
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.14 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 136	fail_ct: 1912	Time elapsed: 2.41
GA Iter: 0	Max score: 0.9966	Min score: 0.1254	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 1.0172	Min score: 0.9966	#Pop: 128	#M+: 1387	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 33.46
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.40 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 124	fail_ct: 1924	Time elapsed: 2.28
GA Iter: 0	Max score: 0.5073	Min score: 0.0168	#Pop: 124	#M+: 0	#M-: 0
GA Iter: 4	Max score: 1.0443	Min score: 0.8678	#Pop: 128	#M+: 1398	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 33.49
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.60 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 140	fail_ct: 1908	Time elapsed: 2.32
GA Iter: 0	Max score: 0.6420	Min score: 0.0743	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 1.0583	Min score: 0.9827	#Pop: 128	#M+: 1389	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.38
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.58 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 143	fail_ct: 1905	Time elapsed: 2.37
GA Iter: 0	Max score: 0.5338	Min score: 0.0611	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9811	Min score: 0.9708	#Pop: 128	#M+: 1387	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.79
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.76 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 139	fail_ct: 1909	Time elapsed: 2.32
GA Iter: 0	Max score: 0.6065	Min score: 0.0219	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 1.0491	Min score: 0.9656	#Pop: 128	#M+: 1385	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.57
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.02 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 142	fail_ct: 1906	Time elapsed: 2.49
GA Iter: 0	Max score: 0.5684	Min score: 0.0173	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9955	Min score: 0.9661	#Pop: 128	#M+: 1392	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.48
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.06 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 142	fail_ct: 1906	Time elapsed: 2.44
GA Iter: 0	Max score: 0.7362	Min score: 0.0294	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9939	Min score: 0.9727	#Pop: 128	#M+: 1389	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.38
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.13 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 131	fail_ct: 1917	Time elapsed: 2.32
GA Iter: 0	Max score: 0.7448	Min score: 0.0019	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9939	Min score: 0.9701	#Pop: 128	#M+: 1392	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.15
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.28 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 149	fail_ct: 1899	Time elapsed: 2.39
GA Iter: 0	Max score: 0.6252	Min score: 0.0484	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9924	Min score: 0.9735	#Pop: 128	#M+: 1403	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.03
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.11 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 124	fail_ct: 1924	Time elapsed: 2.37
GA Iter: 0	Max score: 0.7305	Min score: -0.0832	#Pop: 124	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9904	Min score: 0.9707	#Pop: 128	#M+: 1385	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 31.99
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.43 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 140	fail_ct: 1908	Time elapsed: 2.39
GA Iter: 0	Max score: 0.7723	Min score: 0.0414	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9905	Min score: 0.9699	#Pop: 128	#M+: 1401	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.14
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.24 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 148	fail_ct: 1900	Time elapsed: 2.44
GA Iter: 0	Max score: 0.7775	Min score: 0.0472	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9899	Min score: 0.9664	#Pop: 128	#M+: 1394	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.11
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.53 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 139	fail_ct: 1909	Time elapsed: 2.46
GA Iter: 0	Max score: 0.6664	Min score: 0.0439	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9913	Min score: 0.9695	#Pop: 128	#M+: 1371	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 31.97
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.41 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 135	fail_ct: 1913	Time elapsed: 2.38
GA Iter: 0	Max score: 0.7396	Min score: 0.0295	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9986	Min score: 0.9687	#Pop: 128	#M+: 1393	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.00
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Done ]
----------------------------------------------------------------------
arc=sm_80
Computational DAG:
A = PLACEHOLDER [224, 512]
B = PLACEHOLDER [224, 512]
transposed_gemm(i, j) += (A[i, k]*B[j, k])
C = PLACEHOLDER [224, 224]
out(i, j) = (transposed_gemm[i, j] + C[i, j])

Lowered TIR:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((224, 512), "float32"), B: T.Buffer((224, 512), "float32"), C: T.Buffer((224, 224), "float32"), out: T.Buffer((224, 224), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "global_symbol": "main", "tir.noalias": T.bool(True)})
        blockIdx_x = T.launch_thread("blockIdx.x", 98)
        transposed_gemm = T.allocate([4], "float32", "local")
        A_shared = T.allocate([8192], "float32", "shared")
        B_shared = T.allocate([4096], "float32", "shared")
        threadIdx_x = T.launch_thread("threadIdx.x", 128)
        transposed_gemm_1 = T.Buffer((4,), data=transposed_gemm, scope="local", align=16)
        transposed_gemm_1[0] = T.float32(0)
        transposed_gemm_1[1] = T.float32(0)
        transposed_gemm_1[2] = T.float32(0)
        transposed_gemm_1[3] = T.float32(0)
        for k_outer_outer in range(2):
            cse_var_1: T.int32 = k_outer_outer * 256
            threadIdx_x_1 = T.env_thread("threadIdx.x")
            A_shared_1 = T.Buffer((8192,), data=A_shared, scope="shared")
            A_1 = T.Buffer((114688,), data=A.data)
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 128] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 128]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 256] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 512]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 384] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 640]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 512] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 1024]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 640] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 1152]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 768] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 1536]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 896] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 1664]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 1024] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 2048]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 1152] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 2176]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 1280] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 2560]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 1408] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 2688]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 1536] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 3072]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 1664] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 3200]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 1792] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 3584]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 1920] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 3712]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 2048] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 4096]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 2176] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 4224]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 2304] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 4608]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 2432] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 4736]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 2560] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 5120]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 2688] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 5248]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 2816] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 5632]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 2944] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 5760]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 3072] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 6144]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 3200] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 6272]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 3328] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 6656]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 3456] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 6784]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 3584] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 7168]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 3712] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 7296]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 3840] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 7680]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 3968] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 7808]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 4096] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 8192]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 4224] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 8320]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 4352] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 8704]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 4480] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 8832]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 4608] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 9216]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 4736] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 9344]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 4864] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 9728]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 4992] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 9856]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 5120] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 10240]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 5248] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 10368]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 5376] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 10752]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 5504] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 10880]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 5632] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 11264]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 5760] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 11392]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 5888] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 11776]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 6016] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 11904]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 6144] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 12288]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 6272] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 12416]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 6400] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 12800]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 6528] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 12928]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 6656] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 13312]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 6784] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 13440]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 6912] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 13824]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 7040] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 13952]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 7168] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 14336]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 7296] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 14464]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 7424] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 14848]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 7552] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 14976]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 7680] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 15360]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 7808] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 15488]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 7936] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 15872]
            with T.launch_thread(threadIdx_x_1, 128):
                A_shared_1[threadIdx_x_1 + 8064] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 + 16000]
            threadIdx_x_2 = T.env_thread("threadIdx.x")
            B_shared_1 = T.Buffer((4096,), data=B_shared, scope="shared")
            B_1 = T.Buffer((114688,), data=B.data)
            with T.launch_thread(threadIdx_x_2, 128):
                B_shared_1[threadIdx_x_2 * 4:threadIdx_x_2 * 4 + 4] = B_1[blockIdx_x % 14 * 8192 + threadIdx_x_2 // 64 * 512 + cse_var_1 + threadIdx_x_2 % 64 * 4:blockIdx_x % 14 * 8192 + threadIdx_x_2 // 64 * 512 + cse_var_1 + threadIdx_x_2 % 64 * 4 + 4]
            with T.launch_thread(threadIdx_x_2, 128):
                B_shared_1[threadIdx_x_2 * 4 + 512:threadIdx_x_2 * 4 + 512 + 4] = B_1[blockIdx_x % 14 * 8192 + threadIdx_x_2 // 64 * 512 + cse_var_1 + threadIdx_x_2 % 64 * 4 + 1024:blockIdx_x % 14 * 8192 + threadIdx_x_2 // 64 * 512 + cse_var_1 + threadIdx_x_2 % 64 * 4 + 1024 + 4]
            with T.launch_thread(threadIdx_x_2, 128):
                B_shared_1[threadIdx_x_2 * 4 + 1024:threadIdx_x_2 * 4 + 1024 + 4] = B_1[blockIdx_x % 14 * 8192 + threadIdx_x_2 // 64 * 512 + cse_var_1 + threadIdx_x_2 % 64 * 4 + 2048:blockIdx_x % 14 * 8192 + threadIdx_x_2 // 64 * 512 + cse_var_1 + threadIdx_x_2 % 64 * 4 + 2048 + 4]
            with T.launch_thread(threadIdx_x_2, 128):
                B_shared_1[threadIdx_x_2 * 4 + 1536:threadIdx_x_2 * 4 + 1536 + 4] = B_1[blockIdx_x % 14 * 8192 + threadIdx_x_2 // 64 * 512 + cse_var_1 + threadIdx_x_2 % 64 * 4 + 3072:blockIdx_x % 14 * 8192 + threadIdx_x_2 // 64 * 512 + cse_var_1 + threadIdx_x_2 % 64 * 4 + 3072 + 4]
            with T.launch_thread(threadIdx_x_2, 128):
                B_shared_1[threadIdx_x_2 * 4 + 2048:threadIdx_x_2 * 4 + 2048 + 4] = B_1[blockIdx_x % 14 * 8192 + threadIdx_x_2 // 64 * 512 + cse_var_1 + threadIdx_x_2 % 64 * 4 + 4096:blockIdx_x % 14 * 8192 + threadIdx_x_2 // 64 * 512 + cse_var_1 + threadIdx_x_2 % 64 * 4 + 4096 + 4]
            with T.launch_thread(threadIdx_x_2, 128):
                B_shared_1[threadIdx_x_2 * 4 + 2560:threadIdx_x_2 * 4 + 2560 + 4] = B_1[blockIdx_x % 14 * 8192 + threadIdx_x_2 // 64 * 512 + cse_var_1 + threadIdx_x_2 % 64 * 4 + 5120:blockIdx_x % 14 * 8192 + threadIdx_x_2 // 64 * 512 + cse_var_1 + threadIdx_x_2 % 64 * 4 + 5120 + 4]
            with T.launch_thread(threadIdx_x_2, 128):
                B_shared_1[threadIdx_x_2 * 4 + 3072:threadIdx_x_2 * 4 + 3072 + 4] = B_1[blockIdx_x % 14 * 8192 + threadIdx_x_2 // 64 * 512 + cse_var_1 + threadIdx_x_2 % 64 * 4 + 6144:blockIdx_x % 14 * 8192 + threadIdx_x_2 // 64 * 512 + cse_var_1 + threadIdx_x_2 % 64 * 4 + 6144 + 4]
            with T.launch_thread(threadIdx_x_2, 128):
                B_shared_1[threadIdx_x_2 * 4 + 3584:threadIdx_x_2 * 4 + 3584 + 4] = B_1[blockIdx_x % 14 * 8192 + threadIdx_x_2 // 64 * 512 + cse_var_1 + threadIdx_x_2 % 64 * 4 + 7168:blockIdx_x % 14 * 8192 + threadIdx_x_2 // 64 * 512 + cse_var_1 + threadIdx_x_2 % 64 * 4 + 7168 + 4]
            for k_outer_inner in range(256):
                transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 16 * 1024 + k_outer_inner] * B_shared_1[threadIdx_x % 16 * 256 + k_outer_inner]
                transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 16 * 1024 + k_outer_inner + 256] * B_shared_1[threadIdx_x % 16 * 256 + k_outer_inner]
                transposed_gemm_1[2] = transposed_gemm_1[2] + A_shared_1[threadIdx_x // 16 * 1024 + k_outer_inner + 512] * B_shared_1[threadIdx_x % 16 * 256 + k_outer_inner]
                transposed_gemm_1[3] = transposed_gemm_1[3] + A_shared_1[threadIdx_x // 16 * 1024 + k_outer_inner + 768] * B_shared_1[threadIdx_x % 16 * 256 + k_outer_inner]
        for i_inner in range(4):
            out_1 = T.Buffer((50176,), data=out.data)
            C_1 = T.Buffer((50176,), data=C.data)
            out_1[blockIdx_x // 14 * 7168 + threadIdx_x // 16 * 896 + i_inner * 224 + blockIdx_x % 14 * 16 + threadIdx_x % 16] = transposed_gemm_1[i_inner] + C_1[blockIdx_x // 14 * 7168 + threadIdx_x // 16 * 896 + i_inner * 224 + blockIdx_x % 14 * 16 + threadIdx_x % 16]
Equivalent python schedule:
transposed_gemm_i, transposed_gemm_j, transposed_gemm_k = tuple(transposed_gemm.op.axis) + tuple(transposed_gemm.op.reduce_axis)
out_i, out_j = tuple(out.op.axis) + tuple(out.op.reduce_axis)
transposed_gemm_i_o_i, transposed_gemm_i_i = s[transposed_gemm].split(transposed_gemm_i, factor=2)
transposed_gemm_i_o_o_i, transposed_gemm_i_o_i = s[transposed_gemm].split(transposed_gemm_i_o_i, factor=2)
transposed_gemm_i_o_o_o_i, transposed_gemm_i_o_o_i = s[transposed_gemm].split(transposed_gemm_i_o_o_i, factor=8)
transposed_gemm_i_o_o_o_o, transposed_gemm_i_o_o_o_i = s[transposed_gemm].split(transposed_gemm_i_o_o_o_i, factor=1)
transposed_gemm_j_o_i, transposed_gemm_j_i = s[transposed_gemm].split(transposed_gemm_j, factor=1)
transposed_gemm_j_o_o_i, transposed_gemm_j_o_i = s[transposed_gemm].split(transposed_gemm_j_o_i, factor=1)
transposed_gemm_j_o_o_o_i, transposed_gemm_j_o_o_i = s[transposed_gemm].split(transposed_gemm_j_o_o_i, factor=16)
transposed_gemm_j_o_o_o_o, transposed_gemm_j_o_o_o_i = s[transposed_gemm].split(transposed_gemm_j_o_o_o_i, factor=1)
transposed_gemm_k_o_i, transposed_gemm_k_i = s[transposed_gemm].split(transposed_gemm_k, factor=1)
transposed_gemm_k_o_o, transposed_gemm_k_o_i = s[transposed_gemm].split(transposed_gemm_k_o_i, factor=256)
s[transposed_gemm].reorder(transposed_gemm_i_o_o_o_o, transposed_gemm_j_o_o_o_o, transposed_gemm_i_o_o_o_i, transposed_gemm_j_o_o_o_i, transposed_gemm_i_o_o_i, transposed_gemm_j_o_o_i, transposed_gemm_k_o_o, transposed_gemm_k_o_i, transposed_gemm_i_o_i, transposed_gemm_j_o_i, transposed_gemm_k_i, transposed_gemm_i_i, transposed_gemm_j_i)
out_i_o_i, out_i_i = s[out].split(out_i, factor=4)
out_i_o_o_i, out_i_o_i = s[out].split(out_i_o_i, factor=8)
out_i_o_o_o, out_i_o_o_i = s[out].split(out_i_o_o_i, factor=1)
out_j_o_i, out_j_i = s[out].split(out_j, factor=1)
out_j_o_o_i, out_j_o_i = s[out].split(out_j_o_i, factor=16)
out_j_o_o_o, out_j_o_o_i = s[out].split(out_j_o_o_i, factor=1)
s[out].reorder(out_i_o_o_o, out_j_o_o_o, out_i_o_o_i, out_j_o_o_i, out_i_o_i, out_j_o_i, out_i_i, out_j_i)
s[transposed_gemm].compute_at(s[out], out_j_o_i)
B_shared = s.cache_read(B, "shared", [transposed_gemm])
B_shared_ax0, B_shared_ax1 = tuple(B_shared.op.axis)
s[B_shared].compute_at(s[transposed_gemm], transposed_gemm_k_o_o)
A_shared = s.cache_read(A, "shared", [transposed_gemm])
A_shared_ax0, A_shared_ax1 = tuple(A_shared.op.axis)
s[A_shared].compute_at(s[transposed_gemm], transposed_gemm_k_o_o)
out_i_o_o_o_j_o_o_o_fused = s[out].fuse(out_i_o_o_o, out_j_o_o_o)
s[out].bind(out_i_o_o_o_j_o_o_o_fused, te.thread_axis("blockIdx.x"))
out_i_o_o_i_j_o_o_i_fused = s[out].fuse(out_i_o_o_i, out_j_o_o_i)
s[out].bind(out_i_o_o_i_j_o_o_i_fused, te.thread_axis("vthread"))
out_i_o_i_j_o_i_fused = s[out].fuse(out_i_o_i, out_j_o_i)
s[out].bind(out_i_o_i_j_o_i_fused, te.thread_axis("threadIdx.x"))
B_shared_ax0_ax1_fused = s[B_shared].fuse(B_shared_ax0, B_shared_ax1)
B_shared_ax0_ax1_fused_o, B_shared_ax0_ax1_fused_i = s[B_shared].split(B_shared_ax0_ax1_fused, factor=4)
s[B_shared].vectorize(B_shared_ax0_ax1_fused_i)
B_shared_ax0_ax1_fused_o_o, B_shared_ax0_ax1_fused_o_i = s[B_shared].split(B_shared_ax0_ax1_fused_o, factor=128)
s[B_shared].bind(B_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
A_shared_ax0_ax1_fused = s[A_shared].fuse(A_shared_ax0, A_shared_ax1)
A_shared_ax0_ax1_fused_o, A_shared_ax0_ax1_fused_i = s[A_shared].split(A_shared_ax0_ax1_fused, factor=1)
s[A_shared].vectorize(A_shared_ax0_ax1_fused_i)
A_shared_ax0_ax1_fused_o_o, A_shared_ax0_ax1_fused_o_i = s[A_shared].split(A_shared_ax0_ax1_fused_o, factor=128)
s[A_shared].bind(A_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
s[transposed_gemm].pragma(transposed_gemm_i_o_o_o_o, "auto_unroll_max_step", 512)
s[transposed_gemm].pragma(transposed_gemm_i_o_o_o_o, "unroll_explicit", True)

Equivalent CUDA code:

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ A, float* __restrict__ B, float* __restrict__ C, float* __restrict__ out) {
  float transposed_gemm[4];
  __shared__ float A_shared[8192];
  __shared__ float B_shared[4096];
  transposed_gemm[0] = 0.000000e+00f;
  transposed_gemm[1] = 0.000000e+00f;
  transposed_gemm[2] = 0.000000e+00f;
  transposed_gemm[3] = 0.000000e+00f;
  for (int k_outer_outer = 0; k_outer_outer < 2; ++k_outer_outer) {
    __syncthreads();
    A_shared[((int)threadIdx.x)] = A[((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x))];
    A_shared[(((int)threadIdx.x) + 128)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 128)];
    A_shared[(((int)threadIdx.x) + 256)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 512)];
    A_shared[(((int)threadIdx.x) + 384)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 640)];
    A_shared[(((int)threadIdx.x) + 512)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 1024)];
    A_shared[(((int)threadIdx.x) + 640)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 1152)];
    A_shared[(((int)threadIdx.x) + 768)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 1536)];
    A_shared[(((int)threadIdx.x) + 896)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 1664)];
    A_shared[(((int)threadIdx.x) + 1024)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 2048)];
    A_shared[(((int)threadIdx.x) + 1152)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 2176)];
    A_shared[(((int)threadIdx.x) + 1280)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 2560)];
    A_shared[(((int)threadIdx.x) + 1408)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 2688)];
    A_shared[(((int)threadIdx.x) + 1536)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 3072)];
    A_shared[(((int)threadIdx.x) + 1664)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 3200)];
    A_shared[(((int)threadIdx.x) + 1792)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 3584)];
    A_shared[(((int)threadIdx.x) + 1920)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 3712)];
    A_shared[(((int)threadIdx.x) + 2048)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 4096)];
    A_shared[(((int)threadIdx.x) + 2176)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 4224)];
    A_shared[(((int)threadIdx.x) + 2304)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 4608)];
    A_shared[(((int)threadIdx.x) + 2432)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 4736)];
    A_shared[(((int)threadIdx.x) + 2560)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 5120)];
    A_shared[(((int)threadIdx.x) + 2688)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 5248)];
    A_shared[(((int)threadIdx.x) + 2816)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 5632)];
    A_shared[(((int)threadIdx.x) + 2944)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 5760)];
    A_shared[(((int)threadIdx.x) + 3072)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 6144)];
    A_shared[(((int)threadIdx.x) + 3200)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 6272)];
    A_shared[(((int)threadIdx.x) + 3328)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 6656)];
    A_shared[(((int)threadIdx.x) + 3456)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 6784)];
    A_shared[(((int)threadIdx.x) + 3584)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 7168)];
    A_shared[(((int)threadIdx.x) + 3712)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 7296)];
    A_shared[(((int)threadIdx.x) + 3840)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 7680)];
    A_shared[(((int)threadIdx.x) + 3968)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 7808)];
    A_shared[(((int)threadIdx.x) + 4096)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 8192)];
    A_shared[(((int)threadIdx.x) + 4224)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 8320)];
    A_shared[(((int)threadIdx.x) + 4352)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 8704)];
    A_shared[(((int)threadIdx.x) + 4480)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 8832)];
    A_shared[(((int)threadIdx.x) + 4608)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 9216)];
    A_shared[(((int)threadIdx.x) + 4736)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 9344)];
    A_shared[(((int)threadIdx.x) + 4864)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 9728)];
    A_shared[(((int)threadIdx.x) + 4992)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 9856)];
    A_shared[(((int)threadIdx.x) + 5120)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 10240)];
    A_shared[(((int)threadIdx.x) + 5248)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 10368)];
    A_shared[(((int)threadIdx.x) + 5376)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 10752)];
    A_shared[(((int)threadIdx.x) + 5504)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 10880)];
    A_shared[(((int)threadIdx.x) + 5632)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 11264)];
    A_shared[(((int)threadIdx.x) + 5760)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 11392)];
    A_shared[(((int)threadIdx.x) + 5888)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 11776)];
    A_shared[(((int)threadIdx.x) + 6016)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 11904)];
    A_shared[(((int)threadIdx.x) + 6144)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 12288)];
    A_shared[(((int)threadIdx.x) + 6272)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 12416)];
    A_shared[(((int)threadIdx.x) + 6400)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 12800)];
    A_shared[(((int)threadIdx.x) + 6528)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 12928)];
    A_shared[(((int)threadIdx.x) + 6656)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 13312)];
    A_shared[(((int)threadIdx.x) + 6784)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 13440)];
    A_shared[(((int)threadIdx.x) + 6912)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 13824)];
    A_shared[(((int)threadIdx.x) + 7040)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 13952)];
    A_shared[(((int)threadIdx.x) + 7168)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 14336)];
    A_shared[(((int)threadIdx.x) + 7296)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 14464)];
    A_shared[(((int)threadIdx.x) + 7424)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 14848)];
    A_shared[(((int)threadIdx.x) + 7552)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 14976)];
    A_shared[(((int)threadIdx.x) + 7680)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 15360)];
    A_shared[(((int)threadIdx.x) + 7808)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 15488)];
    A_shared[(((int)threadIdx.x) + 7936)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 15872)];
    A_shared[(((int)threadIdx.x) + 8064)] = A[(((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 16000)];
    *(float4*)(B_shared + (((int)threadIdx.x) * 4)) = *(float4*)(B + (((((((int)blockIdx.x) % 14) * 8192) + ((((int)threadIdx.x) >> 6) * 512)) + (k_outer_outer * 256)) + ((((int)threadIdx.x) & 63) * 4)));
    *(float4*)(B_shared + ((((int)threadIdx.x) * 4) + 512)) = *(float4*)(B + ((((((((int)blockIdx.x) % 14) * 8192) + ((((int)threadIdx.x) >> 6) * 512)) + (k_outer_outer * 256)) + ((((int)threadIdx.x) & 63) * 4)) + 1024));
    *(float4*)(B_shared + ((((int)threadIdx.x) * 4) + 1024)) = *(float4*)(B + ((((((((int)blockIdx.x) % 14) * 8192) + ((((int)threadIdx.x) >> 6) * 512)) + (k_outer_outer * 256)) + ((((int)threadIdx.x) & 63) * 4)) + 2048));
    *(float4*)(B_shared + ((((int)threadIdx.x) * 4) + 1536)) = *(float4*)(B + ((((((((int)blockIdx.x) % 14) * 8192) + ((((int)threadIdx.x) >> 6) * 512)) + (k_outer_outer * 256)) + ((((int)threadIdx.x) & 63) * 4)) + 3072));
    *(float4*)(B_shared + ((((int)threadIdx.x) * 4) + 2048)) = *(float4*)(B + ((((((((int)blockIdx.x) % 14) * 8192) + ((((int)threadIdx.x) >> 6) * 512)) + (k_outer_outer * 256)) + ((((int)threadIdx.x) & 63) * 4)) + 4096));
    *(float4*)(B_shared + ((((int)threadIdx.x) * 4) + 2560)) = *(float4*)(B + ((((((((int)blockIdx.x) % 14) * 8192) + ((((int)threadIdx.x) >> 6) * 512)) + (k_outer_outer * 256)) + ((((int)threadIdx.x) & 63) * 4)) + 5120));
    *(float4*)(B_shared + ((((int)threadIdx.x) * 4) + 3072)) = *(float4*)(B + ((((((((int)blockIdx.x) % 14) * 8192) + ((((int)threadIdx.x) >> 6) * 512)) + (k_outer_outer * 256)) + ((((int)threadIdx.x) & 63) * 4)) + 6144));
    *(float4*)(B_shared + ((((int)threadIdx.x) * 4) + 3584)) = *(float4*)(B + ((((((((int)blockIdx.x) % 14) * 8192) + ((((int)threadIdx.x) >> 6) * 512)) + (k_outer_outer * 256)) + ((((int)threadIdx.x) & 63) * 4)) + 7168));
    __syncthreads();
    for (int k_outer_inner = 0; k_outer_inner < 256; ++k_outer_inner) {
      transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 4) * 1024) + k_outer_inner)] * B_shared[(((((int)threadIdx.x) & 15) * 256) + k_outer_inner)]));
      transposed_gemm[1] = (transposed_gemm[1] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + k_outer_inner) + 256)] * B_shared[(((((int)threadIdx.x) & 15) * 256) + k_outer_inner)]));
      transposed_gemm[2] = (transposed_gemm[2] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + k_outer_inner) + 512)] * B_shared[(((((int)threadIdx.x) & 15) * 256) + k_outer_inner)]));
      transposed_gemm[3] = (transposed_gemm[3] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + k_outer_inner) + 768)] * B_shared[(((((int)threadIdx.x) & 15) * 256) + k_outer_inner)]));
    }
  }
  for (int i_inner = 0; i_inner < 4; ++i_inner) {
    out[((((((((int)blockIdx.x) / 14) * 7168) + ((((int)threadIdx.x) >> 4) * 896)) + (i_inner * 224)) + ((((int)blockIdx.x) % 14) * 16)) + (((int)threadIdx.x) & 15))] = (transposed_gemm[i_inner] + C[((((((((int)blockIdx.x) / 14) * 7168) + ((((int)threadIdx.x) >> 4) * 896)) + (i_inner * 224)) + ((((int)blockIdx.x) % 14) * 16)) + (((int)threadIdx.x) & 15))]);
  }
}


