----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Generate Sketches		#s: 1
Sample Initial Population	#s: 109	fail_ct: 1939	Time elapsed: 3.07
GA Iter: 0	Max score: 0.9996	Min score: 0.0045	#Pop: 109	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9999	Min score: 0.9835	#Pop: 128	#M+: 1389	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 34.28
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.23 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 93	fail_ct: 1955	Time elapsed: 1.97
GA Iter: 0	Max score: 0.9937	Min score: 0.0024	#Pop: 93	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9996	Min score: 0.9782	#Pop: 128	#M+: 1388	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 33.89
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.24 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 111	fail_ct: 1937	Time elapsed: 1.95
GA Iter: 0	Max score: 0.7533	Min score: 0.0707	#Pop: 111	#M+: 0	#M-: 0
GA Iter: 4	Max score: 1.0194	Min score: 1.0007	#Pop: 128	#M+: 1395	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 33.61
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.86 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 105	fail_ct: 1943	Time elapsed: 1.91
GA Iter: 0	Max score: 0.6601	Min score: 0.0219	#Pop: 105	#M+: 0	#M-: 0
GA Iter: 4	Max score: 1.0070	Min score: 0.9520	#Pop: 128	#M+: 1405	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.40
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.63 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 109	fail_ct: 1939	Time elapsed: 1.99
GA Iter: 0	Max score: 0.9493	Min score: 0.0608	#Pop: 109	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9876	Min score: 0.9730	#Pop: 128	#M+: 1400	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 31.39
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.96 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 124	fail_ct: 1924	Time elapsed: 2.01
GA Iter: 0	Max score: 0.8607	Min score: -0.0101	#Pop: 124	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9971	Min score: 0.9178	#Pop: 128	#M+: 1385	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 31.32
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.64 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 114	fail_ct: 1934	Time elapsed: 2.11
GA Iter: 0	Max score: 0.8420	Min score: 0.0513	#Pop: 114	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9995	Min score: 0.9237	#Pop: 128	#M+: 1399	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 31.23
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.84 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 121	fail_ct: 1927	Time elapsed: 1.99
GA Iter: 0	Max score: 0.5165	Min score: -0.0239	#Pop: 121	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9662	Min score: 0.8176	#Pop: 128	#M+: 1386	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 31.12
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.79 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 118	fail_ct: 1930	Time elapsed: 1.96
GA Iter: 0	Max score: 0.7017	Min score: -0.0031	#Pop: 118	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9975	Min score: 0.9079	#Pop: 128	#M+: 1402	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 30.73
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.23 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 137	fail_ct: 1911	Time elapsed: 2.07
GA Iter: 0	Max score: 0.4649	Min score: 0.0421	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9564	Min score: 0.8109	#Pop: 128	#M+: 1375	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 30.64
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.08 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 108	fail_ct: 1940	Time elapsed: 1.95
GA Iter: 0	Max score: 0.6249	Min score: -0.0237	#Pop: 108	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9525	Min score: 0.7950	#Pop: 128	#M+: 1399	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 30.23
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.97 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 135	fail_ct: 1913	Time elapsed: 1.98
GA Iter: 0	Max score: 0.6320	Min score: 0.0303	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9439	Min score: 0.7702	#Pop: 128	#M+: 1402	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 30.66
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.88 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 117	fail_ct: 1931	Time elapsed: 1.90
GA Iter: 0	Max score: 0.3883	Min score: -0.0405	#Pop: 117	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9436	Min score: 0.6995	#Pop: 128	#M+: 1393	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 30.55
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.12 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 107	fail_ct: 1941	Time elapsed: 1.85
GA Iter: 0	Max score: 0.3434	Min score: -0.0357	#Pop: 107	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9467	Min score: 0.6763	#Pop: 128	#M+: 1403	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 30.45
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.03 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 107	fail_ct: 1941	Time elapsed: 1.94
GA Iter: 0	Max score: 0.4034	Min score: -0.0242	#Pop: 107	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9482	Min score: 0.7289	#Pop: 128	#M+: 1384	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 30.43
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.27 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 100	fail_ct: 1948	Time elapsed: 1.95
GA Iter: 0	Max score: 0.3782	Min score: 0.0141	#Pop: 100	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9225	Min score: 0.6951	#Pop: 128	#M+: 1398	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 30.48
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Done ]
----------------------------------------------------------------------
arc=sm_80
Computational DAG:
A = PLACEHOLDER [120, 512]
B = PLACEHOLDER [120, 512]
transposed_gemm(i, j) += (A[i, k]*B[j, k])
C = PLACEHOLDER [120, 120]
out(i, j) = (transposed_gemm[i, j] + C[i, j])

Lowered TIR:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((120, 512), "float32"), B: T.Buffer((120, 512), "float32"), C: T.Buffer((120, 120), "float32"), out: T.Buffer((120, 120), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "global_symbol": "main", "tir.noalias": T.bool(True)})
        blockIdx_x = T.launch_thread("blockIdx.x", 300)
        transposed_gemm = T.allocate([1], "float32", "local")
        A_shared = T.allocate([192], "float32", "shared")
        B_shared = T.allocate([64], "float32", "shared")
        threadIdx_x = T.launch_thread("threadIdx.x", 48)
        transposed_gemm_1 = T.Buffer((1,), data=transposed_gemm, scope="local", align=4)
        transposed_gemm_1[0] = T.float32(0)
        threadIdx_x_1 = T.env_thread("threadIdx.x")
        A_shared_1 = T.Buffer((192,), data=A_shared, scope="shared")
        A_1 = T.Buffer((61440,), data=A.data)
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 4]
        threadIdx_x_2 = T.env_thread("threadIdx.x")
        B_shared_1 = T.Buffer((64,), data=B_shared, scope="shared")
        B_1 = T.Buffer((61440,), data=B.data)
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 1536]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 16:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 16 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 16]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 1552]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 32:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 32 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 32]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 1568]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 48:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 48 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 48]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 1584]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 64:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 64 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 64]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 1600]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 80:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 80 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 80]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 1616]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 96:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 96 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 96]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 1632]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 112:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 112 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 112]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 1648]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 128:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 128 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 128]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 1664]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 144:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 144 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 144]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 1680]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 160:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 160 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 160]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 1696]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 176:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 176 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 176]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 1712]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 192:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 192 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 192]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 1728]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 208:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 208 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 208]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 1744]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 224:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 224 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 224]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 1760]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 240:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 240 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 240]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 1776]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 256:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 256 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 256]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 1792]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 272:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 272 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 272]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 1808]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 288:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 288 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 288]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 1824]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 304:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 304 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 304]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 1840]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 320:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 320 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 320]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 1856]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 336:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 336 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 336]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 1872]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 352:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 352 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 352]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 1888]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 368:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 368 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 368]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 1904]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 384:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 384 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 384]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 1920]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 400:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 400 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 400]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 1936]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 416:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 416 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 416]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 1952]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 432:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 432 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 432]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 1968]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 448:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 448 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 448]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 1984]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 464:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 464 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 464]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 2000]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 480:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 480 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 480]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 2016]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        with T.launch_thread(threadIdx_x_1, 48):
            A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 496:blockIdx_x // 30 * 6144 + threadIdx_x_1 // 4 * 512 + threadIdx_x_1 % 4 * 4 + 496 + 4]
        with T.launch_thread(threadIdx_x_2, 48):
            B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 // 16 * 512 + threadIdx_x_2 % 16 + 496]
        with T.launch_thread(threadIdx_x_2, 48):
            if T.likely(threadIdx_x_2 < 16):
                B_shared_1[threadIdx_x_2 + 48] = B_1[blockIdx_x % 30 * 2048 + threadIdx_x_2 + 2032]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16] * B_shared_1[threadIdx_x % 4 * 16]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 1] * B_shared_1[threadIdx_x % 4 * 16 + 1]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 2] * B_shared_1[threadIdx_x % 4 * 16 + 2]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 3] * B_shared_1[threadIdx_x % 4 * 16 + 3]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 4] * B_shared_1[threadIdx_x % 4 * 16 + 4]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 5] * B_shared_1[threadIdx_x % 4 * 16 + 5]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 6] * B_shared_1[threadIdx_x % 4 * 16 + 6]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 7] * B_shared_1[threadIdx_x % 4 * 16 + 7]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 8] * B_shared_1[threadIdx_x % 4 * 16 + 8]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 9] * B_shared_1[threadIdx_x % 4 * 16 + 9]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 10] * B_shared_1[threadIdx_x % 4 * 16 + 10]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 11] * B_shared_1[threadIdx_x % 4 * 16 + 11]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 12] * B_shared_1[threadIdx_x % 4 * 16 + 12]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 13] * B_shared_1[threadIdx_x % 4 * 16 + 13]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 14] * B_shared_1[threadIdx_x % 4 * 16 + 14]
        transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 4 * 16 + 15] * B_shared_1[threadIdx_x % 4 * 16 + 15]
        out_1 = T.Buffer((14400,), data=out.data)
        C_1 = T.Buffer((14400,), data=C.data)
        out_1[blockIdx_x // 30 * 1440 + threadIdx_x // 4 * 120 + blockIdx_x % 30 * 4 + threadIdx_x % 4] = transposed_gemm_1[0] + C_1[blockIdx_x // 30 * 1440 + threadIdx_x // 4 * 120 + blockIdx_x % 30 * 4 + threadIdx_x % 4]
Equivalent python schedule:
transposed_gemm_i, transposed_gemm_j, transposed_gemm_k = tuple(transposed_gemm.op.axis) + tuple(transposed_gemm.op.reduce_axis)
out_i, out_j = tuple(out.op.axis) + tuple(out.op.reduce_axis)
transposed_gemm_i_o_i, transposed_gemm_i_i = s[transposed_gemm].split(transposed_gemm_i, factor=1)
transposed_gemm_i_o_o_i, transposed_gemm_i_o_i = s[transposed_gemm].split(transposed_gemm_i_o_i, factor=1)
transposed_gemm_i_o_o_o_i, transposed_gemm_i_o_o_i = s[transposed_gemm].split(transposed_gemm_i_o_o_i, factor=12)
transposed_gemm_i_o_o_o_o, transposed_gemm_i_o_o_o_i = s[transposed_gemm].split(transposed_gemm_i_o_o_o_i, factor=1)
transposed_gemm_j_o_i, transposed_gemm_j_i = s[transposed_gemm].split(transposed_gemm_j, factor=1)
transposed_gemm_j_o_o_i, transposed_gemm_j_o_i = s[transposed_gemm].split(transposed_gemm_j_o_i, factor=1)
transposed_gemm_j_o_o_o_i, transposed_gemm_j_o_o_i = s[transposed_gemm].split(transposed_gemm_j_o_o_i, factor=4)
transposed_gemm_j_o_o_o_o, transposed_gemm_j_o_o_o_i = s[transposed_gemm].split(transposed_gemm_j_o_o_o_i, factor=1)
transposed_gemm_k_o_i, transposed_gemm_k_i = s[transposed_gemm].split(transposed_gemm_k, factor=4)
transposed_gemm_k_o_o, transposed_gemm_k_o_i = s[transposed_gemm].split(transposed_gemm_k_o_i, factor=4)
s[transposed_gemm].reorder(transposed_gemm_i_o_o_o_o, transposed_gemm_j_o_o_o_o, transposed_gemm_i_o_o_o_i, transposed_gemm_j_o_o_o_i, transposed_gemm_i_o_o_i, transposed_gemm_j_o_o_i, transposed_gemm_k_o_o, transposed_gemm_k_o_i, transposed_gemm_i_o_i, transposed_gemm_j_o_i, transposed_gemm_k_i, transposed_gemm_i_i, transposed_gemm_j_i)
out_i_o_i, out_i_i = s[out].split(out_i, factor=1)
out_i_o_o_i, out_i_o_i = s[out].split(out_i_o_i, factor=12)
out_i_o_o_o, out_i_o_o_i = s[out].split(out_i_o_o_i, factor=1)
out_j_o_i, out_j_i = s[out].split(out_j, factor=1)
out_j_o_o_i, out_j_o_i = s[out].split(out_j_o_i, factor=4)
out_j_o_o_o, out_j_o_o_i = s[out].split(out_j_o_o_i, factor=1)
s[out].reorder(out_i_o_o_o, out_j_o_o_o, out_i_o_o_i, out_j_o_o_i, out_i_o_i, out_j_o_i, out_i_i, out_j_i)
s[transposed_gemm].compute_at(s[out], out_j_o_i)
B_shared = s.cache_read(B, "shared", [transposed_gemm])
B_shared_ax0, B_shared_ax1 = tuple(B_shared.op.axis)
s[B_shared].compute_at(s[transposed_gemm], transposed_gemm_k_o_o)
A_shared = s.cache_read(A, "shared", [transposed_gemm])
A_shared_ax0, A_shared_ax1 = tuple(A_shared.op.axis)
s[A_shared].compute_at(s[transposed_gemm], transposed_gemm_k_o_o)
out_i_o_o_o_j_o_o_o_fused = s[out].fuse(out_i_o_o_o, out_j_o_o_o)
s[out].bind(out_i_o_o_o_j_o_o_o_fused, te.thread_axis("blockIdx.x"))
out_i_o_o_i_j_o_o_i_fused = s[out].fuse(out_i_o_o_i, out_j_o_o_i)
s[out].bind(out_i_o_o_i_j_o_o_i_fused, te.thread_axis("vthread"))
out_i_o_i_j_o_i_fused = s[out].fuse(out_i_o_i, out_j_o_i)
s[out].bind(out_i_o_i_j_o_i_fused, te.thread_axis("threadIdx.x"))
B_shared_ax0_ax1_fused = s[B_shared].fuse(B_shared_ax0, B_shared_ax1)
B_shared_ax0_ax1_fused_o, B_shared_ax0_ax1_fused_i = s[B_shared].split(B_shared_ax0_ax1_fused, factor=1)
s[B_shared].vectorize(B_shared_ax0_ax1_fused_i)
B_shared_ax0_ax1_fused_o_o, B_shared_ax0_ax1_fused_o_i = s[B_shared].split(B_shared_ax0_ax1_fused_o, factor=48)
s[B_shared].bind(B_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
A_shared_ax0_ax1_fused = s[A_shared].fuse(A_shared_ax0, A_shared_ax1)
A_shared_ax0_ax1_fused_o, A_shared_ax0_ax1_fused_i = s[A_shared].split(A_shared_ax0_ax1_fused, factor=4)
s[A_shared].vectorize(A_shared_ax0_ax1_fused_i)
A_shared_ax0_ax1_fused_o_o, A_shared_ax0_ax1_fused_o_i = s[A_shared].split(A_shared_ax0_ax1_fused_o, factor=48)
s[A_shared].bind(A_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
s[transposed_gemm].pragma(transposed_gemm_i_o_o_o_o, "auto_unroll_max_step", 1024)
s[transposed_gemm].pragma(transposed_gemm_i_o_o_o_o, "unroll_explicit", True)

Equivalent CUDA code:

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(48) default_function_kernel(float* __restrict__ A, float* __restrict__ B, float* __restrict__ C, float* __restrict__ out) {
  float transposed_gemm[1];
  __shared__ float A_shared[192];
  __shared__ float B_shared[64];
  transposed_gemm[0] = 0.000000e+00f;
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + ((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)));
  B_shared[((int)threadIdx.x)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15))];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 1536)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 16));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 16)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 1552)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 32));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 32)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 1568)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 48));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 48)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 1584)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 64));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 64)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 1600)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 80));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 80)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 1616)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 96));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 96)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 1632)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 112));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 112)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 1648)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 128));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 128)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 1664)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 144));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 144)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 1680)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 160));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 160)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 1696)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 176));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 176)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 1712)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 192));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 192)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 1728)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 208));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 208)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 1744)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 224));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 224)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 1760)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 240));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 240)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 1776)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 256));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 256)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 1792)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 272));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 272)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 1808)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 288));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 288)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 1824)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 304));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 304)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 1840)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 320));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 320)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 1856)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 336));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 336)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 1872)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 352));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 352)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 1888)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 368));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 368)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 1904)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 384));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 384)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 1920)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 400));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 400)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 1936)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 416));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 416)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 1952)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 432));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 432)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 1968)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 448));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 448)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 1984)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 464));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 464)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 2000)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 480));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 480)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 2016)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  __syncthreads();
  *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + (((((((int)blockIdx.x) / 30) * 6144) + ((((int)threadIdx.x) >> 2) * 512)) + ((((int)threadIdx.x) & 3) * 4)) + 496));
  B_shared[((int)threadIdx.x)] = B[(((((((int)blockIdx.x) % 30) * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)threadIdx.x) & 15)) + 496)];
  if (((int)threadIdx.x) < 16) {
    B_shared[(((int)threadIdx.x) + 48)] = B[((((((int)blockIdx.x) % 30) * 2048) + ((int)threadIdx.x)) + 2032)];
  }
  __syncthreads();
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((int)threadIdx.x) >> 2) * 16)] * B_shared[((((int)threadIdx.x) & 3) * 16)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 1)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 1)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 2)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 2)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 3)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 3)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 4)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 4)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 5)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 5)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 6)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 6)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 7)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 7)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 8)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 8)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 9)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 9)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 10)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 10)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 11)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 11)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 12)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 12)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 13)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 13)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 14)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 14)]));
  transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 2) * 16) + 15)] * B_shared[(((((int)threadIdx.x) & 3) * 16) + 15)]));
  out[(((((((int)blockIdx.x) / 30) * 1440) + ((((int)threadIdx.x) >> 2) * 120)) + ((((int)blockIdx.x) % 30) * 4)) + (((int)threadIdx.x) & 3))] = (transposed_gemm[0] + C[(((((((int)blockIdx.x) / 30) * 1440) + ((((int)threadIdx.x) >> 2) * 120)) + ((((int)blockIdx.x) % 30) * 4)) + (((int)threadIdx.x) & 3))]);
}


