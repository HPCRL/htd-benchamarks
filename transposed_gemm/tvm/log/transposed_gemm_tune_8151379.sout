----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Generate Sketches		#s: 1
Sample Initial Population	#s: 108	fail_ct: 1940	Time elapsed: 4.75
GA Iter: 0	Max score: 0.9990	Min score: 0.0068	#Pop: 108	#M+: 0	#M-: 0
GA Iter: 4	Max score: 1.0000	Min score: 0.9799	#Pop: 128	#M+: 1394	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 33.54
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 0.79 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 117	fail_ct: 1931	Time elapsed: 2.54
GA Iter: 0	Max score: 0.9962	Min score: 0.0506	#Pop: 117	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9996	Min score: 0.9794	#Pop: 128	#M+: 1388	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 33.82
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.10 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 127	fail_ct: 1921	Time elapsed: 2.45
GA Iter: 0	Max score: 0.9005	Min score: 0.0768	#Pop: 127	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9877	Min score: 0.9749	#Pop: 128	#M+: 1393	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 33.48
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.29 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 122	fail_ct: 1926	Time elapsed: 2.30
GA Iter: 0	Max score: 0.7114	Min score: 0.0488	#Pop: 122	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9918	Min score: 0.8031	#Pop: 128	#M+: 1392	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 33.41
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.55 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 129	fail_ct: 1919	Time elapsed: 2.32
GA Iter: 0	Max score: 0.9251	Min score: 0.0764	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9973	Min score: 0.8642	#Pop: 128	#M+: 1392	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.19
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.38 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 110	fail_ct: 1938	Time elapsed: 2.32
GA Iter: 0	Max score: 0.6837	Min score: 0.0161	#Pop: 110	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9432	Min score: 0.7462	#Pop: 128	#M+: 1392	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 31.70
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.65 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 115	fail_ct: 1933	Time elapsed: 2.24
GA Iter: 0	Max score: 0.6660	Min score: 0.0358	#Pop: 115	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9646	Min score: 0.7889	#Pop: 128	#M+: 1395	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 31.99
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.61 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 131	fail_ct: 1917	Time elapsed: 2.34
GA Iter: 0	Max score: 0.6116	Min score: 0.0374	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 1.0230	Min score: 0.8013	#Pop: 128	#M+: 1397	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.07
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.04 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 118	fail_ct: 1930	Time elapsed: 2.33
GA Iter: 0	Max score: 0.7077	Min score: -0.0178	#Pop: 118	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9904	Min score: 0.9309	#Pop: 128	#M+: 1385	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.33
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.84 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 113	fail_ct: 1935	Time elapsed: 2.34
GA Iter: 0	Max score: 0.7689	Min score: -0.0729	#Pop: 113	#M+: 0	#M-: 0
GA Iter: 4	Max score: 1.0145	Min score: 0.8592	#Pop: 128	#M+: 1399	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.29
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.14 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 104	fail_ct: 1944	Time elapsed: 2.23
GA Iter: 0	Max score: 0.6159	Min score: -0.1200	#Pop: 104	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9998	Min score: 0.8787	#Pop: 128	#M+: 1395	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.31
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.78 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 130	fail_ct: 1918	Time elapsed: 2.47
GA Iter: 0	Max score: 0.7661	Min score: -0.0770	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9650	Min score: 0.8866	#Pop: 128	#M+: 1383	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.39
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.81 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 142	fail_ct: 1906	Time elapsed: 2.47
GA Iter: 0	Max score: 0.6556	Min score: 0.0230	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9663	Min score: 0.8601	#Pop: 128	#M+: 1386	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.52
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.95 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 124	fail_ct: 1924	Time elapsed: 2.53
GA Iter: 0	Max score: 0.8370	Min score: -0.1814	#Pop: 124	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9818	Min score: 0.8743	#Pop: 128	#M+: 1388	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.52
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.24 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 122	fail_ct: 1926	Time elapsed: 2.24
GA Iter: 0	Max score: 0.7288	Min score: -0.1856	#Pop: 122	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9725	Min score: 0.8969	#Pop: 128	#M+: 1381	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.50
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.41 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 120	fail_ct: 1928	Time elapsed: 2.36
GA Iter: 0	Max score: 0.6688	Min score: -0.1622	#Pop: 120	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9560	Min score: 0.8988	#Pop: 128	#M+: 1378	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.48
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Done ]
----------------------------------------------------------------------
arc=sm_80
Computational DAG:
A = PLACEHOLDER [224, 1024]
B = PLACEHOLDER [224, 1024]
transposed_gemm(i, j) += (A[i, k]*B[j, k])
C = PLACEHOLDER [224, 224]
out(i, j) = (transposed_gemm[i, j] + C[i, j])

Lowered TIR:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((224, 1024), "float32"), B: T.Buffer((224, 1024), "float32"), C: T.Buffer((224, 224), "float32"), out: T.Buffer((224, 224), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "global_symbol": "main", "tir.noalias": T.bool(True)})
        blockIdx_x = T.launch_thread("blockIdx.x", 196)
        transposed_gemm = T.allocate([8], "float32", "local")
        A_shared = T.allocate([4096], "float32", "shared")
        B_shared = T.allocate([4096], "float32", "shared")
        threadIdx_x = T.launch_thread("threadIdx.x", 32)
        transposed_gemm_1 = T.Buffer((16,), data=transposed_gemm, scope="local", align=16)
        transposed_gemm_1[0] = T.float32(0)
        transposed_gemm_1[4] = T.float32(0)
        transposed_gemm_1[1] = T.float32(0)
        transposed_gemm_1[5] = T.float32(0)
        transposed_gemm_1[2] = T.float32(0)
        transposed_gemm_1[6] = T.float32(0)
        transposed_gemm_1[3] = T.float32(0)
        transposed_gemm_1[7] = T.float32(0)
        for k_outer_outer in range(4):
            cse_var_1: T.int32 = k_outer_outer * 256
            threadIdx_x_1 = T.env_thread("threadIdx.x")
            A_shared_1 = T.Buffer((4096,), data=A_shared, scope="shared")
            A_1 = T.Buffer((229376,), data=A.data)
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 128:threadIdx_x_1 * 4 + 128 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 128:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 128 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 256:threadIdx_x_1 * 4 + 256 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 1024:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 1024 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 384:threadIdx_x_1 * 4 + 384 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 1152:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 1152 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 512:threadIdx_x_1 * 4 + 512 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 2048:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 2048 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 640:threadIdx_x_1 * 4 + 640 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 2176:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 2176 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 768:threadIdx_x_1 * 4 + 768 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 3072:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 3072 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 896:threadIdx_x_1 * 4 + 896 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 3200:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 3200 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 1024:threadIdx_x_1 * 4 + 1024 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 4096:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 4096 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 1152:threadIdx_x_1 * 4 + 1152 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 4224:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 4224 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 1280:threadIdx_x_1 * 4 + 1280 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 5120:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 5120 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 1408:threadIdx_x_1 * 4 + 1408 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 5248:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 5248 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 1536:threadIdx_x_1 * 4 + 1536 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 6144:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 6144 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 1664:threadIdx_x_1 * 4 + 1664 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 6272:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 6272 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 1792:threadIdx_x_1 * 4 + 1792 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 7168:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 7168 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 1920:threadIdx_x_1 * 4 + 1920 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 7296:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 7296 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 2048:threadIdx_x_1 * 4 + 2048 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 8192:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 8192 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 2176:threadIdx_x_1 * 4 + 2176 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 8320:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 8320 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 2304:threadIdx_x_1 * 4 + 2304 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 9216:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 9216 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 2432:threadIdx_x_1 * 4 + 2432 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 9344:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 9344 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 2560:threadIdx_x_1 * 4 + 2560 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 10240:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 10240 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 2688:threadIdx_x_1 * 4 + 2688 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 10368:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 10368 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 2816:threadIdx_x_1 * 4 + 2816 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 11264:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 11264 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 2944:threadIdx_x_1 * 4 + 2944 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 11392:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 11392 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 3072:threadIdx_x_1 * 4 + 3072 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 12288:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 12288 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 3200:threadIdx_x_1 * 4 + 3200 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 12416:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 12416 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 3328:threadIdx_x_1 * 4 + 3328 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 13312:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 13312 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 3456:threadIdx_x_1 * 4 + 3456 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 13440:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 13440 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 3584:threadIdx_x_1 * 4 + 3584 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 14336:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 14336 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 3712:threadIdx_x_1 * 4 + 3712 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 14464:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 14464 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 3840:threadIdx_x_1 * 4 + 3840 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 15360:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 15360 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 3968:threadIdx_x_1 * 4 + 3968 + 4] = A_1[blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 15488:blockIdx_x // 14 * 16384 + cse_var_1 + threadIdx_x_1 * 4 + 15488 + 4]
            threadIdx_x_2 = T.env_thread("threadIdx.x")
            B_shared_1 = T.Buffer((4096,), data=B_shared, scope="shared")
            B_1 = T.Buffer((229376,), data=B.data)
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 32] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 32]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 64] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 64]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 96] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 96]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 128] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 128]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 160] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 160]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 192] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 192]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 224] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 224]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 256] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 1024]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 288] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 1056]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 320] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 1088]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 352] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 1120]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 384] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 1152]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 416] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 1184]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 448] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 1216]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 480] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 1248]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 512] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 2048]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 544] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 2080]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 576] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 2112]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 608] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 2144]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 640] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 2176]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 672] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 2208]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 704] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 2240]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 736] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 2272]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 768] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 3072]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 800] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 3104]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 832] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 3136]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 864] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 3168]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 896] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 3200]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 928] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 3232]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 960] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 3264]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 992] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 3296]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1024] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 4096]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1056] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 4128]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1088] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 4160]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1120] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 4192]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1152] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 4224]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1184] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 4256]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1216] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 4288]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1248] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 4320]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1280] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 5120]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1312] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 5152]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1344] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 5184]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1376] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 5216]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1408] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 5248]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1440] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 5280]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1472] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 5312]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1504] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 5344]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1536] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 6144]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1568] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 6176]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1600] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 6208]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1632] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 6240]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1664] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 6272]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1696] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 6304]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1728] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 6336]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1760] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 6368]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1792] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 7168]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1824] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 7200]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1856] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 7232]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1888] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 7264]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1920] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 7296]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1952] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 7328]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 1984] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 7360]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2016] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 7392]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2048] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 8192]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2080] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 8224]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2112] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 8256]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2144] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 8288]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2176] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 8320]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2208] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 8352]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2240] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 8384]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2272] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 8416]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2304] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 9216]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2336] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 9248]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2368] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 9280]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2400] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 9312]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2432] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 9344]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2464] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 9376]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2496] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 9408]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2528] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 9440]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2560] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 10240]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2592] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 10272]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2624] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 10304]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2656] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 10336]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2688] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 10368]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2720] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 10400]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2752] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 10432]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2784] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 10464]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2816] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 11264]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2848] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 11296]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2880] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 11328]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2912] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 11360]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2944] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 11392]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 2976] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 11424]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3008] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 11456]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3040] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 11488]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3072] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 12288]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3104] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 12320]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3136] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 12352]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3168] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 12384]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3200] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 12416]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3232] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 12448]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3264] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 12480]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3296] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 12512]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3328] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 13312]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3360] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 13344]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3392] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 13376]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3424] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 13408]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3456] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 13440]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3488] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 13472]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3520] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 13504]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3552] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 13536]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3584] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 14336]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3616] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 14368]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3648] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 14400]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3680] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 14432]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3712] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 14464]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3744] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 14496]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3776] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 14528]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3808] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 14560]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3840] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 15360]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3872] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 15392]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3904] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 15424]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3936] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 15456]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 3968] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 15488]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 4000] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 15520]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 4032] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 15552]
            with T.launch_thread(threadIdx_x_2, 32):
                B_shared_1[threadIdx_x_2 + 4064] = B_1[blockIdx_x % 14 * 16384 + cse_var_1 + threadIdx_x_2 + 15584]
            for k_outer_inner in range(64):
                cse_var_2: T.int32 = k_outer_inner * 4
                transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2]
                transposed_gemm_1[4] = transposed_gemm_1[4] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 2048] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2]
                transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 1] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2 + 1]
                transposed_gemm_1[4] = transposed_gemm_1[4] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 2049] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2 + 1]
                transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 2] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2 + 2]
                transposed_gemm_1[4] = transposed_gemm_1[4] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 2050] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2 + 2]
                transposed_gemm_1[0] = transposed_gemm_1[0] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 3] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2 + 3]
                transposed_gemm_1[4] = transposed_gemm_1[4] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 2051] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2 + 3]
                transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 256] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2]
                transposed_gemm_1[5] = transposed_gemm_1[5] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 2304] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2]
                transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 257] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2 + 1]
                transposed_gemm_1[5] = transposed_gemm_1[5] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 2305] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2 + 1]
                transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 258] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2 + 2]
                transposed_gemm_1[5] = transposed_gemm_1[5] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 2306] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2 + 2]
                transposed_gemm_1[1] = transposed_gemm_1[1] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 259] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2 + 3]
                transposed_gemm_1[5] = transposed_gemm_1[5] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 2307] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2 + 3]
                transposed_gemm_1[2] = transposed_gemm_1[2] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 512] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2]
                transposed_gemm_1[6] = transposed_gemm_1[6] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 2560] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2]
                transposed_gemm_1[2] = transposed_gemm_1[2] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 513] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2 + 1]
                transposed_gemm_1[6] = transposed_gemm_1[6] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 2561] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2 + 1]
                transposed_gemm_1[2] = transposed_gemm_1[2] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 514] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2 + 2]
                transposed_gemm_1[6] = transposed_gemm_1[6] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 2562] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2 + 2]
                transposed_gemm_1[2] = transposed_gemm_1[2] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 515] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2 + 3]
                transposed_gemm_1[6] = transposed_gemm_1[6] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 2563] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2 + 3]
                transposed_gemm_1[3] = transposed_gemm_1[3] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 768] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2]
                transposed_gemm_1[7] = transposed_gemm_1[7] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 2816] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2]
                transposed_gemm_1[3] = transposed_gemm_1[3] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 769] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2 + 1]
                transposed_gemm_1[7] = transposed_gemm_1[7] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 2817] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2 + 1]
                transposed_gemm_1[3] = transposed_gemm_1[3] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 770] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2 + 2]
                transposed_gemm_1[7] = transposed_gemm_1[7] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 2818] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2 + 2]
                transposed_gemm_1[3] = transposed_gemm_1[3] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 771] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2 + 3]
                transposed_gemm_1[7] = transposed_gemm_1[7] + A_shared_1[threadIdx_x // 16 * 1024 + cse_var_2 + 2819] * B_shared_1[threadIdx_x % 16 * 256 + cse_var_2 + 3]
        for i_inner in range(4):
            out_1 = T.Buffer((50176,), data=out.data)
            C_1 = T.Buffer((50176,), data=C.data)
            out_1[blockIdx_x // 14 * 3584 + threadIdx_x // 16 * 896 + i_inner * 224 + blockIdx_x % 14 * 16 + threadIdx_x % 16] = transposed_gemm_1[i_inner] + C_1[blockIdx_x // 14 * 3584 + threadIdx_x // 16 * 896 + i_inner * 224 + blockIdx_x % 14 * 16 + threadIdx_x % 16]
            out_1[blockIdx_x // 14 * 3584 + threadIdx_x // 16 * 896 + i_inner * 224 + blockIdx_x % 14 * 16 + threadIdx_x % 16 + 1792] = transposed_gemm_1[i_inner + 4] + C_1[blockIdx_x // 14 * 3584 + threadIdx_x // 16 * 896 + i_inner * 224 + blockIdx_x % 14 * 16 + threadIdx_x % 16 + 1792]
Equivalent python schedule:
transposed_gemm_i, transposed_gemm_j, transposed_gemm_k = tuple(transposed_gemm.op.axis) + tuple(transposed_gemm.op.reduce_axis)
out_i, out_j = tuple(out.op.axis) + tuple(out.op.reduce_axis)
transposed_gemm_i_o_i, transposed_gemm_i_i = s[transposed_gemm].split(transposed_gemm_i, factor=1)
transposed_gemm_i_o_o_i, transposed_gemm_i_o_i = s[transposed_gemm].split(transposed_gemm_i_o_i, factor=4)
transposed_gemm_i_o_o_o_i, transposed_gemm_i_o_o_i = s[transposed_gemm].split(transposed_gemm_i_o_o_i, factor=2)
transposed_gemm_i_o_o_o_o, transposed_gemm_i_o_o_o_i = s[transposed_gemm].split(transposed_gemm_i_o_o_o_i, factor=2)
transposed_gemm_j_o_i, transposed_gemm_j_i = s[transposed_gemm].split(transposed_gemm_j, factor=1)
transposed_gemm_j_o_o_i, transposed_gemm_j_o_i = s[transposed_gemm].split(transposed_gemm_j_o_i, factor=1)
transposed_gemm_j_o_o_o_i, transposed_gemm_j_o_o_i = s[transposed_gemm].split(transposed_gemm_j_o_o_i, factor=16)
transposed_gemm_j_o_o_o_o, transposed_gemm_j_o_o_o_i = s[transposed_gemm].split(transposed_gemm_j_o_o_o_i, factor=1)
transposed_gemm_k_o_i, transposed_gemm_k_i = s[transposed_gemm].split(transposed_gemm_k, factor=4)
transposed_gemm_k_o_o, transposed_gemm_k_o_i = s[transposed_gemm].split(transposed_gemm_k_o_i, factor=64)
s[transposed_gemm].reorder(transposed_gemm_i_o_o_o_o, transposed_gemm_j_o_o_o_o, transposed_gemm_i_o_o_o_i, transposed_gemm_j_o_o_o_i, transposed_gemm_i_o_o_i, transposed_gemm_j_o_o_i, transposed_gemm_k_o_o, transposed_gemm_k_o_i, transposed_gemm_i_o_i, transposed_gemm_j_o_i, transposed_gemm_k_i, transposed_gemm_i_i, transposed_gemm_j_i)
out_i_o_i, out_i_i = s[out].split(out_i, factor=4)
out_i_o_o_i, out_i_o_i = s[out].split(out_i_o_i, factor=2)
out_i_o_o_o, out_i_o_o_i = s[out].split(out_i_o_o_i, factor=2)
out_j_o_i, out_j_i = s[out].split(out_j, factor=1)
out_j_o_o_i, out_j_o_i = s[out].split(out_j_o_i, factor=16)
out_j_o_o_o, out_j_o_o_i = s[out].split(out_j_o_o_i, factor=1)
s[out].reorder(out_i_o_o_o, out_j_o_o_o, out_i_o_o_i, out_j_o_o_i, out_i_o_i, out_j_o_i, out_i_i, out_j_i)
s[transposed_gemm].compute_at(s[out], out_j_o_i)
B_shared = s.cache_read(B, "shared", [transposed_gemm])
B_shared_ax0, B_shared_ax1 = tuple(B_shared.op.axis)
s[B_shared].compute_at(s[transposed_gemm], transposed_gemm_k_o_o)
A_shared = s.cache_read(A, "shared", [transposed_gemm])
A_shared_ax0, A_shared_ax1 = tuple(A_shared.op.axis)
s[A_shared].compute_at(s[transposed_gemm], transposed_gemm_k_o_o)
out_i_o_o_o_j_o_o_o_fused = s[out].fuse(out_i_o_o_o, out_j_o_o_o)
s[out].bind(out_i_o_o_o_j_o_o_o_fused, te.thread_axis("blockIdx.x"))
out_i_o_o_i_j_o_o_i_fused = s[out].fuse(out_i_o_o_i, out_j_o_o_i)
s[out].bind(out_i_o_o_i_j_o_o_i_fused, te.thread_axis("vthread"))
out_i_o_i_j_o_i_fused = s[out].fuse(out_i_o_i, out_j_o_i)
s[out].bind(out_i_o_i_j_o_i_fused, te.thread_axis("threadIdx.x"))
B_shared_ax0_ax1_fused = s[B_shared].fuse(B_shared_ax0, B_shared_ax1)
B_shared_ax0_ax1_fused_o, B_shared_ax0_ax1_fused_i = s[B_shared].split(B_shared_ax0_ax1_fused, factor=1)
s[B_shared].vectorize(B_shared_ax0_ax1_fused_i)
B_shared_ax0_ax1_fused_o_o, B_shared_ax0_ax1_fused_o_i = s[B_shared].split(B_shared_ax0_ax1_fused_o, factor=32)
s[B_shared].bind(B_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
A_shared_ax0_ax1_fused = s[A_shared].fuse(A_shared_ax0, A_shared_ax1)
A_shared_ax0_ax1_fused_o, A_shared_ax0_ax1_fused_i = s[A_shared].split(A_shared_ax0_ax1_fused, factor=4)
s[A_shared].vectorize(A_shared_ax0_ax1_fused_i)
A_shared_ax0_ax1_fused_o_o, A_shared_ax0_ax1_fused_o_i = s[A_shared].split(A_shared_ax0_ax1_fused_o, factor=32)
s[A_shared].bind(A_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
s[transposed_gemm].pragma(transposed_gemm_i_o_o_o_o, "auto_unroll_max_step", 1024)
s[transposed_gemm].pragma(transposed_gemm_i_o_o_o_o, "unroll_explicit", True)

Equivalent CUDA code:

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(32) default_function_kernel(float* __restrict__ A, float* __restrict__ B, float* __restrict__ C, float* __restrict__ out) {
  float transposed_gemm[8];
  __shared__ float A_shared[4096];
  __shared__ float B_shared[4096];
  transposed_gemm[0] = 0.000000e+00f;
  transposed_gemm[4] = 0.000000e+00f;
  transposed_gemm[1] = 0.000000e+00f;
  transposed_gemm[5] = 0.000000e+00f;
  transposed_gemm[2] = 0.000000e+00f;
  transposed_gemm[6] = 0.000000e+00f;
  transposed_gemm[3] = 0.000000e+00f;
  transposed_gemm[7] = 0.000000e+00f;
  for (int k_outer_outer = 0; k_outer_outer < 4; ++k_outer_outer) {
    __syncthreads();
    *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + ((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 128)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 128));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 256)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 1024));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 384)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 1152));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 512)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 2048));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 640)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 2176));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 768)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 3072));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 896)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 3200));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 1024)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 4096));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 1152)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 4224));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 1280)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 5120));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 1408)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 5248));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 1536)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 6144));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 1664)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 6272));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 1792)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 7168));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 1920)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 7296));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 2048)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 8192));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 2176)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 8320));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 2304)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 9216));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 2432)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 9344));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 2560)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 10240));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 2688)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 10368));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 2816)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 11264));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 2944)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 11392));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 3072)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 12288));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 3200)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 12416));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 3328)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 13312));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 3456)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 13440));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 3584)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 14336));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 3712)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 14464));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 3840)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 15360));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 3968)) = *(float4*)(A + (((((((int)blockIdx.x) / 14) * 16384) + (k_outer_outer * 256)) + (((int)threadIdx.x) * 4)) + 15488));
    B_shared[((int)threadIdx.x)] = B[((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x))];
    B_shared[(((int)threadIdx.x) + 32)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 32)];
    B_shared[(((int)threadIdx.x) + 64)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 64)];
    B_shared[(((int)threadIdx.x) + 96)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 96)];
    B_shared[(((int)threadIdx.x) + 128)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 128)];
    B_shared[(((int)threadIdx.x) + 160)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 160)];
    B_shared[(((int)threadIdx.x) + 192)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 192)];
    B_shared[(((int)threadIdx.x) + 224)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 224)];
    B_shared[(((int)threadIdx.x) + 256)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 1024)];
    B_shared[(((int)threadIdx.x) + 288)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 1056)];
    B_shared[(((int)threadIdx.x) + 320)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 1088)];
    B_shared[(((int)threadIdx.x) + 352)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 1120)];
    B_shared[(((int)threadIdx.x) + 384)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 1152)];
    B_shared[(((int)threadIdx.x) + 416)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 1184)];
    B_shared[(((int)threadIdx.x) + 448)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 1216)];
    B_shared[(((int)threadIdx.x) + 480)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 1248)];
    B_shared[(((int)threadIdx.x) + 512)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 2048)];
    B_shared[(((int)threadIdx.x) + 544)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 2080)];
    B_shared[(((int)threadIdx.x) + 576)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 2112)];
    B_shared[(((int)threadIdx.x) + 608)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 2144)];
    B_shared[(((int)threadIdx.x) + 640)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 2176)];
    B_shared[(((int)threadIdx.x) + 672)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 2208)];
    B_shared[(((int)threadIdx.x) + 704)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 2240)];
    B_shared[(((int)threadIdx.x) + 736)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 2272)];
    B_shared[(((int)threadIdx.x) + 768)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 3072)];
    B_shared[(((int)threadIdx.x) + 800)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 3104)];
    B_shared[(((int)threadIdx.x) + 832)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 3136)];
    B_shared[(((int)threadIdx.x) + 864)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 3168)];
    B_shared[(((int)threadIdx.x) + 896)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 3200)];
    B_shared[(((int)threadIdx.x) + 928)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 3232)];
    B_shared[(((int)threadIdx.x) + 960)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 3264)];
    B_shared[(((int)threadIdx.x) + 992)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 3296)];
    B_shared[(((int)threadIdx.x) + 1024)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 4096)];
    B_shared[(((int)threadIdx.x) + 1056)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 4128)];
    B_shared[(((int)threadIdx.x) + 1088)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 4160)];
    B_shared[(((int)threadIdx.x) + 1120)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 4192)];
    B_shared[(((int)threadIdx.x) + 1152)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 4224)];
    B_shared[(((int)threadIdx.x) + 1184)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 4256)];
    B_shared[(((int)threadIdx.x) + 1216)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 4288)];
    B_shared[(((int)threadIdx.x) + 1248)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 4320)];
    B_shared[(((int)threadIdx.x) + 1280)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 5120)];
    B_shared[(((int)threadIdx.x) + 1312)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 5152)];
    B_shared[(((int)threadIdx.x) + 1344)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 5184)];
    B_shared[(((int)threadIdx.x) + 1376)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 5216)];
    B_shared[(((int)threadIdx.x) + 1408)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 5248)];
    B_shared[(((int)threadIdx.x) + 1440)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 5280)];
    B_shared[(((int)threadIdx.x) + 1472)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 5312)];
    B_shared[(((int)threadIdx.x) + 1504)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 5344)];
    B_shared[(((int)threadIdx.x) + 1536)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 6144)];
    B_shared[(((int)threadIdx.x) + 1568)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 6176)];
    B_shared[(((int)threadIdx.x) + 1600)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 6208)];
    B_shared[(((int)threadIdx.x) + 1632)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 6240)];
    B_shared[(((int)threadIdx.x) + 1664)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 6272)];
    B_shared[(((int)threadIdx.x) + 1696)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 6304)];
    B_shared[(((int)threadIdx.x) + 1728)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 6336)];
    B_shared[(((int)threadIdx.x) + 1760)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 6368)];
    B_shared[(((int)threadIdx.x) + 1792)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 7168)];
    B_shared[(((int)threadIdx.x) + 1824)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 7200)];
    B_shared[(((int)threadIdx.x) + 1856)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 7232)];
    B_shared[(((int)threadIdx.x) + 1888)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 7264)];
    B_shared[(((int)threadIdx.x) + 1920)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 7296)];
    B_shared[(((int)threadIdx.x) + 1952)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 7328)];
    B_shared[(((int)threadIdx.x) + 1984)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 7360)];
    B_shared[(((int)threadIdx.x) + 2016)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 7392)];
    B_shared[(((int)threadIdx.x) + 2048)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 8192)];
    B_shared[(((int)threadIdx.x) + 2080)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 8224)];
    B_shared[(((int)threadIdx.x) + 2112)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 8256)];
    B_shared[(((int)threadIdx.x) + 2144)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 8288)];
    B_shared[(((int)threadIdx.x) + 2176)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 8320)];
    B_shared[(((int)threadIdx.x) + 2208)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 8352)];
    B_shared[(((int)threadIdx.x) + 2240)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 8384)];
    B_shared[(((int)threadIdx.x) + 2272)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 8416)];
    B_shared[(((int)threadIdx.x) + 2304)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 9216)];
    B_shared[(((int)threadIdx.x) + 2336)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 9248)];
    B_shared[(((int)threadIdx.x) + 2368)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 9280)];
    B_shared[(((int)threadIdx.x) + 2400)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 9312)];
    B_shared[(((int)threadIdx.x) + 2432)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 9344)];
    B_shared[(((int)threadIdx.x) + 2464)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 9376)];
    B_shared[(((int)threadIdx.x) + 2496)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 9408)];
    B_shared[(((int)threadIdx.x) + 2528)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 9440)];
    B_shared[(((int)threadIdx.x) + 2560)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 10240)];
    B_shared[(((int)threadIdx.x) + 2592)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 10272)];
    B_shared[(((int)threadIdx.x) + 2624)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 10304)];
    B_shared[(((int)threadIdx.x) + 2656)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 10336)];
    B_shared[(((int)threadIdx.x) + 2688)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 10368)];
    B_shared[(((int)threadIdx.x) + 2720)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 10400)];
    B_shared[(((int)threadIdx.x) + 2752)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 10432)];
    B_shared[(((int)threadIdx.x) + 2784)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 10464)];
    B_shared[(((int)threadIdx.x) + 2816)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 11264)];
    B_shared[(((int)threadIdx.x) + 2848)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 11296)];
    B_shared[(((int)threadIdx.x) + 2880)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 11328)];
    B_shared[(((int)threadIdx.x) + 2912)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 11360)];
    B_shared[(((int)threadIdx.x) + 2944)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 11392)];
    B_shared[(((int)threadIdx.x) + 2976)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 11424)];
    B_shared[(((int)threadIdx.x) + 3008)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 11456)];
    B_shared[(((int)threadIdx.x) + 3040)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 11488)];
    B_shared[(((int)threadIdx.x) + 3072)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 12288)];
    B_shared[(((int)threadIdx.x) + 3104)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 12320)];
    B_shared[(((int)threadIdx.x) + 3136)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 12352)];
    B_shared[(((int)threadIdx.x) + 3168)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 12384)];
    B_shared[(((int)threadIdx.x) + 3200)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 12416)];
    B_shared[(((int)threadIdx.x) + 3232)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 12448)];
    B_shared[(((int)threadIdx.x) + 3264)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 12480)];
    B_shared[(((int)threadIdx.x) + 3296)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 12512)];
    B_shared[(((int)threadIdx.x) + 3328)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 13312)];
    B_shared[(((int)threadIdx.x) + 3360)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 13344)];
    B_shared[(((int)threadIdx.x) + 3392)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 13376)];
    B_shared[(((int)threadIdx.x) + 3424)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 13408)];
    B_shared[(((int)threadIdx.x) + 3456)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 13440)];
    B_shared[(((int)threadIdx.x) + 3488)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 13472)];
    B_shared[(((int)threadIdx.x) + 3520)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 13504)];
    B_shared[(((int)threadIdx.x) + 3552)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 13536)];
    B_shared[(((int)threadIdx.x) + 3584)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 14336)];
    B_shared[(((int)threadIdx.x) + 3616)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 14368)];
    B_shared[(((int)threadIdx.x) + 3648)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 14400)];
    B_shared[(((int)threadIdx.x) + 3680)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 14432)];
    B_shared[(((int)threadIdx.x) + 3712)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 14464)];
    B_shared[(((int)threadIdx.x) + 3744)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 14496)];
    B_shared[(((int)threadIdx.x) + 3776)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 14528)];
    B_shared[(((int)threadIdx.x) + 3808)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 14560)];
    B_shared[(((int)threadIdx.x) + 3840)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 15360)];
    B_shared[(((int)threadIdx.x) + 3872)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 15392)];
    B_shared[(((int)threadIdx.x) + 3904)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 15424)];
    B_shared[(((int)threadIdx.x) + 3936)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 15456)];
    B_shared[(((int)threadIdx.x) + 3968)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 15488)];
    B_shared[(((int)threadIdx.x) + 4000)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 15520)];
    B_shared[(((int)threadIdx.x) + 4032)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 15552)];
    B_shared[(((int)threadIdx.x) + 4064)] = B[(((((((int)blockIdx.x) % 14) * 16384) + (k_outer_outer * 256)) + ((int)threadIdx.x)) + 15584)];
    __syncthreads();
    for (int k_outer_inner = 0; k_outer_inner < 64; ++k_outer_inner) {
      transposed_gemm[0] = (transposed_gemm[0] + (A_shared[(((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4))] * B_shared[(((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4))]));
      transposed_gemm[4] = (transposed_gemm[4] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 2048)] * B_shared[(((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4))]));
      transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 1)] * B_shared[((((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4)) + 1)]));
      transposed_gemm[4] = (transposed_gemm[4] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 2049)] * B_shared[((((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4)) + 1)]));
      transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 2)] * B_shared[((((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4)) + 2)]));
      transposed_gemm[4] = (transposed_gemm[4] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 2050)] * B_shared[((((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4)) + 2)]));
      transposed_gemm[0] = (transposed_gemm[0] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 3)] * B_shared[((((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4)) + 3)]));
      transposed_gemm[4] = (transposed_gemm[4] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 2051)] * B_shared[((((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4)) + 3)]));
      transposed_gemm[1] = (transposed_gemm[1] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 256)] * B_shared[(((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4))]));
      transposed_gemm[5] = (transposed_gemm[5] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 2304)] * B_shared[(((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4))]));
      transposed_gemm[1] = (transposed_gemm[1] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 257)] * B_shared[((((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4)) + 1)]));
      transposed_gemm[5] = (transposed_gemm[5] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 2305)] * B_shared[((((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4)) + 1)]));
      transposed_gemm[1] = (transposed_gemm[1] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 258)] * B_shared[((((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4)) + 2)]));
      transposed_gemm[5] = (transposed_gemm[5] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 2306)] * B_shared[((((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4)) + 2)]));
      transposed_gemm[1] = (transposed_gemm[1] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 259)] * B_shared[((((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4)) + 3)]));
      transposed_gemm[5] = (transposed_gemm[5] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 2307)] * B_shared[((((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4)) + 3)]));
      transposed_gemm[2] = (transposed_gemm[2] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 512)] * B_shared[(((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4))]));
      transposed_gemm[6] = (transposed_gemm[6] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 2560)] * B_shared[(((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4))]));
      transposed_gemm[2] = (transposed_gemm[2] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 513)] * B_shared[((((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4)) + 1)]));
      transposed_gemm[6] = (transposed_gemm[6] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 2561)] * B_shared[((((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4)) + 1)]));
      transposed_gemm[2] = (transposed_gemm[2] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 514)] * B_shared[((((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4)) + 2)]));
      transposed_gemm[6] = (transposed_gemm[6] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 2562)] * B_shared[((((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4)) + 2)]));
      transposed_gemm[2] = (transposed_gemm[2] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 515)] * B_shared[((((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4)) + 3)]));
      transposed_gemm[6] = (transposed_gemm[6] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 2563)] * B_shared[((((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4)) + 3)]));
      transposed_gemm[3] = (transposed_gemm[3] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 768)] * B_shared[(((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4))]));
      transposed_gemm[7] = (transposed_gemm[7] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 2816)] * B_shared[(((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4))]));
      transposed_gemm[3] = (transposed_gemm[3] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 769)] * B_shared[((((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4)) + 1)]));
      transposed_gemm[7] = (transposed_gemm[7] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 2817)] * B_shared[((((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4)) + 1)]));
      transposed_gemm[3] = (transposed_gemm[3] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 770)] * B_shared[((((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4)) + 2)]));
      transposed_gemm[7] = (transposed_gemm[7] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 2818)] * B_shared[((((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4)) + 2)]));
      transposed_gemm[3] = (transposed_gemm[3] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 771)] * B_shared[((((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4)) + 3)]));
      transposed_gemm[7] = (transposed_gemm[7] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (k_outer_inner * 4)) + 2819)] * B_shared[((((((int)threadIdx.x) & 15) * 256) + (k_outer_inner * 4)) + 3)]));
    }
  }
  for (int i_inner = 0; i_inner < 4; ++i_inner) {
    out[((((((((int)blockIdx.x) / 14) * 3584) + ((((int)threadIdx.x) >> 4) * 896)) + (i_inner * 224)) + ((((int)blockIdx.x) % 14) * 16)) + (((int)threadIdx.x) & 15))] = (transposed_gemm[i_inner] + C[((((((((int)blockIdx.x) / 14) * 3584) + ((((int)threadIdx.x) >> 4) * 896)) + (i_inner * 224)) + ((((int)blockIdx.x) % 14) * 16)) + (((int)threadIdx.x) & 15))]);
    out[(((((((((int)blockIdx.x) / 14) * 3584) + ((((int)threadIdx.x) >> 4) * 896)) + (i_inner * 224)) + ((((int)blockIdx.x) % 14) * 16)) + (((int)threadIdx.x) & 15)) + 1792)] = (transposed_gemm[(i_inner + 4)] + C[(((((((((int)blockIdx.x) / 14) * 3584) + ((((int)threadIdx.x) >> 4) * 896)) + (i_inner * 224)) + ((((int)blockIdx.x) % 14) * 16)) + (((int)threadIdx.x) & 15)) + 1792)]);
  }
}


