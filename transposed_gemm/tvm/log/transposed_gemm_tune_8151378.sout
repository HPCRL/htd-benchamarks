----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Generate Sketches		#s: 1
Sample Initial Population	#s: 182	fail_ct: 1866	Time elapsed: 5.41
GA Iter: 0	Max score: 0.9929	Min score: 0.3194	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9995	Min score: 0.9790	#Pop: 128	#M+: 1395	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.15
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 0.36 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 188	fail_ct: 1860	Time elapsed: 2.85
GA Iter: 0	Max score: 0.9975	Min score: 0.3072	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 1.0000	Min score: 0.9780	#Pop: 128	#M+: 1387	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.69
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 0.84 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 168	fail_ct: 1880	Time elapsed: 2.74
GA Iter: 0	Max score: 0.9988	Min score: 0.1281	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9988	Min score: 0.9988	#Pop: 128	#M+: 1395	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.56
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.34 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 157	fail_ct: 1891	Time elapsed: 2.76
GA Iter: 0	Max score: 0.9417	Min score: 0.1117	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 1.0131	Min score: 0.9041	#Pop: 128	#M+: 1401	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.52
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.29 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 167	fail_ct: 1881	Time elapsed: 2.63
GA Iter: 0	Max score: 0.6200	Min score: 0.0086	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9621	Min score: 0.8911	#Pop: 128	#M+: 1396	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.93
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.71 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 164	fail_ct: 1884	Time elapsed: 2.66
GA Iter: 0	Max score: 0.8388	Min score: 0.0445	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 1.0616	Min score: 0.9432	#Pop: 128	#M+: 1385	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.59
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.63 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 176	fail_ct: 1872	Time elapsed: 2.68
GA Iter: 0	Max score: 0.9036	Min score: 0.0084	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 1.0172	Min score: 0.9638	#Pop: 128	#M+: 1391	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.59
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.02 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 166	fail_ct: 1882	Time elapsed: 2.89
GA Iter: 0	Max score: 0.8644	Min score: 0.0383	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 1.0070	Min score: 0.9546	#Pop: 128	#M+: 1386	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.27
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.88 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 178	fail_ct: 1870	Time elapsed: 2.69
GA Iter: 0	Max score: 0.8111	Min score: 0.0584	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9935	Min score: 0.9603	#Pop: 128	#M+: 1387	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.33
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.81 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 156	fail_ct: 1892	Time elapsed: 2.67
GA Iter: 0	Max score: 0.8777	Min score: 0.0451	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9708	Min score: 0.9553	#Pop: 128	#M+: 1397	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.16
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.95 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 164	fail_ct: 1884	Time elapsed: 2.63
GA Iter: 0	Max score: 0.6190	Min score: 0.0299	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9966	Min score: 0.9473	#Pop: 128	#M+: 1398	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.31
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.11 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 182	fail_ct: 1866	Time elapsed: 2.88
GA Iter: 0	Max score: 0.8870	Min score: 0.0648	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9628	Min score: 0.9288	#Pop: 128	#M+: 1380	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.43
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.36 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 165	fail_ct: 1883	Time elapsed: 2.57
GA Iter: 0	Max score: 0.6156	Min score: 0.0610	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9662	Min score: 0.9286	#Pop: 128	#M+: 1388	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.34
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.59 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 142	fail_ct: 1906	Time elapsed: 2.62
GA Iter: 0	Max score: 0.5858	Min score: 0.0332	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9576	Min score: 0.9221	#Pop: 128	#M+: 1379	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.17
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.03 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 160	fail_ct: 1888	Time elapsed: 2.64
GA Iter: 0	Max score: 0.6474	Min score: 0.0089	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9763	Min score: 0.9298	#Pop: 128	#M+: 1391	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.33
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 3.17 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 166	fail_ct: 1882	Time elapsed: 2.65
GA Iter: 0	Max score: 0.8354	Min score: 0.0416	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9627	Min score: 0.9269	#Pop: 128	#M+: 1412	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.23
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Done ]
----------------------------------------------------------------------
arc=sm_80
Computational DAG:
A = PLACEHOLDER [256, 1024]
B = PLACEHOLDER [256, 1024]
transposed_gemm(i, j) += (A[i, k]*B[j, k])
C = PLACEHOLDER [256, 256]
out(i, j) = (transposed_gemm[i, j] + C[i, j])

Lowered TIR:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((256, 1024), "float32"), B: T.Buffer((256, 1024), "float32"), C: T.Buffer((256, 256), "float32"), out: T.Buffer((256, 256), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "global_symbol": "main", "tir.noalias": T.bool(True)})
        blockIdx_x = T.launch_thread("blockIdx.x", 256)
        transposed_gemm = T.allocate([8], "float32", "local")
        A_shared = T.allocate([2048], "float32", "shared")
        B_shared = T.allocate([2048], "float32", "shared")
        threadIdx_x = T.launch_thread("threadIdx.x", 32)
        transposed_gemm_1 = T.Buffer((8,), data=transposed_gemm, scope="local", align=32)
        transposed_gemm_1[0] = T.float32(0)
        transposed_gemm_1[1] = T.float32(0)
        transposed_gemm_1[2] = T.float32(0)
        transposed_gemm_1[3] = T.float32(0)
        transposed_gemm_1[4] = T.float32(0)
        transposed_gemm_1[5] = T.float32(0)
        transposed_gemm_1[6] = T.float32(0)
        transposed_gemm_1[7] = T.float32(0)
        for k_outer_outer in range(8):
            threadIdx_x_1 = T.env_thread("threadIdx.x")
            A_shared_1 = T.Buffer((2048,), data=A_shared, scope="shared")
            A_1 = T.Buffer((262144,), data=A.data)
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 128:threadIdx_x_1 * 4 + 128 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 1024:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 1024 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 256:threadIdx_x_1 * 4 + 256 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 2048:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 2048 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 384:threadIdx_x_1 * 4 + 384 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 3072:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 3072 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 512:threadIdx_x_1 * 4 + 512 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 4096:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 4096 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 640:threadIdx_x_1 * 4 + 640 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 5120:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 5120 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 768:threadIdx_x_1 * 4 + 768 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 6144:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 6144 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 896:threadIdx_x_1 * 4 + 896 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 7168:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 7168 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 1024:threadIdx_x_1 * 4 + 1024 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 8192:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 8192 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 1152:threadIdx_x_1 * 4 + 1152 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 9216:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 9216 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 1280:threadIdx_x_1 * 4 + 1280 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 10240:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 10240 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 1408:threadIdx_x_1 * 4 + 1408 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 11264:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 11264 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 1536:threadIdx_x_1 * 4 + 1536 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 12288:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 12288 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 1664:threadIdx_x_1 * 4 + 1664 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 13312:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 13312 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 1792:threadIdx_x_1 * 4 + 1792 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 14336:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 14336 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 1920:threadIdx_x_1 * 4 + 1920 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 15360:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 15360 + 4]
            B_shared_1 = T.Buffer((2048,), data=B_shared, scope="shared")
            for ax0_ax1_fused_outer_outer in range(32):
                threadIdx_x_2 = T.launch_thread("threadIdx.x", 32)
                B_1 = T.Buffer((262144,), data=B.data)
                B_shared_1[ax0_ax1_fused_outer_outer * 64 + threadIdx_x_2 * 2:ax0_ax1_fused_outer_outer * 64 + threadIdx_x_2 * 2 + 2] = B_1[blockIdx_x % 16 * 16384 + ax0_ax1_fused_outer_outer // 2 * 1024 + k_outer_outer * 128 + ax0_ax1_fused_outer_outer % 2 * 64 + threadIdx_x_2 * 2:blockIdx_x % 16 * 16384 + ax0_ax1_fused_outer_outer // 2 * 1024 + k_outer_outer * 128 + ax0_ax1_fused_outer_outer % 2 * 64 + threadIdx_x_2 * 2 + 2]
            for k_outer_inner, i_outer_inner in T.grid(16, 8):
                cse_var_1: T.int32 = k_outer_inner * 8
                transposed_gemm_1[i_outer_inner] = transposed_gemm_1[i_outer_inner] + A_shared_1[threadIdx_x // 16 * 1024 + i_outer_inner * 128 + cse_var_1] * B_shared_1[threadIdx_x % 16 * 128 + cse_var_1]
                transposed_gemm_1[i_outer_inner] = transposed_gemm_1[i_outer_inner] + A_shared_1[threadIdx_x // 16 * 1024 + i_outer_inner * 128 + cse_var_1 + 1] * B_shared_1[threadIdx_x % 16 * 128 + cse_var_1 + 1]
                transposed_gemm_1[i_outer_inner] = transposed_gemm_1[i_outer_inner] + A_shared_1[threadIdx_x // 16 * 1024 + i_outer_inner * 128 + cse_var_1 + 2] * B_shared_1[threadIdx_x % 16 * 128 + cse_var_1 + 2]
                transposed_gemm_1[i_outer_inner] = transposed_gemm_1[i_outer_inner] + A_shared_1[threadIdx_x // 16 * 1024 + i_outer_inner * 128 + cse_var_1 + 3] * B_shared_1[threadIdx_x % 16 * 128 + cse_var_1 + 3]
                transposed_gemm_1[i_outer_inner] = transposed_gemm_1[i_outer_inner] + A_shared_1[threadIdx_x // 16 * 1024 + i_outer_inner * 128 + cse_var_1 + 4] * B_shared_1[threadIdx_x % 16 * 128 + cse_var_1 + 4]
                transposed_gemm_1[i_outer_inner] = transposed_gemm_1[i_outer_inner] + A_shared_1[threadIdx_x // 16 * 1024 + i_outer_inner * 128 + cse_var_1 + 5] * B_shared_1[threadIdx_x % 16 * 128 + cse_var_1 + 5]
                transposed_gemm_1[i_outer_inner] = transposed_gemm_1[i_outer_inner] + A_shared_1[threadIdx_x // 16 * 1024 + i_outer_inner * 128 + cse_var_1 + 6] * B_shared_1[threadIdx_x % 16 * 128 + cse_var_1 + 6]
                transposed_gemm_1[i_outer_inner] = transposed_gemm_1[i_outer_inner] + A_shared_1[threadIdx_x // 16 * 1024 + i_outer_inner * 128 + cse_var_1 + 7] * B_shared_1[threadIdx_x % 16 * 128 + cse_var_1 + 7]
        for i_inner in range(8):
            out_1 = T.Buffer((65536,), data=out.data)
            C_1 = T.Buffer((65536,), data=C.data)
            out_1[blockIdx_x // 16 * 4096 + threadIdx_x // 16 * 2048 + i_inner * 256 + blockIdx_x % 16 * 16 + threadIdx_x % 16] = transposed_gemm_1[i_inner] + C_1[blockIdx_x // 16 * 4096 + threadIdx_x // 16 * 2048 + i_inner * 256 + blockIdx_x % 16 * 16 + threadIdx_x % 16]
Equivalent python schedule:
transposed_gemm_i, transposed_gemm_j, transposed_gemm_k = tuple(transposed_gemm.op.axis) + tuple(transposed_gemm.op.reduce_axis)
out_i, out_j = tuple(out.op.axis) + tuple(out.op.reduce_axis)
transposed_gemm_i_o_i, transposed_gemm_i_i = s[transposed_gemm].split(transposed_gemm_i, factor=1)
transposed_gemm_i_o_o_i, transposed_gemm_i_o_i = s[transposed_gemm].split(transposed_gemm_i_o_i, factor=8)
transposed_gemm_i_o_o_o_i, transposed_gemm_i_o_o_i = s[transposed_gemm].split(transposed_gemm_i_o_o_i, factor=2)
transposed_gemm_i_o_o_o_o, transposed_gemm_i_o_o_o_i = s[transposed_gemm].split(transposed_gemm_i_o_o_o_i, factor=1)
transposed_gemm_j_o_i, transposed_gemm_j_i = s[transposed_gemm].split(transposed_gemm_j, factor=1)
transposed_gemm_j_o_o_i, transposed_gemm_j_o_i = s[transposed_gemm].split(transposed_gemm_j_o_i, factor=1)
transposed_gemm_j_o_o_o_i, transposed_gemm_j_o_o_i = s[transposed_gemm].split(transposed_gemm_j_o_o_i, factor=16)
transposed_gemm_j_o_o_o_o, transposed_gemm_j_o_o_o_i = s[transposed_gemm].split(transposed_gemm_j_o_o_o_i, factor=1)
transposed_gemm_k_o_i, transposed_gemm_k_i = s[transposed_gemm].split(transposed_gemm_k, factor=8)
transposed_gemm_k_o_o, transposed_gemm_k_o_i = s[transposed_gemm].split(transposed_gemm_k_o_i, factor=16)
s[transposed_gemm].reorder(transposed_gemm_i_o_o_o_o, transposed_gemm_j_o_o_o_o, transposed_gemm_i_o_o_o_i, transposed_gemm_j_o_o_o_i, transposed_gemm_i_o_o_i, transposed_gemm_j_o_o_i, transposed_gemm_k_o_o, transposed_gemm_k_o_i, transposed_gemm_i_o_i, transposed_gemm_j_o_i, transposed_gemm_k_i, transposed_gemm_i_i, transposed_gemm_j_i)
out_i_o_i, out_i_i = s[out].split(out_i, factor=8)
out_i_o_o_i, out_i_o_i = s[out].split(out_i_o_i, factor=2)
out_i_o_o_o, out_i_o_o_i = s[out].split(out_i_o_o_i, factor=1)
out_j_o_i, out_j_i = s[out].split(out_j, factor=1)
out_j_o_o_i, out_j_o_i = s[out].split(out_j_o_i, factor=16)
out_j_o_o_o, out_j_o_o_i = s[out].split(out_j_o_o_i, factor=1)
s[out].reorder(out_i_o_o_o, out_j_o_o_o, out_i_o_o_i, out_j_o_o_i, out_i_o_i, out_j_o_i, out_i_i, out_j_i)
s[transposed_gemm].compute_at(s[out], out_j_o_i)
B_shared = s.cache_read(B, "shared", [transposed_gemm])
B_shared_ax0, B_shared_ax1 = tuple(B_shared.op.axis)
s[B_shared].compute_at(s[transposed_gemm], transposed_gemm_k_o_o)
A_shared = s.cache_read(A, "shared", [transposed_gemm])
A_shared_ax0, A_shared_ax1 = tuple(A_shared.op.axis)
s[A_shared].compute_at(s[transposed_gemm], transposed_gemm_k_o_o)
out_i_o_o_o_j_o_o_o_fused = s[out].fuse(out_i_o_o_o, out_j_o_o_o)
s[out].bind(out_i_o_o_o_j_o_o_o_fused, te.thread_axis("blockIdx.x"))
out_i_o_o_i_j_o_o_i_fused = s[out].fuse(out_i_o_o_i, out_j_o_o_i)
s[out].bind(out_i_o_o_i_j_o_o_i_fused, te.thread_axis("vthread"))
out_i_o_i_j_o_i_fused = s[out].fuse(out_i_o_i, out_j_o_i)
s[out].bind(out_i_o_i_j_o_i_fused, te.thread_axis("threadIdx.x"))
B_shared_ax0_ax1_fused = s[B_shared].fuse(B_shared_ax0, B_shared_ax1)
B_shared_ax0_ax1_fused_o, B_shared_ax0_ax1_fused_i = s[B_shared].split(B_shared_ax0_ax1_fused, factor=2)
s[B_shared].vectorize(B_shared_ax0_ax1_fused_i)
B_shared_ax0_ax1_fused_o_o, B_shared_ax0_ax1_fused_o_i = s[B_shared].split(B_shared_ax0_ax1_fused_o, factor=32)
s[B_shared].bind(B_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
A_shared_ax0_ax1_fused = s[A_shared].fuse(A_shared_ax0, A_shared_ax1)
A_shared_ax0_ax1_fused_o, A_shared_ax0_ax1_fused_i = s[A_shared].split(A_shared_ax0_ax1_fused, factor=4)
s[A_shared].vectorize(A_shared_ax0_ax1_fused_i)
A_shared_ax0_ax1_fused_o_o, A_shared_ax0_ax1_fused_o_i = s[A_shared].split(A_shared_ax0_ax1_fused_o, factor=32)
s[A_shared].bind(A_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
s[transposed_gemm].pragma(transposed_gemm_i_o_o_o_o, "auto_unroll_max_step", 16)
s[transposed_gemm].pragma(transposed_gemm_i_o_o_o_o, "unroll_explicit", True)

Equivalent CUDA code:

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(32) default_function_kernel(float* __restrict__ A, float* __restrict__ B, float* __restrict__ C, float* __restrict__ out) {
  float transposed_gemm[8];
  __shared__ float A_shared[2048];
  __shared__ float B_shared[2048];
  transposed_gemm[0] = 0.000000e+00f;
  transposed_gemm[1] = 0.000000e+00f;
  transposed_gemm[2] = 0.000000e+00f;
  transposed_gemm[3] = 0.000000e+00f;
  transposed_gemm[4] = 0.000000e+00f;
  transposed_gemm[5] = 0.000000e+00f;
  transposed_gemm[6] = 0.000000e+00f;
  transposed_gemm[7] = 0.000000e+00f;
  for (int k_outer_outer = 0; k_outer_outer < 8; ++k_outer_outer) {
    __syncthreads();
    *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + ((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 128)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 1024));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 256)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 2048));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 384)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 3072));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 512)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 4096));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 640)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 5120));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 768)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 6144));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 896)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 7168));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 1024)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 8192));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 1152)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 9216));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 1280)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 10240));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 1408)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 11264));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 1536)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 12288));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 1664)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 13312));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 1792)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 14336));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 1920)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 15360));
    for (int ax0_ax1_fused_outer_outer = 0; ax0_ax1_fused_outer_outer < 32; ++ax0_ax1_fused_outer_outer) {
      *(float2*)(B_shared + ((ax0_ax1_fused_outer_outer * 64) + (((int)threadIdx.x) * 2))) = *(float2*)(B + ((((((((int)blockIdx.x) & 15) * 16384) + ((ax0_ax1_fused_outer_outer >> 1) * 1024)) + (k_outer_outer * 128)) + ((ax0_ax1_fused_outer_outer & 1) * 64)) + (((int)threadIdx.x) * 2)));
    }
    __syncthreads();
    for (int k_outer_inner = 0; k_outer_inner < 16; ++k_outer_inner) {
      for (int i_outer_inner = 0; i_outer_inner < 8; ++i_outer_inner) {
        transposed_gemm[i_outer_inner] = (transposed_gemm[i_outer_inner] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (i_outer_inner * 128)) + (k_outer_inner * 8))] * B_shared[(((((int)threadIdx.x) & 15) * 128) + (k_outer_inner * 8))]));
        transposed_gemm[i_outer_inner] = (transposed_gemm[i_outer_inner] + (A_shared[(((((((int)threadIdx.x) >> 4) * 1024) + (i_outer_inner * 128)) + (k_outer_inner * 8)) + 1)] * B_shared[((((((int)threadIdx.x) & 15) * 128) + (k_outer_inner * 8)) + 1)]));
        transposed_gemm[i_outer_inner] = (transposed_gemm[i_outer_inner] + (A_shared[(((((((int)threadIdx.x) >> 4) * 1024) + (i_outer_inner * 128)) + (k_outer_inner * 8)) + 2)] * B_shared[((((((int)threadIdx.x) & 15) * 128) + (k_outer_inner * 8)) + 2)]));
        transposed_gemm[i_outer_inner] = (transposed_gemm[i_outer_inner] + (A_shared[(((((((int)threadIdx.x) >> 4) * 1024) + (i_outer_inner * 128)) + (k_outer_inner * 8)) + 3)] * B_shared[((((((int)threadIdx.x) & 15) * 128) + (k_outer_inner * 8)) + 3)]));
        transposed_gemm[i_outer_inner] = (transposed_gemm[i_outer_inner] + (A_shared[(((((((int)threadIdx.x) >> 4) * 1024) + (i_outer_inner * 128)) + (k_outer_inner * 8)) + 4)] * B_shared[((((((int)threadIdx.x) & 15) * 128) + (k_outer_inner * 8)) + 4)]));
        transposed_gemm[i_outer_inner] = (transposed_gemm[i_outer_inner] + (A_shared[(((((((int)threadIdx.x) >> 4) * 1024) + (i_outer_inner * 128)) + (k_outer_inner * 8)) + 5)] * B_shared[((((((int)threadIdx.x) & 15) * 128) + (k_outer_inner * 8)) + 5)]));
        transposed_gemm[i_outer_inner] = (transposed_gemm[i_outer_inner] + (A_shared[(((((((int)threadIdx.x) >> 4) * 1024) + (i_outer_inner * 128)) + (k_outer_inner * 8)) + 6)] * B_shared[((((((int)threadIdx.x) & 15) * 128) + (k_outer_inner * 8)) + 6)]));
        transposed_gemm[i_outer_inner] = (transposed_gemm[i_outer_inner] + (A_shared[(((((((int)threadIdx.x) >> 4) * 1024) + (i_outer_inner * 128)) + (k_outer_inner * 8)) + 7)] * B_shared[((((((int)threadIdx.x) & 15) * 128) + (k_outer_inner * 8)) + 7)]));
      }
    }
  }
  for (int i_inner = 0; i_inner < 8; ++i_inner) {
    out[((((((((int)blockIdx.x) >> 4) * 4096) + ((((int)threadIdx.x) >> 4) * 2048)) + (i_inner * 256)) + ((((int)blockIdx.x) & 15) * 16)) + (((int)threadIdx.x) & 15))] = (transposed_gemm[i_inner] + C[((((((((int)blockIdx.x) >> 4) * 4096) + ((((int)threadIdx.x) >> 4) * 2048)) + (i_inner * 256)) + ((((int)blockIdx.x) & 15) * 16)) + (((int)threadIdx.x) & 15))]);
  }
}


