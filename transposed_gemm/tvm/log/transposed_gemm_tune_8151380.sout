----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Generate Sketches		#s: 1
Sample Initial Population	#s: 167	fail_ct: 1881	Time elapsed: 4.79
GA Iter: 0	Max score: 0.9992	Min score: 0.2215	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 1.0000	Min score: 0.9801	#Pop: 128	#M+: 1399	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.39
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 0.40 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 155	fail_ct: 1893	Time elapsed: 2.80
GA Iter: 0	Max score: 0.9897	Min score: 0.1766	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 1.0000	Min score: 0.9794	#Pop: 128	#M+: 1399	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.46
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 0.85 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 155	fail_ct: 1893	Time elapsed: 2.77
GA Iter: 0	Max score: 0.9971	Min score: 0.2181	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9971	Min score: 0.9971	#Pop: 128	#M+: 1396	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.19
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.36 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 178	fail_ct: 1870	Time elapsed: 2.75
GA Iter: 0	Max score: 0.6583	Min score: 0.1616	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 1.0142	Min score: 0.8728	#Pop: 128	#M+: 1375	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.14
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.32 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 164	fail_ct: 1884	Time elapsed: 2.64
GA Iter: 0	Max score: 0.6438	Min score: 0.0870	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9541	Min score: 0.9237	#Pop: 128	#M+: 1390	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.18
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.62 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 177	fail_ct: 1871	Time elapsed: 2.89
GA Iter: 0	Max score: 0.8465	Min score: 0.1557	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9605	Min score: 0.9430	#Pop: 128	#M+: 1391	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.71
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.77 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 156	fail_ct: 1892	Time elapsed: 2.64
GA Iter: 0	Max score: 0.7696	Min score: 0.0922	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9743	Min score: 0.9434	#Pop: 128	#M+: 1396	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 32.76
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.04 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 169	fail_ct: 1879	Time elapsed: 2.75
GA Iter: 0	Max score: 0.7829	Min score: 0.1233	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9611	Min score: 0.9424	#Pop: 128	#M+: 1387	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 33.10
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.18 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 175	fail_ct: 1873	Time elapsed: 2.68
GA Iter: 0	Max score: 0.6327	Min score: 0.0954	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9655	Min score: 0.9415	#Pop: 128	#M+: 1394	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 33.24
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.08 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 163	fail_ct: 1885	Time elapsed: 2.74
GA Iter: 0	Max score: 0.7944	Min score: 0.0871	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9618	Min score: 0.9386	#Pop: 128	#M+: 1392	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 33.29
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.16 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 184	fail_ct: 1864	Time elapsed: 2.75
GA Iter: 0	Max score: 0.7843	Min score: 0.1052	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9627	Min score: 0.9379	#Pop: 128	#M+: 1398	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 33.36
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.54 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 169	fail_ct: 1879	Time elapsed: 2.70
GA Iter: 0	Max score: 0.7913	Min score: 0.1044	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9584	Min score: 0.9364	#Pop: 128	#M+: 1404	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 33.27
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.60 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 180	fail_ct: 1868	Time elapsed: 2.75
GA Iter: 0	Max score: 0.5460	Min score: 0.0816	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9563	Min score: 0.9370	#Pop: 128	#M+: 1392	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 33.27
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.72 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 178	fail_ct: 1870	Time elapsed: 2.78
GA Iter: 0	Max score: 0.5917	Min score: 0.0693	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9553	Min score: 0.9363	#Pop: 128	#M+: 1385	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 33.30
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.44 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 172	fail_ct: 1876	Time elapsed: 2.64
GA Iter: 0	Max score: 0.8565	Min score: 0.0764	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9485	Min score: 0.9351	#Pop: 128	#M+: 1385	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 33.19
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.46 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 155	fail_ct: 1893	Time elapsed: 2.75
GA Iter: 0	Max score: 0.7032	Min score: 0.0522	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9565	Min score: 0.9305	#Pop: 128	#M+: 1388	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 33.12
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Done ]
----------------------------------------------------------------------
arc=sm_80
Computational DAG:
A = PLACEHOLDER [256, 1024]
B = PLACEHOLDER [256, 1024]
transposed_gemm(i, j) += (A[i, k]*B[j, k])
C = PLACEHOLDER [256, 256]
out(i, j) = (transposed_gemm[i, j] + C[i, j])

Lowered TIR:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((256, 1024), "float32"), B: T.Buffer((256, 1024), "float32"), C: T.Buffer((256, 256), "float32"), out: T.Buffer((256, 256), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "global_symbol": "main", "tir.noalias": T.bool(True)})
        blockIdx_x = T.launch_thread("blockIdx.x", 256)
        transposed_gemm = T.allocate([8], "float32", "local")
        A_shared = T.allocate([2048], "float32", "shared")
        B_shared = T.allocate([2048], "float32", "shared")
        threadIdx_x = T.launch_thread("threadIdx.x", 32)
        transposed_gemm_1 = T.Buffer((8,), data=transposed_gemm, scope="local", align=32)
        transposed_gemm_1[0] = T.float32(0)
        transposed_gemm_1[1] = T.float32(0)
        transposed_gemm_1[2] = T.float32(0)
        transposed_gemm_1[3] = T.float32(0)
        transposed_gemm_1[4] = T.float32(0)
        transposed_gemm_1[5] = T.float32(0)
        transposed_gemm_1[6] = T.float32(0)
        transposed_gemm_1[7] = T.float32(0)
        for k_outer_outer in range(8):
            threadIdx_x_1 = T.env_thread("threadIdx.x")
            A_shared_1 = T.Buffer((2048,), data=A_shared, scope="shared")
            A_1 = T.Buffer((262144,), data=A.data)
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4:threadIdx_x_1 * 4 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 128:threadIdx_x_1 * 4 + 128 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 1024:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 1024 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 256:threadIdx_x_1 * 4 + 256 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 2048:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 2048 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 384:threadIdx_x_1 * 4 + 384 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 3072:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 3072 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 512:threadIdx_x_1 * 4 + 512 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 4096:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 4096 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 640:threadIdx_x_1 * 4 + 640 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 5120:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 5120 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 768:threadIdx_x_1 * 4 + 768 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 6144:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 6144 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 896:threadIdx_x_1 * 4 + 896 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 7168:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 7168 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 1024:threadIdx_x_1 * 4 + 1024 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 8192:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 8192 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 1152:threadIdx_x_1 * 4 + 1152 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 9216:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 9216 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 1280:threadIdx_x_1 * 4 + 1280 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 10240:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 10240 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 1408:threadIdx_x_1 * 4 + 1408 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 11264:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 11264 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 1536:threadIdx_x_1 * 4 + 1536 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 12288:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 12288 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 1664:threadIdx_x_1 * 4 + 1664 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 13312:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 13312 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 1792:threadIdx_x_1 * 4 + 1792 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 14336:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 14336 + 4]
            with T.launch_thread(threadIdx_x_1, 32):
                A_shared_1[threadIdx_x_1 * 4 + 1920:threadIdx_x_1 * 4 + 1920 + 4] = A_1[blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 15360:blockIdx_x // 16 * 16384 + k_outer_outer * 128 + threadIdx_x_1 * 4 + 15360 + 4]
            B_shared_1 = T.Buffer((2048,), data=B_shared, scope="shared")
            for ax0_ax1_fused_outer_outer in range(32):
                threadIdx_x_2 = T.launch_thread("threadIdx.x", 32)
                B_1 = T.Buffer((262144,), data=B.data)
                B_shared_1[ax0_ax1_fused_outer_outer * 64 + threadIdx_x_2 * 2:ax0_ax1_fused_outer_outer * 64 + threadIdx_x_2 * 2 + 2] = B_1[blockIdx_x % 16 * 16384 + ax0_ax1_fused_outer_outer // 2 * 1024 + k_outer_outer * 128 + ax0_ax1_fused_outer_outer % 2 * 64 + threadIdx_x_2 * 2:blockIdx_x % 16 * 16384 + ax0_ax1_fused_outer_outer // 2 * 1024 + k_outer_outer * 128 + ax0_ax1_fused_outer_outer % 2 * 64 + threadIdx_x_2 * 2 + 2]
            for k_outer_inner, i_outer_inner in T.grid(16, 8):
                cse_var_1: T.int32 = k_outer_inner * 8
                transposed_gemm_1[i_outer_inner] = transposed_gemm_1[i_outer_inner] + A_shared_1[threadIdx_x // 16 * 1024 + i_outer_inner * 128 + cse_var_1] * B_shared_1[threadIdx_x % 16 * 128 + cse_var_1]
                transposed_gemm_1[i_outer_inner] = transposed_gemm_1[i_outer_inner] + A_shared_1[threadIdx_x // 16 * 1024 + i_outer_inner * 128 + cse_var_1 + 1] * B_shared_1[threadIdx_x % 16 * 128 + cse_var_1 + 1]
                transposed_gemm_1[i_outer_inner] = transposed_gemm_1[i_outer_inner] + A_shared_1[threadIdx_x // 16 * 1024 + i_outer_inner * 128 + cse_var_1 + 2] * B_shared_1[threadIdx_x % 16 * 128 + cse_var_1 + 2]
                transposed_gemm_1[i_outer_inner] = transposed_gemm_1[i_outer_inner] + A_shared_1[threadIdx_x // 16 * 1024 + i_outer_inner * 128 + cse_var_1 + 3] * B_shared_1[threadIdx_x % 16 * 128 + cse_var_1 + 3]
                transposed_gemm_1[i_outer_inner] = transposed_gemm_1[i_outer_inner] + A_shared_1[threadIdx_x // 16 * 1024 + i_outer_inner * 128 + cse_var_1 + 4] * B_shared_1[threadIdx_x % 16 * 128 + cse_var_1 + 4]
                transposed_gemm_1[i_outer_inner] = transposed_gemm_1[i_outer_inner] + A_shared_1[threadIdx_x // 16 * 1024 + i_outer_inner * 128 + cse_var_1 + 5] * B_shared_1[threadIdx_x % 16 * 128 + cse_var_1 + 5]
                transposed_gemm_1[i_outer_inner] = transposed_gemm_1[i_outer_inner] + A_shared_1[threadIdx_x // 16 * 1024 + i_outer_inner * 128 + cse_var_1 + 6] * B_shared_1[threadIdx_x % 16 * 128 + cse_var_1 + 6]
                transposed_gemm_1[i_outer_inner] = transposed_gemm_1[i_outer_inner] + A_shared_1[threadIdx_x // 16 * 1024 + i_outer_inner * 128 + cse_var_1 + 7] * B_shared_1[threadIdx_x % 16 * 128 + cse_var_1 + 7]
        for i_inner in range(8):
            out_1 = T.Buffer((65536,), data=out.data)
            C_1 = T.Buffer((65536,), data=C.data)
            out_1[blockIdx_x // 16 * 4096 + threadIdx_x // 16 * 2048 + i_inner * 256 + blockIdx_x % 16 * 16 + threadIdx_x % 16] = transposed_gemm_1[i_inner] + C_1[blockIdx_x // 16 * 4096 + threadIdx_x // 16 * 2048 + i_inner * 256 + blockIdx_x % 16 * 16 + threadIdx_x % 16]
Equivalent python schedule:
transposed_gemm_i, transposed_gemm_j, transposed_gemm_k = tuple(transposed_gemm.op.axis) + tuple(transposed_gemm.op.reduce_axis)
out_i, out_j = tuple(out.op.axis) + tuple(out.op.reduce_axis)
transposed_gemm_i_o_i, transposed_gemm_i_i = s[transposed_gemm].split(transposed_gemm_i, factor=1)
transposed_gemm_i_o_o_i, transposed_gemm_i_o_i = s[transposed_gemm].split(transposed_gemm_i_o_i, factor=8)
transposed_gemm_i_o_o_o_i, transposed_gemm_i_o_o_i = s[transposed_gemm].split(transposed_gemm_i_o_o_i, factor=2)
transposed_gemm_i_o_o_o_o, transposed_gemm_i_o_o_o_i = s[transposed_gemm].split(transposed_gemm_i_o_o_o_i, factor=1)
transposed_gemm_j_o_i, transposed_gemm_j_i = s[transposed_gemm].split(transposed_gemm_j, factor=1)
transposed_gemm_j_o_o_i, transposed_gemm_j_o_i = s[transposed_gemm].split(transposed_gemm_j_o_i, factor=1)
transposed_gemm_j_o_o_o_i, transposed_gemm_j_o_o_i = s[transposed_gemm].split(transposed_gemm_j_o_o_i, factor=16)
transposed_gemm_j_o_o_o_o, transposed_gemm_j_o_o_o_i = s[transposed_gemm].split(transposed_gemm_j_o_o_o_i, factor=1)
transposed_gemm_k_o_i, transposed_gemm_k_i = s[transposed_gemm].split(transposed_gemm_k, factor=8)
transposed_gemm_k_o_o, transposed_gemm_k_o_i = s[transposed_gemm].split(transposed_gemm_k_o_i, factor=16)
s[transposed_gemm].reorder(transposed_gemm_i_o_o_o_o, transposed_gemm_j_o_o_o_o, transposed_gemm_i_o_o_o_i, transposed_gemm_j_o_o_o_i, transposed_gemm_i_o_o_i, transposed_gemm_j_o_o_i, transposed_gemm_k_o_o, transposed_gemm_k_o_i, transposed_gemm_i_o_i, transposed_gemm_j_o_i, transposed_gemm_k_i, transposed_gemm_i_i, transposed_gemm_j_i)
out_i_o_i, out_i_i = s[out].split(out_i, factor=8)
out_i_o_o_i, out_i_o_i = s[out].split(out_i_o_i, factor=2)
out_i_o_o_o, out_i_o_o_i = s[out].split(out_i_o_o_i, factor=1)
out_j_o_i, out_j_i = s[out].split(out_j, factor=1)
out_j_o_o_i, out_j_o_i = s[out].split(out_j_o_i, factor=16)
out_j_o_o_o, out_j_o_o_i = s[out].split(out_j_o_o_i, factor=1)
s[out].reorder(out_i_o_o_o, out_j_o_o_o, out_i_o_o_i, out_j_o_o_i, out_i_o_i, out_j_o_i, out_i_i, out_j_i)
s[transposed_gemm].compute_at(s[out], out_j_o_i)
B_shared = s.cache_read(B, "shared", [transposed_gemm])
B_shared_ax0, B_shared_ax1 = tuple(B_shared.op.axis)
s[B_shared].compute_at(s[transposed_gemm], transposed_gemm_k_o_o)
A_shared = s.cache_read(A, "shared", [transposed_gemm])
A_shared_ax0, A_shared_ax1 = tuple(A_shared.op.axis)
s[A_shared].compute_at(s[transposed_gemm], transposed_gemm_k_o_o)
out_i_o_o_o_j_o_o_o_fused = s[out].fuse(out_i_o_o_o, out_j_o_o_o)
s[out].bind(out_i_o_o_o_j_o_o_o_fused, te.thread_axis("blockIdx.x"))
out_i_o_o_i_j_o_o_i_fused = s[out].fuse(out_i_o_o_i, out_j_o_o_i)
s[out].bind(out_i_o_o_i_j_o_o_i_fused, te.thread_axis("vthread"))
out_i_o_i_j_o_i_fused = s[out].fuse(out_i_o_i, out_j_o_i)
s[out].bind(out_i_o_i_j_o_i_fused, te.thread_axis("threadIdx.x"))
B_shared_ax0_ax1_fused = s[B_shared].fuse(B_shared_ax0, B_shared_ax1)
B_shared_ax0_ax1_fused_o, B_shared_ax0_ax1_fused_i = s[B_shared].split(B_shared_ax0_ax1_fused, factor=2)
s[B_shared].vectorize(B_shared_ax0_ax1_fused_i)
B_shared_ax0_ax1_fused_o_o, B_shared_ax0_ax1_fused_o_i = s[B_shared].split(B_shared_ax0_ax1_fused_o, factor=32)
s[B_shared].bind(B_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
A_shared_ax0_ax1_fused = s[A_shared].fuse(A_shared_ax0, A_shared_ax1)
A_shared_ax0_ax1_fused_o, A_shared_ax0_ax1_fused_i = s[A_shared].split(A_shared_ax0_ax1_fused, factor=4)
s[A_shared].vectorize(A_shared_ax0_ax1_fused_i)
A_shared_ax0_ax1_fused_o_o, A_shared_ax0_ax1_fused_o_i = s[A_shared].split(A_shared_ax0_ax1_fused_o, factor=32)
s[A_shared].bind(A_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
s[transposed_gemm].pragma(transposed_gemm_i_o_o_o_o, "auto_unroll_max_step", 16)
s[transposed_gemm].pragma(transposed_gemm_i_o_o_o_o, "unroll_explicit", True)

Equivalent CUDA code:

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(32) default_function_kernel(float* __restrict__ A, float* __restrict__ B, float* __restrict__ C, float* __restrict__ out) {
  float transposed_gemm[8];
  __shared__ float A_shared[2048];
  __shared__ float B_shared[2048];
  transposed_gemm[0] = 0.000000e+00f;
  transposed_gemm[1] = 0.000000e+00f;
  transposed_gemm[2] = 0.000000e+00f;
  transposed_gemm[3] = 0.000000e+00f;
  transposed_gemm[4] = 0.000000e+00f;
  transposed_gemm[5] = 0.000000e+00f;
  transposed_gemm[6] = 0.000000e+00f;
  transposed_gemm[7] = 0.000000e+00f;
  for (int k_outer_outer = 0; k_outer_outer < 8; ++k_outer_outer) {
    __syncthreads();
    *(float4*)(A_shared + (((int)threadIdx.x) * 4)) = *(float4*)(A + ((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 128)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 1024));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 256)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 2048));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 384)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 3072));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 512)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 4096));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 640)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 5120));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 768)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 6144));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 896)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 7168));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 1024)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 8192));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 1152)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 9216));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 1280)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 10240));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 1408)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 11264));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 1536)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 12288));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 1664)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 13312));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 1792)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 14336));
    *(float4*)(A_shared + ((((int)threadIdx.x) * 4) + 1920)) = *(float4*)(A + (((((((int)blockIdx.x) >> 4) * 16384) + (k_outer_outer * 128)) + (((int)threadIdx.x) * 4)) + 15360));
    for (int ax0_ax1_fused_outer_outer = 0; ax0_ax1_fused_outer_outer < 32; ++ax0_ax1_fused_outer_outer) {
      *(float2*)(B_shared + ((ax0_ax1_fused_outer_outer * 64) + (((int)threadIdx.x) * 2))) = *(float2*)(B + ((((((((int)blockIdx.x) & 15) * 16384) + ((ax0_ax1_fused_outer_outer >> 1) * 1024)) + (k_outer_outer * 128)) + ((ax0_ax1_fused_outer_outer & 1) * 64)) + (((int)threadIdx.x) * 2)));
    }
    __syncthreads();
    for (int k_outer_inner = 0; k_outer_inner < 16; ++k_outer_inner) {
      for (int i_outer_inner = 0; i_outer_inner < 8; ++i_outer_inner) {
        transposed_gemm[i_outer_inner] = (transposed_gemm[i_outer_inner] + (A_shared[((((((int)threadIdx.x) >> 4) * 1024) + (i_outer_inner * 128)) + (k_outer_inner * 8))] * B_shared[(((((int)threadIdx.x) & 15) * 128) + (k_outer_inner * 8))]));
        transposed_gemm[i_outer_inner] = (transposed_gemm[i_outer_inner] + (A_shared[(((((((int)threadIdx.x) >> 4) * 1024) + (i_outer_inner * 128)) + (k_outer_inner * 8)) + 1)] * B_shared[((((((int)threadIdx.x) & 15) * 128) + (k_outer_inner * 8)) + 1)]));
        transposed_gemm[i_outer_inner] = (transposed_gemm[i_outer_inner] + (A_shared[(((((((int)threadIdx.x) >> 4) * 1024) + (i_outer_inner * 128)) + (k_outer_inner * 8)) + 2)] * B_shared[((((((int)threadIdx.x) & 15) * 128) + (k_outer_inner * 8)) + 2)]));
        transposed_gemm[i_outer_inner] = (transposed_gemm[i_outer_inner] + (A_shared[(((((((int)threadIdx.x) >> 4) * 1024) + (i_outer_inner * 128)) + (k_outer_inner * 8)) + 3)] * B_shared[((((((int)threadIdx.x) & 15) * 128) + (k_outer_inner * 8)) + 3)]));
        transposed_gemm[i_outer_inner] = (transposed_gemm[i_outer_inner] + (A_shared[(((((((int)threadIdx.x) >> 4) * 1024) + (i_outer_inner * 128)) + (k_outer_inner * 8)) + 4)] * B_shared[((((((int)threadIdx.x) & 15) * 128) + (k_outer_inner * 8)) + 4)]));
        transposed_gemm[i_outer_inner] = (transposed_gemm[i_outer_inner] + (A_shared[(((((((int)threadIdx.x) >> 4) * 1024) + (i_outer_inner * 128)) + (k_outer_inner * 8)) + 5)] * B_shared[((((((int)threadIdx.x) & 15) * 128) + (k_outer_inner * 8)) + 5)]));
        transposed_gemm[i_outer_inner] = (transposed_gemm[i_outer_inner] + (A_shared[(((((((int)threadIdx.x) >> 4) * 1024) + (i_outer_inner * 128)) + (k_outer_inner * 8)) + 6)] * B_shared[((((((int)threadIdx.x) & 15) * 128) + (k_outer_inner * 8)) + 6)]));
        transposed_gemm[i_outer_inner] = (transposed_gemm[i_outer_inner] + (A_shared[(((((((int)threadIdx.x) >> 4) * 1024) + (i_outer_inner * 128)) + (k_outer_inner * 8)) + 7)] * B_shared[((((((int)threadIdx.x) & 15) * 128) + (k_outer_inner * 8)) + 7)]));
      }
    }
  }
  for (int i_inner = 0; i_inner < 8; ++i_inner) {
    out[((((((((int)blockIdx.x) >> 4) * 4096) + ((((int)threadIdx.x) >> 4) * 2048)) + (i_inner * 256)) + ((((int)blockIdx.x) & 15) * 16)) + (((int)threadIdx.x) & 15))] = (transposed_gemm[i_inner] + C[((((((((int)blockIdx.x) >> 4) * 4096) + ((((int)threadIdx.x) >> 4) * 2048)) + (i_inner * 256)) + ((((int)blockIdx.x) & 15) * 16)) + (((int)threadIdx.x) & 15))]);
  }
}


