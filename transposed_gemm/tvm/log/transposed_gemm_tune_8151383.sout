----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Generate Sketches		#s: 1
Sample Initial Population	#s: 270	fail_ct: 1778	Time elapsed: 3.77
GA Iter: 0	Max score: 0.9863	Min score: 0.5439	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9999	Min score: 0.9823	#Pop: 128	#M+: 1388	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 33.30
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 0.70 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 268	fail_ct: 1780	Time elapsed: 3.01
GA Iter: 0	Max score: 0.9956	Min score: 0.5227	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9994	Min score: 0.9808	#Pop: 128	#M+: 1399	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 33.82
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.21 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 279	fail_ct: 1769	Time elapsed: 3.02
GA Iter: 0	Max score: 0.8794	Min score: 0.2726	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9897	Min score: 0.8798	#Pop: 128	#M+: 1383	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 33.62
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.33 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 279	fail_ct: 1769	Time elapsed: 3.00
GA Iter: 0	Max score: 0.7911	Min score: 0.2330	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9694	Min score: 0.8232	#Pop: 128	#M+: 1387	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 34.23
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.49 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 261	fail_ct: 1787	Time elapsed: 3.01
GA Iter: 0	Max score: 0.5880	Min score: 0.1062	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9909	Min score: 0.8599	#Pop: 128	#M+: 1387	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 33.94
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.09 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 260	fail_ct: 1788	Time elapsed: 2.95
GA Iter: 0	Max score: 0.6987	Min score: 0.0731	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9844	Min score: 0.9068	#Pop: 128	#M+: 1395	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 34.34
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.04 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 255	fail_ct: 1793	Time elapsed: 2.93
GA Iter: 0	Max score: 0.7102	Min score: 0.0574	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9877	Min score: 0.8902	#Pop: 128	#M+: 1382	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 34.62
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.78 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 258	fail_ct: 1790	Time elapsed: 2.97
GA Iter: 0	Max score: 0.6554	Min score: 0.0732	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9751	Min score: 0.8834	#Pop: 128	#M+: 1388	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 34.88
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 1.87 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 259	fail_ct: 1789	Time elapsed: 3.04
GA Iter: 0	Max score: 0.7950	Min score: 0.0997	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 1.1578	Min score: 0.9084	#Pop: 128	#M+: 1388	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 34.91
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.00 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 288	fail_ct: 1760	Time elapsed: 3.11
GA Iter: 0	Max score: 0.8200	Min score: 0.1522	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9912	Min score: 0.9173	#Pop: 128	#M+: 1390	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 34.70
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.75 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 288	fail_ct: 1760	Time elapsed: 3.05
GA Iter: 0	Max score: 0.6830	Min score: 0.1440	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9813	Min score: 0.9017	#Pop: 128	#M+: 1396	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 34.61
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.08 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 284	fail_ct: 1764	Time elapsed: 3.07
GA Iter: 0	Max score: 0.6155	Min score: 0.1687	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9828	Min score: 0.9312	#Pop: 128	#M+: 1380	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 34.50
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.48 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 231	fail_ct: 1817	Time elapsed: 2.92
GA Iter: 0	Max score: 0.8058	Min score: 0.1105	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9789	Min score: 0.9176	#Pop: 128	#M+: 1396	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 34.22
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.46 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 267	fail_ct: 1781	Time elapsed: 3.06
GA Iter: 0	Max score: 0.6427	Min score: 0.1249	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9794	Min score: 0.9188	#Pop: 128	#M+: 1396	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 34.76
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.34 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 281	fail_ct: 1767	Time elapsed: 3.07
GA Iter: 0	Max score: 0.6942	Min score: 0.1600	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9809	Min score: 0.9259	#Pop: 128	#M+: 1397	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 35.02
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Train cost model ]
----------------------------------------------------------------------
Time elapsed for training: 2.97 s
----------------------------------------------------------------------
------------------------------  [ Search ]
----------------------------------------------------------------------
Sample Initial Population	#s: 292	fail_ct: 1756	Time elapsed: 3.14
GA Iter: 0	Max score: 0.5717	Min score: 0.1555	#Pop: 128	#M+: 0	#M-: 0
GA Iter: 4	Max score: 0.9844	Min score: 0.9346	#Pop: 128	#M+: 1389	#M-: 0
EvolutionarySearch		#s: 128	Time elapsed: 35.09
----------------------------------------------------------------------
------------------------------  [ Measure ]
----------------------------------------------------------------------
----------------------------------------------------------------------
------------------------------  [ Done ]
----------------------------------------------------------------------
arc=sm_80
Computational DAG:
A = PLACEHOLDER [1024, 32]
B = PLACEHOLDER [1024, 32]
transposed_gemm(i, j) += (A[i, k]*B[j, k])
C = PLACEHOLDER [1024, 1024]
out(i, j) = (transposed_gemm[i, j] + C[i, j])

Lowered TIR:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1024, 32), "float32"), B: T.Buffer((1024, 32), "float32"), C: T.Buffer((1024, 1024), "float32"), out: T.Buffer((1024, 1024), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "global_symbol": "main", "tir.noalias": T.bool(True)})
        blockIdx_x = T.launch_thread("blockIdx.x", 512)
        transposed_gemm = T.allocate([16], "float32", "local")
        A_shared = T.allocate([256], "float32", "shared")
        B_shared = T.allocate([512], "float32", "shared")
        threadIdx_x = T.launch_thread("threadIdx.x", 128)
        transposed_gemm_1 = T.Buffer((4,), data=transposed_gemm, scope="local", align=8)
        for i_inner_init in range(2):
            transposed_gemm_1[i_inner_init] = T.float32(0)
            transposed_gemm_1[i_inner_init + 2] = T.float32(0)
            transposed_gemm_1[i_inner_init + 4] = T.float32(0)
            transposed_gemm_1[i_inner_init + 6] = T.float32(0)
            transposed_gemm_1[i_inner_init + 8] = T.float32(0)
            transposed_gemm_1[i_inner_init + 10] = T.float32(0)
            transposed_gemm_1[i_inner_init + 12] = T.float32(0)
            transposed_gemm_1[i_inner_init + 14] = T.float32(0)
        for k_outer_outer in range(4):
            A_shared_1 = T.Buffer((256,), data=A_shared, scope="shared")
            for ax0_ax1_fused_outer_outer in range(2):
                threadIdx_x_1 = T.launch_thread("threadIdx.x", 128)
                A_1 = T.Buffer((32768,), data=A.data)
                A_shared_1[ax0_ax1_fused_outer_outer * 128 + threadIdx_x_1] = A_1[blockIdx_x // 16 * 1024 + ax0_ax1_fused_outer_outer * 512 + threadIdx_x_1 // 8 * 32 + k_outer_outer * 8 + threadIdx_x_1 % 8]
            B_shared_1 = T.Buffer((512,), data=B_shared, scope="shared")
            for ax0_ax1_fused_outer_outer in range(4):
                threadIdx_x_1 = T.launch_thread("threadIdx.x", 128)
                B_1 = T.Buffer((32768,), data=B.data)
                B_shared_1[ax0_ax1_fused_outer_outer * 128 + threadIdx_x_1] = B_1[blockIdx_x % 16 * 2048 + ax0_ax1_fused_outer_outer * 512 + threadIdx_x_1 // 8 * 32 + k_outer_outer * 8 + threadIdx_x_1 % 8]
            for k_outer_inner, k_inner, i_inner in T.grid(2, 4, 2):
                cse_var_8: T.int32 = k_outer_inner * 4
                cse_var_7: T.int32 = i_inner + 8
                cse_var_6: T.int32 = i_inner + 6
                cse_var_5: T.int32 = i_inner + 4
                cse_var_4: T.int32 = i_inner + 2
                cse_var_3: T.int32 = i_inner + 14
                cse_var_2: T.int32 = i_inner + 12
                cse_var_1: T.int32 = i_inner + 10
                transposed_gemm_1[i_inner] = transposed_gemm_1[i_inner] + A_shared_1[threadIdx_x // 32 * 16 + i_inner * 8 + cse_var_8 + k_inner] * B_shared_1[threadIdx_x % 32 * 8 + cse_var_8 + k_inner]
                transposed_gemm_1[cse_var_4] = transposed_gemm_1[cse_var_4] + A_shared_1[threadIdx_x // 32 * 16 + i_inner * 8 + cse_var_8 + k_inner] * B_shared_1[threadIdx_x % 32 * 8 + cse_var_8 + k_inner + 256]
                transposed_gemm_1[cse_var_5] = transposed_gemm_1[cse_var_5] + A_shared_1[threadIdx_x // 32 * 16 + i_inner * 8 + cse_var_8 + k_inner + 64] * B_shared_1[threadIdx_x % 32 * 8 + cse_var_8 + k_inner]
                transposed_gemm_1[cse_var_6] = transposed_gemm_1[cse_var_6] + A_shared_1[threadIdx_x // 32 * 16 + i_inner * 8 + cse_var_8 + k_inner + 64] * B_shared_1[threadIdx_x % 32 * 8 + cse_var_8 + k_inner + 256]
                transposed_gemm_1[cse_var_7] = transposed_gemm_1[cse_var_7] + A_shared_1[threadIdx_x // 32 * 16 + i_inner * 8 + cse_var_8 + k_inner + 128] * B_shared_1[threadIdx_x % 32 * 8 + cse_var_8 + k_inner]
                transposed_gemm_1[cse_var_1] = transposed_gemm_1[cse_var_1] + A_shared_1[threadIdx_x // 32 * 16 + i_inner * 8 + cse_var_8 + k_inner + 128] * B_shared_1[threadIdx_x % 32 * 8 + cse_var_8 + k_inner + 256]
                transposed_gemm_1[cse_var_2] = transposed_gemm_1[cse_var_2] + A_shared_1[threadIdx_x // 32 * 16 + i_inner * 8 + cse_var_8 + k_inner + 192] * B_shared_1[threadIdx_x % 32 * 8 + cse_var_8 + k_inner]
                transposed_gemm_1[cse_var_3] = transposed_gemm_1[cse_var_3] + A_shared_1[threadIdx_x // 32 * 16 + i_inner * 8 + cse_var_8 + k_inner + 192] * B_shared_1[threadIdx_x % 32 * 8 + cse_var_8 + k_inner + 256]
        for i_inner in range(2):
            out_1 = T.Buffer((1048576,), data=out.data)
            C_1 = T.Buffer((1048576,), data=C.data)
            out_1[blockIdx_x // 16 * 32768 + threadIdx_x // 32 * 2048 + i_inner * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32] = transposed_gemm_1[i_inner] + C_1[blockIdx_x // 16 * 32768 + threadIdx_x // 32 * 2048 + i_inner * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32]
            out_1[blockIdx_x // 16 * 32768 + threadIdx_x // 32 * 2048 + i_inner * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 + 32] = transposed_gemm_1[i_inner + 2] + C_1[blockIdx_x // 16 * 32768 + threadIdx_x // 32 * 2048 + i_inner * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 + 32]
            out_1[blockIdx_x // 16 * 32768 + threadIdx_x // 32 * 2048 + i_inner * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 + 8192] = transposed_gemm_1[i_inner + 4] + C_1[blockIdx_x // 16 * 32768 + threadIdx_x // 32 * 2048 + i_inner * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 + 8192]
            out_1[blockIdx_x // 16 * 32768 + threadIdx_x // 32 * 2048 + i_inner * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 + 8224] = transposed_gemm_1[i_inner + 6] + C_1[blockIdx_x // 16 * 32768 + threadIdx_x // 32 * 2048 + i_inner * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 + 8224]
            out_1[blockIdx_x // 16 * 32768 + threadIdx_x // 32 * 2048 + i_inner * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 + 16384] = transposed_gemm_1[i_inner + 8] + C_1[blockIdx_x // 16 * 32768 + threadIdx_x // 32 * 2048 + i_inner * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 + 16384]
            out_1[blockIdx_x // 16 * 32768 + threadIdx_x // 32 * 2048 + i_inner * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 + 16416] = transposed_gemm_1[i_inner + 10] + C_1[blockIdx_x // 16 * 32768 + threadIdx_x // 32 * 2048 + i_inner * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 + 16416]
            out_1[blockIdx_x // 16 * 32768 + threadIdx_x // 32 * 2048 + i_inner * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 + 24576] = transposed_gemm_1[i_inner + 12] + C_1[blockIdx_x // 16 * 32768 + threadIdx_x // 32 * 2048 + i_inner * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 + 24576]
            out_1[blockIdx_x // 16 * 32768 + threadIdx_x // 32 * 2048 + i_inner * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 + 24608] = transposed_gemm_1[i_inner + 14] + C_1[blockIdx_x // 16 * 32768 + threadIdx_x // 32 * 2048 + i_inner * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 + 24608]
Equivalent python schedule:
transposed_gemm_i, transposed_gemm_j, transposed_gemm_k = tuple(transposed_gemm.op.axis) + tuple(transposed_gemm.op.reduce_axis)
out_i, out_j = tuple(out.op.axis) + tuple(out.op.reduce_axis)
transposed_gemm_i_o_i, transposed_gemm_i_i = s[transposed_gemm].split(transposed_gemm_i, factor=2)
transposed_gemm_i_o_o_i, transposed_gemm_i_o_i = s[transposed_gemm].split(transposed_gemm_i_o_i, factor=1)
transposed_gemm_i_o_o_o_i, transposed_gemm_i_o_o_i = s[transposed_gemm].split(transposed_gemm_i_o_o_i, factor=4)
transposed_gemm_i_o_o_o_o, transposed_gemm_i_o_o_o_i = s[transposed_gemm].split(transposed_gemm_i_o_o_o_i, factor=4)
transposed_gemm_j_o_i, transposed_gemm_j_i = s[transposed_gemm].split(transposed_gemm_j, factor=1)
transposed_gemm_j_o_o_i, transposed_gemm_j_o_i = s[transposed_gemm].split(transposed_gemm_j_o_i, factor=1)
transposed_gemm_j_o_o_o_i, transposed_gemm_j_o_o_i = s[transposed_gemm].split(transposed_gemm_j_o_o_i, factor=32)
transposed_gemm_j_o_o_o_o, transposed_gemm_j_o_o_o_i = s[transposed_gemm].split(transposed_gemm_j_o_o_o_i, factor=2)
transposed_gemm_k_o_i, transposed_gemm_k_i = s[transposed_gemm].split(transposed_gemm_k, factor=4)
transposed_gemm_k_o_o, transposed_gemm_k_o_i = s[transposed_gemm].split(transposed_gemm_k_o_i, factor=2)
s[transposed_gemm].reorder(transposed_gemm_i_o_o_o_o, transposed_gemm_j_o_o_o_o, transposed_gemm_i_o_o_o_i, transposed_gemm_j_o_o_o_i, transposed_gemm_i_o_o_i, transposed_gemm_j_o_o_i, transposed_gemm_k_o_o, transposed_gemm_k_o_i, transposed_gemm_i_o_i, transposed_gemm_j_o_i, transposed_gemm_k_i, transposed_gemm_i_i, transposed_gemm_j_i)
out_i_o_i, out_i_i = s[out].split(out_i, factor=2)
out_i_o_o_i, out_i_o_i = s[out].split(out_i_o_i, factor=4)
out_i_o_o_o, out_i_o_o_i = s[out].split(out_i_o_o_i, factor=4)
out_j_o_i, out_j_i = s[out].split(out_j, factor=1)
out_j_o_o_i, out_j_o_i = s[out].split(out_j_o_i, factor=32)
out_j_o_o_o, out_j_o_o_i = s[out].split(out_j_o_o_i, factor=2)
s[out].reorder(out_i_o_o_o, out_j_o_o_o, out_i_o_o_i, out_j_o_o_i, out_i_o_i, out_j_o_i, out_i_i, out_j_i)
s[transposed_gemm].compute_at(s[out], out_j_o_i)
B_shared = s.cache_read(B, "shared", [transposed_gemm])
B_shared_ax0, B_shared_ax1 = tuple(B_shared.op.axis)
s[B_shared].compute_at(s[transposed_gemm], transposed_gemm_k_o_o)
A_shared = s.cache_read(A, "shared", [transposed_gemm])
A_shared_ax0, A_shared_ax1 = tuple(A_shared.op.axis)
s[A_shared].compute_at(s[transposed_gemm], transposed_gemm_k_o_o)
out_i_o_o_o_j_o_o_o_fused = s[out].fuse(out_i_o_o_o, out_j_o_o_o)
s[out].bind(out_i_o_o_o_j_o_o_o_fused, te.thread_axis("blockIdx.x"))
out_i_o_o_i_j_o_o_i_fused = s[out].fuse(out_i_o_o_i, out_j_o_o_i)
s[out].bind(out_i_o_o_i_j_o_o_i_fused, te.thread_axis("vthread"))
out_i_o_i_j_o_i_fused = s[out].fuse(out_i_o_i, out_j_o_i)
s[out].bind(out_i_o_i_j_o_i_fused, te.thread_axis("threadIdx.x"))
B_shared_ax0_ax1_fused = s[B_shared].fuse(B_shared_ax0, B_shared_ax1)
B_shared_ax0_ax1_fused_o, B_shared_ax0_ax1_fused_i = s[B_shared].split(B_shared_ax0_ax1_fused, factor=1)
s[B_shared].vectorize(B_shared_ax0_ax1_fused_i)
B_shared_ax0_ax1_fused_o_o, B_shared_ax0_ax1_fused_o_i = s[B_shared].split(B_shared_ax0_ax1_fused_o, factor=128)
s[B_shared].bind(B_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
A_shared_ax0_ax1_fused = s[A_shared].fuse(A_shared_ax0, A_shared_ax1)
A_shared_ax0_ax1_fused_o, A_shared_ax0_ax1_fused_i = s[A_shared].split(A_shared_ax0_ax1_fused, factor=1)
s[A_shared].vectorize(A_shared_ax0_ax1_fused_i)
A_shared_ax0_ax1_fused_o_o, A_shared_ax0_ax1_fused_o_i = s[A_shared].split(A_shared_ax0_ax1_fused_o, factor=128)
s[A_shared].bind(A_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
s[transposed_gemm].pragma(transposed_gemm_i_o_o_o_o, "auto_unroll_max_step", 0)
s[transposed_gemm].pragma(transposed_gemm_i_o_o_o_o, "unroll_explicit", True)

Equivalent CUDA code:

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(128) default_function_kernel(float* __restrict__ A, float* __restrict__ B, float* __restrict__ C, float* __restrict__ out) {
  float transposed_gemm[16];
  __shared__ float A_shared[256];
  __shared__ float B_shared[512];
  for (int i_inner_init = 0; i_inner_init < 2; ++i_inner_init) {
    transposed_gemm[i_inner_init] = 0.000000e+00f;
    transposed_gemm[(i_inner_init + 2)] = 0.000000e+00f;
    transposed_gemm[(i_inner_init + 4)] = 0.000000e+00f;
    transposed_gemm[(i_inner_init + 6)] = 0.000000e+00f;
    transposed_gemm[(i_inner_init + 8)] = 0.000000e+00f;
    transposed_gemm[(i_inner_init + 10)] = 0.000000e+00f;
    transposed_gemm[(i_inner_init + 12)] = 0.000000e+00f;
    transposed_gemm[(i_inner_init + 14)] = 0.000000e+00f;
  }
  for (int k_outer_outer = 0; k_outer_outer < 4; ++k_outer_outer) {
    __syncthreads();
    for (int ax0_ax1_fused_outer_outer = 0; ax0_ax1_fused_outer_outer < 2; ++ax0_ax1_fused_outer_outer) {
      A_shared[((ax0_ax1_fused_outer_outer * 128) + ((int)threadIdx.x))] = A[((((((((int)blockIdx.x) >> 4) * 1024) + (ax0_ax1_fused_outer_outer * 512)) + ((((int)threadIdx.x) >> 3) * 32)) + (k_outer_outer * 8)) + (((int)threadIdx.x) & 7))];
    }
    for (int ax0_ax1_fused_outer_outer_1 = 0; ax0_ax1_fused_outer_outer_1 < 4; ++ax0_ax1_fused_outer_outer_1) {
      B_shared[((ax0_ax1_fused_outer_outer_1 * 128) + ((int)threadIdx.x))] = B[((((((((int)blockIdx.x) & 15) * 2048) + (ax0_ax1_fused_outer_outer_1 * 512)) + ((((int)threadIdx.x) >> 3) * 32)) + (k_outer_outer * 8)) + (((int)threadIdx.x) & 7))];
    }
    __syncthreads();
    for (int k_outer_inner = 0; k_outer_inner < 2; ++k_outer_inner) {
      for (int k_inner = 0; k_inner < 4; ++k_inner) {
        for (int i_inner = 0; i_inner < 2; ++i_inner) {
          transposed_gemm[i_inner] = (transposed_gemm[i_inner] + (A_shared[(((((((int)threadIdx.x) >> 5) * 16) + (i_inner * 8)) + (k_outer_inner * 4)) + k_inner)] * B_shared[((((((int)threadIdx.x) & 31) * 8) + (k_outer_inner * 4)) + k_inner)]));
          transposed_gemm[(i_inner + 2)] = (transposed_gemm[(i_inner + 2)] + (A_shared[(((((((int)threadIdx.x) >> 5) * 16) + (i_inner * 8)) + (k_outer_inner * 4)) + k_inner)] * B_shared[(((((((int)threadIdx.x) & 31) * 8) + (k_outer_inner * 4)) + k_inner) + 256)]));
          transposed_gemm[(i_inner + 4)] = (transposed_gemm[(i_inner + 4)] + (A_shared[((((((((int)threadIdx.x) >> 5) * 16) + (i_inner * 8)) + (k_outer_inner * 4)) + k_inner) + 64)] * B_shared[((((((int)threadIdx.x) & 31) * 8) + (k_outer_inner * 4)) + k_inner)]));
          transposed_gemm[(i_inner + 6)] = (transposed_gemm[(i_inner + 6)] + (A_shared[((((((((int)threadIdx.x) >> 5) * 16) + (i_inner * 8)) + (k_outer_inner * 4)) + k_inner) + 64)] * B_shared[(((((((int)threadIdx.x) & 31) * 8) + (k_outer_inner * 4)) + k_inner) + 256)]));
          transposed_gemm[(i_inner + 8)] = (transposed_gemm[(i_inner + 8)] + (A_shared[((((((((int)threadIdx.x) >> 5) * 16) + (i_inner * 8)) + (k_outer_inner * 4)) + k_inner) + 128)] * B_shared[((((((int)threadIdx.x) & 31) * 8) + (k_outer_inner * 4)) + k_inner)]));
          transposed_gemm[(i_inner + 10)] = (transposed_gemm[(i_inner + 10)] + (A_shared[((((((((int)threadIdx.x) >> 5) * 16) + (i_inner * 8)) + (k_outer_inner * 4)) + k_inner) + 128)] * B_shared[(((((((int)threadIdx.x) & 31) * 8) + (k_outer_inner * 4)) + k_inner) + 256)]));
          transposed_gemm[(i_inner + 12)] = (transposed_gemm[(i_inner + 12)] + (A_shared[((((((((int)threadIdx.x) >> 5) * 16) + (i_inner * 8)) + (k_outer_inner * 4)) + k_inner) + 192)] * B_shared[((((((int)threadIdx.x) & 31) * 8) + (k_outer_inner * 4)) + k_inner)]));
          transposed_gemm[(i_inner + 14)] = (transposed_gemm[(i_inner + 14)] + (A_shared[((((((((int)threadIdx.x) >> 5) * 16) + (i_inner * 8)) + (k_outer_inner * 4)) + k_inner) + 192)] * B_shared[(((((((int)threadIdx.x) & 31) * 8) + (k_outer_inner * 4)) + k_inner) + 256)]));
        }
      }
    }
  }
  for (int i_inner_1 = 0; i_inner_1 < 2; ++i_inner_1) {
    out[((((((((int)blockIdx.x) >> 4) * 32768) + ((((int)threadIdx.x) >> 5) * 2048)) + (i_inner_1 * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + (((int)threadIdx.x) & 31))] = (transposed_gemm[i_inner_1] + C[((((((((int)blockIdx.x) >> 4) * 32768) + ((((int)threadIdx.x) >> 5) * 2048)) + (i_inner_1 * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + (((int)threadIdx.x) & 31))]);
    out[(((((((((int)blockIdx.x) >> 4) * 32768) + ((((int)threadIdx.x) >> 5) * 2048)) + (i_inner_1 * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + (((int)threadIdx.x) & 31)) + 32)] = (transposed_gemm[(i_inner_1 + 2)] + C[(((((((((int)blockIdx.x) >> 4) * 32768) + ((((int)threadIdx.x) >> 5) * 2048)) + (i_inner_1 * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + (((int)threadIdx.x) & 31)) + 32)]);
    out[(((((((((int)blockIdx.x) >> 4) * 32768) + ((((int)threadIdx.x) >> 5) * 2048)) + (i_inner_1 * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + (((int)threadIdx.x) & 31)) + 8192)] = (transposed_gemm[(i_inner_1 + 4)] + C[(((((((((int)blockIdx.x) >> 4) * 32768) + ((((int)threadIdx.x) >> 5) * 2048)) + (i_inner_1 * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + (((int)threadIdx.x) & 31)) + 8192)]);
    out[(((((((((int)blockIdx.x) >> 4) * 32768) + ((((int)threadIdx.x) >> 5) * 2048)) + (i_inner_1 * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + (((int)threadIdx.x) & 31)) + 8224)] = (transposed_gemm[(i_inner_1 + 6)] + C[(((((((((int)blockIdx.x) >> 4) * 32768) + ((((int)threadIdx.x) >> 5) * 2048)) + (i_inner_1 * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + (((int)threadIdx.x) & 31)) + 8224)]);
    out[(((((((((int)blockIdx.x) >> 4) * 32768) + ((((int)threadIdx.x) >> 5) * 2048)) + (i_inner_1 * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + (((int)threadIdx.x) & 31)) + 16384)] = (transposed_gemm[(i_inner_1 + 8)] + C[(((((((((int)blockIdx.x) >> 4) * 32768) + ((((int)threadIdx.x) >> 5) * 2048)) + (i_inner_1 * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + (((int)threadIdx.x) & 31)) + 16384)]);
    out[(((((((((int)blockIdx.x) >> 4) * 32768) + ((((int)threadIdx.x) >> 5) * 2048)) + (i_inner_1 * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + (((int)threadIdx.x) & 31)) + 16416)] = (transposed_gemm[(i_inner_1 + 10)] + C[(((((((((int)blockIdx.x) >> 4) * 32768) + ((((int)threadIdx.x) >> 5) * 2048)) + (i_inner_1 * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + (((int)threadIdx.x) & 31)) + 16416)]);
    out[(((((((((int)blockIdx.x) >> 4) * 32768) + ((((int)threadIdx.x) >> 5) * 2048)) + (i_inner_1 * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + (((int)threadIdx.x) & 31)) + 24576)] = (transposed_gemm[(i_inner_1 + 12)] + C[(((((((((int)blockIdx.x) >> 4) * 32768) + ((((int)threadIdx.x) >> 5) * 2048)) + (i_inner_1 * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + (((int)threadIdx.x) & 31)) + 24576)]);
    out[(((((((((int)blockIdx.x) >> 4) * 32768) + ((((int)threadIdx.x) >> 5) * 2048)) + (i_inner_1 * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + (((int)threadIdx.x) & 31)) + 24608)] = (transposed_gemm[(i_inner_1 + 14)] + C[(((((((((int)blockIdx.x) >> 4) * 32768) + ((((int)threadIdx.x) >> 5) * 2048)) + (i_inner_1 * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + (((int)threadIdx.x) & 31)) + 24608)]);
  }
}


